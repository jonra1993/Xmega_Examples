
EXAMPLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002468  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00802000  00002468  000024fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006d  00802064  00802064  00002560  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00002600  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009947  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014cb  00000000  00000000  0000c287  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004cc7  00000000  00000000  0000d752  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e8c  00000000  00000000  0001241c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00029c97  00000000  00000000  000132a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000391a  00000000  00000000  0003cf3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  00040859  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009e9d  00000000  00000000  00040b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
      36:	00 00       	nop
      38:	0b c4       	rjmp	.+2070   	; 0x850 <__vector_14>
      3a:	00 00       	nop
      3c:	32 c4       	rjmp	.+2148   	; 0x8a2 <__vector_15>
      3e:	00 00       	nop
      40:	59 c4       	rjmp	.+2226   	; 0x8f4 <__vector_16>
      42:	00 00       	nop
      44:	80 c4       	rjmp	.+2304   	; 0x946 <__vector_17>
      46:	00 00       	nop
      48:	a7 c4       	rjmp	.+2382   	; 0x998 <__vector_18>
      4a:	00 00       	nop
      4c:	ce c4       	rjmp	.+2460   	; 0x9ea <__vector_19>
      4e:	00 00       	nop
      50:	f5 c4       	rjmp	.+2538   	; 0xa3c <__vector_20>
      52:	00 00       	nop
      54:	1c c5       	rjmp	.+2616   	; 0xa8e <__vector_21>
      56:	00 00       	nop
      58:	43 c5       	rjmp	.+2694   	; 0xae0 <__vector_22>
      5a:	00 00       	nop
      5c:	6a c5       	rjmp	.+2772   	; 0xb32 <__vector_23>
      5e:	00 00       	nop
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	fd c6       	rjmp	.+3578   	; 0xeb8 <__vector_47>
      be:	00 00       	nop
      c0:	24 c7       	rjmp	.+3656   	; 0xf0a <__vector_48>
      c2:	00 00       	nop
      c4:	4b c7       	rjmp	.+3734   	; 0xf5c <__vector_49>
      c6:	00 00       	nop
      c8:	72 c7       	rjmp	.+3812   	; 0xfae <__vector_50>
      ca:	00 00       	nop
      cc:	99 c7       	rjmp	.+3890   	; 0x1000 <__vector_51>
      ce:	00 00       	nop
      d0:	c0 c7       	rjmp	.+3968   	; 0x1052 <__vector_52>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	27 c5       	rjmp	.+2638   	; 0xb84 <__vector_77>
     136:	00 00       	nop
     138:	4e c5       	rjmp	.+2716   	; 0xbd6 <__vector_78>
     13a:	00 00       	nop
     13c:	75 c5       	rjmp	.+2794   	; 0xc28 <__vector_79>
     13e:	00 00       	nop
     140:	9c c5       	rjmp	.+2872   	; 0xc7a <__vector_80>
     142:	00 00       	nop
     144:	c3 c5       	rjmp	.+2950   	; 0xccc <__vector_81>
     146:	00 00       	nop
     148:	ea c5       	rjmp	.+3028   	; 0xd1e <__vector_82>
     14a:	00 00       	nop
     14c:	11 c6       	rjmp	.+3106   	; 0xd70 <__vector_83>
     14e:	00 00       	nop
     150:	38 c6       	rjmp	.+3184   	; 0xdc2 <__vector_84>
     152:	00 00       	nop
     154:	5f c6       	rjmp	.+3262   	; 0xe14 <__vector_85>
     156:	00 00       	nop
     158:	86 c6       	rjmp	.+3340   	; 0xe66 <__vector_86>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__vector_88>
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	91 03       	fmuls	r17, r17
     1fe:	8c 03       	fmulsu	r16, r20
     200:	87 03       	fmuls	r16, r23
     202:	82 03       	fmuls	r16, r18
     204:	7d 03       	fmul	r23, r21
     206:	78 03       	fmul	r23, r16
     208:	73 03       	mulsu	r23, r19

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e2       	ldi	r29, 0x2F	; 47
     214:	de bf       	out	0x3e, r29	; 62

00000216 <__do_copy_data>:
     216:	10 e2       	ldi	r17, 0x20	; 32
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	e8 e6       	ldi	r30, 0x68	; 104
     21e:	f4 e2       	ldi	r31, 0x24	; 36
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	a4 36       	cpi	r26, 0x64	; 100
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	20 e2       	ldi	r18, 0x20	; 32
     22e:	a4 e6       	ldi	r26, 0x64	; 100
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	a1 3d       	cpi	r26, 0xD1	; 209
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <main>
     240:	0c 94 32 12 	jmp	0x2464	; 0x2464 <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <board_init>:
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
	PORTA.DIR=0;
     246:	10 92 00 06 	sts	0x0600, r1
	
	PORTD.OUTSET = PIN3_bm; //Let's make PC7 as TX
     24a:	e0 e6       	ldi	r30, 0x60	; 96
     24c:	f6 e0       	ldi	r31, 0x06	; 6
     24e:	88 e0       	ldi	r24, 0x08	; 8
     250:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN3_bm; //TX pin as output
     252:	81 83       	std	Z+1, r24	; 0x01

	PORTD.OUTCLR = PIN2_bm;
     254:	84 e0       	ldi	r24, 0x04	; 4
     256:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRCLR = PIN2_bm; //PC6 as RX	
     258:	82 83       	std	Z+2, r24	; 0x02
     25a:	08 95       	ret

0000025c <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     25c:	8f ef       	ldi	r24, 0xFF	; 255
     25e:	80 93 70 00 	sts	0x0070, r24
     262:	80 93 71 00 	sts	0x0071, r24
     266:	80 93 72 00 	sts	0x0072, r24
     26a:	80 93 73 00 	sts	0x0073, r24
     26e:	80 93 74 00 	sts	0x0074, r24
     272:	80 93 75 00 	sts	0x0075, r24
     276:	80 93 76 00 	sts	0x0076, r24

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     27a:	80 91 51 00 	lds	r24, 0x0051

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
     27e:	84 fd       	sbrc	r24, 4
     280:	0d c0       	rjmp	.+26     	; 0x29c <sysclk_init+0x40>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     282:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     284:	f8 94       	cli
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
     286:	e0 e5       	ldi	r30, 0x50	; 80
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 e1       	ldi	r24, 0x10	; 16
     28c:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
     28e:	80 81       	ld	r24, Z
     290:	80 61       	ori	r24, 0x10	; 16
     292:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     294:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     296:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
     298:	84 ff       	sbrs	r24, 4
     29a:	fd cf       	rjmp	.-6      	; 0x296 <sysclk_init+0x3a>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     29c:	64 e0       	ldi	r22, 0x04	; 4
     29e:	80 e4       	ldi	r24, 0x40	; 64
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	38 c0       	rjmp	.+112    	; 0x314 <ccp_write_io>
     2a4:	08 95       	ret

000002a6 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     2a6:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     2a8:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     2aa:	e8 2f       	mov	r30, r24
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	e0 59       	subi	r30, 0x90	; 144
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	60 95       	com	r22
     2b4:	80 81       	ld	r24, Z
     2b6:	68 23       	and	r22, r24
     2b8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2ba:	9f bf       	out	0x3f, r25	; 63
     2bc:	08 95       	ret

000002be <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	1f 92       	push	r1
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2c8:	80 91 9e 20 	lds	r24, 0x209E
     2cc:	90 91 9f 20 	lds	r25, 0x209F
     2d0:	e0 91 9a 20 	lds	r30, 0x209A
     2d4:	f0 91 9b 20 	lds	r31, 0x209B
     2d8:	be 01       	movw	r22, r28
     2da:	6f 5f       	subi	r22, 0xFF	; 255
     2dc:	7f 4f       	sbci	r23, 0xFF	; 255
     2de:	09 95       	icall
	return c;
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
}
     2e2:	08 2e       	mov	r0, r24
     2e4:	00 0c       	add	r0, r0
     2e6:	99 0b       	sbc	r25, r25
     2e8:	0f 90       	pop	r0
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     2f0:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     2f2:	80 91 9e 20 	lds	r24, 0x209E
     2f6:	90 91 9f 20 	lds	r25, 0x209F
     2fa:	e0 91 9c 20 	lds	r30, 0x209C
     2fe:	f0 91 9d 20 	lds	r31, 0x209D
     302:	09 95       	icall
     304:	99 23       	and	r25, r25
     306:	1c f0       	brlt	.+6      	; 0x30e <_write+0x1e>
		return -1;
	}
	return 1;
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     312:	08 95       	ret

00000314 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     314:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     316:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     318:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     31a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     31c:	60 83       	st	Z, r22
	ret                             // Return to caller
     31e:	08 95       	ret

00000320 <qdec_evsys_pin_2_chmux>:
 * \param tc Pointer to TC module.
 * \param cnt_value Counter value :
 */
static inline void tc_write_count(volatile void *tc, uint16_t cnt_value)
{
	((TC0_t *)tc)->CNT = cnt_value;
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	fa 01       	movw	r30, r20
     324:	e0 58       	subi	r30, 0x80	; 128
     326:	fe 4f       	sbci	r31, 0xFE	; 254
     328:	81 15       	cp	r24, r1
     32a:	26 e0       	ldi	r18, 0x06	; 6
     32c:	92 07       	cpc	r25, r18
     32e:	21 f4       	brne	.+8      	; 0x338 <qdec_evsys_pin_2_chmux+0x18>
     330:	26 2f       	mov	r18, r22
     332:	20 65       	ori	r18, 0x50	; 80
     334:	20 83       	st	Z, r18
     336:	0e c0       	rjmp	.+28     	; 0x354 <qdec_evsys_pin_2_chmux+0x34>
     338:	80 32       	cpi	r24, 0x20	; 32
     33a:	26 e0       	ldi	r18, 0x06	; 6
     33c:	92 07       	cpc	r25, r18
     33e:	19 f4       	brne	.+6      	; 0x346 <qdec_evsys_pin_2_chmux+0x26>
     340:	68 65       	ori	r22, 0x58	; 88
     342:	60 83       	st	Z, r22
     344:	08 95       	ret
     346:	80 34       	cpi	r24, 0x40	; 64
     348:	26 e0       	ldi	r18, 0x06	; 6
     34a:	92 07       	cpc	r25, r18
     34c:	19 f4       	brne	.+6      	; 0x354 <qdec_evsys_pin_2_chmux+0x34>
     34e:	60 66       	ori	r22, 0x60	; 96
     350:	60 83       	st	Z, r22
     352:	08 95       	ret
     354:	80 36       	cpi	r24, 0x60	; 96
     356:	96 40       	sbci	r25, 0x06	; 6
     358:	11 f4       	brne	.+4      	; 0x35e <qdec_evsys_pin_2_chmux+0x3e>
     35a:	68 66       	ori	r22, 0x68	; 104
     35c:	60 83       	st	Z, r22
     35e:	08 95       	ret

00000360 <qdec_get_config_defaults>:
     360:	fc 01       	movw	r30, r24
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	96 e0       	ldi	r25, 0x06	; 6
     366:	80 83       	st	Z, r24
     368:	91 83       	std	Z+1, r25	; 0x01
     36a:	12 82       	std	Z+2, r1	; 0x02
     36c:	82 e0       	ldi	r24, 0x02	; 2
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	83 83       	std	Z+3, r24	; 0x03
     372:	94 83       	std	Z+4, r25	; 0x04
     374:	15 82       	std	Z+5, r1	; 0x05
     376:	16 82       	std	Z+6, r1	; 0x06
     378:	11 86       	std	Z+9, r1	; 0x09
     37a:	12 86       	std	Z+10, r1	; 0x0a
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	98 e0       	ldi	r25, 0x08	; 8
     380:	83 87       	std	Z+11, r24	; 0x0b
     382:	94 87       	std	Z+12, r25	; 0x0c
     384:	80 e4       	ldi	r24, 0x40	; 64
     386:	98 e0       	ldi	r25, 0x08	; 8
     388:	81 8b       	std	Z+17, r24	; 0x11
     38a:	92 8b       	std	Z+18, r25	; 0x12
     38c:	17 86       	std	Z+15, r1	; 0x0f
     38e:	82 e0       	ldi	r24, 0x02	; 2
     390:	80 8b       	std	Z+16, r24	; 0x10
     392:	88 ee       	ldi	r24, 0xE8	; 232
     394:	93 e0       	ldi	r25, 0x03	; 3
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	83 8b       	std	Z+19, r24	; 0x13
     39c:	94 8b       	std	Z+20, r25	; 0x14
     39e:	a5 8b       	std	Z+21, r26	; 0x15
     3a0:	b6 8b       	std	Z+22, r27	; 0x16
     3a2:	84 e0       	ldi	r24, 0x04	; 4
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	85 87       	std	Z+13, r24	; 0x0d
     3a8:	96 87       	std	Z+14, r25	; 0x0e
     3aa:	08 95       	ret

000003ac <qdec_config_phase_pins>:
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	fc 01       	movw	r30, r24
     3b2:	60 83       	st	Z, r22
     3b4:	71 83       	std	Z+1, r23	; 0x01
     3b6:	42 83       	std	Z+2, r20	; 0x02
     3b8:	03 83       	std	Z+3, r16	; 0x03
     3ba:	14 83       	std	Z+4, r17	; 0x04
     3bc:	25 83       	std	Z+5, r18	; 0x05
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	08 95       	ret

000003c4 <qdec_config_revolution>:
     3c4:	fc 01       	movw	r30, r24
     3c6:	65 87       	std	Z+13, r22	; 0x0d
     3c8:	76 87       	std	Z+14, r23	; 0x0e
     3ca:	08 95       	ret

000003cc <qdec_config_enable_freq>:
     3cc:	21 e0       	ldi	r18, 0x01	; 1
     3ce:	fc 01       	movw	r30, r24
     3d0:	27 87       	std	Z+15, r18	; 0x0f
     3d2:	43 8b       	std	Z+19, r20	; 0x13
     3d4:	54 8b       	std	Z+20, r21	; 0x14
     3d6:	65 8b       	std	Z+21, r22	; 0x15
     3d8:	76 8b       	std	Z+22, r23	; 0x16
     3da:	08 95       	ret

000003dc <qdec_enabled>:
     3dc:	2f 92       	push	r2
     3de:	3f 92       	push	r3
     3e0:	4f 92       	push	r4
     3e2:	5f 92       	push	r5
     3e4:	6f 92       	push	r6
     3e6:	7f 92       	push	r7
     3e8:	8f 92       	push	r8
     3ea:	9f 92       	push	r9
     3ec:	af 92       	push	r10
     3ee:	bf 92       	push	r11
     3f0:	cf 92       	push	r12
     3f2:	df 92       	push	r13
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	ec 01       	movw	r28, r24
     402:	e8 81       	ld	r30, Y
     404:	f9 81       	ldd	r31, Y+1	; 0x01
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	9c 01       	movw	r18, r24
     40c:	0a 80       	ldd	r0, Y+2	; 0x02
     40e:	02 c0       	rjmp	.+4      	; 0x414 <qdec_enabled+0x38>
     410:	22 0f       	add	r18, r18
     412:	33 1f       	adc	r19, r19
     414:	0a 94       	dec	r0
     416:	e2 f7       	brpl	.-8      	; 0x410 <qdec_enabled+0x34>
     418:	22 83       	std	Z+2, r18	; 0x02
     41a:	0a 80       	ldd	r0, Y+2	; 0x02
     41c:	02 c0       	rjmp	.+4      	; 0x422 <qdec_enabled+0x46>
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <qdec_enabled+0x42>
     426:	80 93 b0 00 	sts	0x00B0, r24
     42a:	e8 81       	ld	r30, Y
     42c:	f9 81       	ldd	r31, Y+1	; 0x01
     42e:	80 89       	ldd	r24, Z+16	; 0x10
     430:	88 7f       	andi	r24, 0xF8	; 248
     432:	9d 81       	ldd	r25, Y+5	; 0x05
     434:	91 11       	cpse	r25, r1
     436:	90 e4       	ldi	r25, 0x40	; 64
     438:	89 2b       	or	r24, r25
     43a:	80 8b       	std	Z+16, r24	; 0x10
     43c:	8e 81       	ldd	r24, Y+6	; 0x06
     43e:	88 23       	and	r24, r24
     440:	e9 f0       	breq	.+58     	; 0x47c <qdec_enabled+0xa0>
     442:	e8 81       	ld	r30, Y
     444:	f9 81       	ldd	r31, Y+1	; 0x01
     446:	84 e0       	ldi	r24, 0x04	; 4
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	9c 01       	movw	r18, r24
     44c:	0a 80       	ldd	r0, Y+2	; 0x02
     44e:	02 c0       	rjmp	.+4      	; 0x454 <qdec_enabled+0x78>
     450:	22 0f       	add	r18, r18
     452:	33 1f       	adc	r19, r19
     454:	0a 94       	dec	r0
     456:	e2 f7       	brpl	.-8      	; 0x450 <qdec_enabled+0x74>
     458:	22 83       	std	Z+2, r18	; 0x02
     45a:	0a 80       	ldd	r0, Y+2	; 0x02
     45c:	02 c0       	rjmp	.+4      	; 0x462 <qdec_enabled+0x86>
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	0a 94       	dec	r0
     464:	e2 f7       	brpl	.-8      	; 0x45e <qdec_enabled+0x82>
     466:	80 93 b0 00 	sts	0x00B0, r24
     46a:	e8 81       	ld	r30, Y
     46c:	f9 81       	ldd	r31, Y+1	; 0x01
     46e:	80 89       	ldd	r24, Z+16	; 0x10
     470:	88 7f       	andi	r24, 0xF8	; 248
     472:	9f 81       	ldd	r25, Y+7	; 0x07
     474:	91 11       	cpse	r25, r1
     476:	90 e4       	ldi	r25, 0x40	; 64
     478:	89 2b       	or	r24, r25
     47a:	80 8b       	std	Z+16, r24	; 0x10
     47c:	62 e0       	ldi	r22, 0x02	; 2
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	12 df       	rcall	.-476    	; 0x2a6 <sysclk_enable_module>
     482:	4a 85       	ldd	r20, Y+10	; 0x0a
     484:	6a 81       	ldd	r22, Y+2	; 0x02
     486:	88 81       	ld	r24, Y
     488:	99 81       	ldd	r25, Y+1	; 0x01
     48a:	4a df       	rcall	.-364    	; 0x320 <qdec_evsys_pin_2_chmux>
     48c:	0a 85       	ldd	r16, Y+10	; 0x0a
     48e:	10 e0       	ldi	r17, 0x00	; 0
     490:	08 57       	subi	r16, 0x78	; 120
     492:	1e 4f       	sbci	r17, 0xFE	; 254
     494:	cb 80       	ldd	r12, Y+3	; 0x03
     496:	dc 80       	ldd	r13, Y+4	; 0x04
     498:	39 ee       	ldi	r19, 0xE9	; 233
     49a:	c3 16       	cp	r12, r19
     49c:	33 e0       	ldi	r19, 0x03	; 3
     49e:	d3 06       	cpc	r13, r19
     4a0:	b8 f0       	brcs	.+46     	; 0x4d0 <qdec_enabled+0xf4>
     4a2:	96 01       	movw	r18, r12
     4a4:	36 95       	lsr	r19
     4a6:	27 95       	ror	r18
     4a8:	36 95       	lsr	r19
     4aa:	27 95       	ror	r18
     4ac:	36 95       	lsr	r19
     4ae:	27 95       	ror	r18
     4b0:	a5 ec       	ldi	r26, 0xC5	; 197
     4b2:	b0 e2       	ldi	r27, 0x20	; 32
     4b4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__umulhisi3>
     4b8:	9c 01       	movw	r18, r24
     4ba:	32 95       	swap	r19
     4bc:	22 95       	swap	r18
     4be:	2f 70       	andi	r18, 0x0F	; 15
     4c0:	23 27       	eor	r18, r19
     4c2:	3f 70       	andi	r19, 0x0F	; 15
     4c4:	23 27       	eor	r18, r19
     4c6:	a0 e0       	ldi	r26, 0x00	; 0
     4c8:	bd e7       	ldi	r27, 0x7D	; 125
     4ca:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__umulhisi3>
     4ce:	18 c0       	rjmp	.+48     	; 0x500 <qdec_enabled+0x124>
     4d0:	e1 2c       	mov	r14, r1
     4d2:	f1 2c       	mov	r15, r1
     4d4:	cc 0c       	add	r12, r12
     4d6:	dd 1c       	adc	r13, r13
     4d8:	ee 1c       	adc	r14, r14
     4da:	ff 1c       	adc	r15, r15
     4dc:	cc 0c       	add	r12, r12
     4de:	dd 1c       	adc	r13, r13
     4e0:	ee 1c       	adc	r14, r14
     4e2:	ff 1c       	adc	r15, r15
     4e4:	cc 0c       	add	r12, r12
     4e6:	dd 1c       	adc	r13, r13
     4e8:	ee 1c       	adc	r14, r14
     4ea:	ff 1c       	adc	r15, r15
     4ec:	cc 0c       	add	r12, r12
     4ee:	dd 1c       	adc	r13, r13
     4f0:	ee 1c       	adc	r14, r14
     4f2:	ff 1c       	adc	r15, r15
     4f4:	c7 01       	movw	r24, r14
     4f6:	b6 01       	movw	r22, r12
     4f8:	66 0f       	add	r22, r22
     4fa:	77 1f       	adc	r23, r23
     4fc:	88 1f       	adc	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	6b 01       	movw	r12, r22
     502:	7c 01       	movw	r14, r24
     504:	88 e0       	ldi	r24, 0x08	; 8
     506:	c8 16       	cp	r12, r24
     508:	d1 04       	cpc	r13, r1
     50a:	e1 04       	cpc	r14, r1
     50c:	f1 04       	cpc	r15, r1
     50e:	38 f0       	brcs	.+14     	; 0x51e <qdec_enabled+0x142>
     510:	0f 2e       	mov	r0, r31
     512:	f7 e0       	ldi	r31, 0x07	; 7
     514:	cf 2e       	mov	r12, r31
     516:	d1 2c       	mov	r13, r1
     518:	e1 2c       	mov	r14, r1
     51a:	f1 2c       	mov	r15, r1
     51c:	f0 2d       	mov	r31, r0
     51e:	8c 2d       	mov	r24, r12
     520:	88 60       	ori	r24, 0x08	; 8
     522:	f8 01       	movw	r30, r16
     524:	80 83       	st	Z, r24
     526:	8e 81       	ldd	r24, Y+6	; 0x06
     528:	88 23       	and	r24, r24
     52a:	99 f0       	breq	.+38     	; 0x552 <qdec_enabled+0x176>
     52c:	20 81       	ld	r18, Z
     52e:	98 85       	ldd	r25, Y+8	; 0x08
     530:	f0 e2       	ldi	r31, 0x20	; 32
     532:	9f 9f       	mul	r25, r31
     534:	c0 01       	movw	r24, r0
     536:	11 24       	eor	r1, r1
     538:	82 2b       	or	r24, r18
     53a:	80 61       	ori	r24, 0x10	; 16
     53c:	f8 01       	movw	r30, r16
     53e:	80 83       	st	Z, r24
     540:	4a 85       	ldd	r20, Y+10	; 0x0a
     542:	4f 5f       	subi	r20, 0xFF	; 255
     544:	6a 81       	ldd	r22, Y+2	; 0x02
     546:	6e 5f       	subi	r22, 0xFE	; 254
     548:	88 81       	ld	r24, Y
     54a:	99 81       	ldd	r25, Y+1	; 0x01
     54c:	e9 de       	rcall	.-558    	; 0x320 <qdec_evsys_pin_2_chmux>
     54e:	f8 01       	movw	r30, r16
     550:	c1 82       	std	Z+1, r12	; 0x01
     552:	8b 85       	ldd	r24, Y+11	; 0x0b
     554:	9c 85       	ldd	r25, Y+12	; 0x0c
     556:	a6 d5       	rcall	.+2892   	; 0x10a4 <tc_enable>
     558:	8a 85       	ldd	r24, Y+10	; 0x0a
     55a:	98 e0       	ldi	r25, 0x08	; 8
     55c:	98 0f       	add	r25, r24
     55e:	eb 85       	ldd	r30, Y+11	; 0x0b
     560:	fc 85       	ldd	r31, Y+12	; 0x0c
     562:	83 81       	ldd	r24, Z+3	; 0x03
     564:	80 71       	andi	r24, 0x10	; 16
     566:	83 83       	std	Z+3, r24	; 0x03
     568:	83 81       	ldd	r24, Z+3	; 0x03
     56a:	80 66       	ori	r24, 0x60	; 96
     56c:	89 2b       	or	r24, r25
     56e:	83 83       	std	Z+3, r24	; 0x03
     570:	eb 85       	ldd	r30, Y+11	; 0x0b
     572:	fc 85       	ldd	r31, Y+12	; 0x0c
     574:	10 a2       	std	Z+32, r1	; 0x20
     576:	11 a2       	std	Z+33, r1	; 0x21
     578:	8d 85       	ldd	r24, Y+13	; 0x0d
     57a:	9e 85       	ldd	r25, Y+14	; 0x0e
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	eb 85       	ldd	r30, Y+11	; 0x0b
     580:	fc 85       	ldd	r31, Y+12	; 0x0c
     582:	86 a3       	std	Z+38, r24	; 0x26
     584:	97 a3       	std	Z+39, r25	; 0x27
     586:	eb 85       	ldd	r30, Y+11	; 0x0b
     588:	fc 85       	ldd	r31, Y+12	; 0x0c
     58a:	80 81       	ld	r24, Z
     58c:	80 7f       	andi	r24, 0xF0	; 240
     58e:	81 60       	ori	r24, 0x01	; 1
     590:	80 83       	st	Z, r24
     592:	8f 85       	ldd	r24, Y+15	; 0x0f
     594:	88 23       	and	r24, r24
     596:	09 f4       	brne	.+2      	; 0x59a <qdec_enabled+0x1be>
     598:	09 c1       	rjmp	.+530    	; 0x7ac <qdec_enabled+0x3d0>
     59a:	e8 89       	ldd	r30, Y+16	; 0x10
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	e8 57       	subi	r30, 0x78	; 120
     5a0:	fe 4f       	sbci	r31, 0xFE	; 254
     5a2:	aa 85       	ldd	r26, Y+10	; 0x0a
     5a4:	b0 e0       	ldi	r27, 0x00	; 0
     5a6:	a8 57       	subi	r26, 0x78	; 120
     5a8:	be 4f       	sbci	r27, 0xFE	; 254
     5aa:	8c 91       	ld	r24, X
     5ac:	87 70       	andi	r24, 0x07	; 7
     5ae:	80 83       	st	Z, r24
     5b0:	48 89       	ldd	r20, Y+16	; 0x10
     5b2:	6a 81       	ldd	r22, Y+2	; 0x02
     5b4:	88 81       	ld	r24, Y
     5b6:	99 81       	ldd	r25, Y+1	; 0x01
     5b8:	b3 de       	rcall	.-666    	; 0x320 <qdec_evsys_pin_2_chmux>
     5ba:	89 89       	ldd	r24, Y+17	; 0x11
     5bc:	9a 89       	ldd	r25, Y+18	; 0x12
     5be:	72 d5       	rcall	.+2788   	; 0x10a4 <tc_enable>
     5c0:	88 89       	ldd	r24, Y+16	; 0x10
     5c2:	98 e0       	ldi	r25, 0x08	; 8
     5c4:	98 0f       	add	r25, r24
     5c6:	e9 89       	ldd	r30, Y+17	; 0x11
     5c8:	fa 89       	ldd	r31, Y+18	; 0x12
     5ca:	83 81       	ldd	r24, Z+3	; 0x03
     5cc:	80 71       	andi	r24, 0x10	; 16
     5ce:	83 83       	std	Z+3, r24	; 0x03
     5d0:	83 81       	ldd	r24, Z+3	; 0x03
     5d2:	80 6a       	ori	r24, 0xA0	; 160
     5d4:	89 2b       	or	r24, r25
     5d6:	83 83       	std	Z+3, r24	; 0x03
     5d8:	e9 89       	ldd	r30, Y+17	; 0x11
     5da:	fa 89       	ldd	r31, Y+18	; 0x12
     5dc:	10 a2       	std	Z+32, r1	; 0x20
     5de:	11 a2       	std	Z+33, r1	; 0x21
     5e0:	e9 89       	ldd	r30, Y+17	; 0x11
     5e2:	fa 89       	ldd	r31, Y+18	; 0x12
     5e4:	8f ef       	ldi	r24, 0xFF	; 255
     5e6:	9f ef       	ldi	r25, 0xFF	; 255
     5e8:	86 a3       	std	Z+38, r24	; 0x26
     5ea:	97 a3       	std	Z+39, r25	; 0x27
     5ec:	e9 89       	ldd	r30, Y+17	; 0x11
     5ee:	fa 89       	ldd	r31, Y+18	; 0x12
     5f0:	e6 fd       	sbrc	r30, 6
     5f2:	04 c0       	rjmp	.+8      	; 0x5fc <qdec_enabled+0x220>
     5f4:	81 81       	ldd	r24, Z+1	; 0x01
     5f6:	80 61       	ori	r24, 0x10	; 16
     5f8:	81 83       	std	Z+1, r24	; 0x01
     5fa:	03 c0       	rjmp	.+6      	; 0x602 <qdec_enabled+0x226>
     5fc:	81 81       	ldd	r24, Z+1	; 0x01
     5fe:	80 61       	ori	r24, 0x10	; 16
     600:	81 83       	std	Z+1, r24	; 0x01
     602:	6b 89       	ldd	r22, Y+19	; 0x13
     604:	7c 89       	ldd	r23, Y+20	; 0x14
     606:	8d 89       	ldd	r24, Y+21	; 0x15
     608:	9e 89       	ldd	r25, Y+22	; 0x16
     60a:	28 ee       	ldi	r18, 0xE8	; 232
     60c:	33 e0       	ldi	r19, 0x03	; 3
     60e:	40 e0       	ldi	r20, 0x00	; 0
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__udivmodsi4>
     616:	ca 01       	movw	r24, r20
     618:	b9 01       	movw	r22, r18
     61a:	0d 85       	ldd	r16, Y+13	; 0x0d
     61c:	1e 85       	ldd	r17, Y+14	; 0x0e
     61e:	98 01       	movw	r18, r16
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__udivmodsi4>
     628:	e9 89       	ldd	r30, Y+17	; 0x11
     62a:	fa 89       	ldd	r31, Y+18	; 0x12
     62c:	23 31       	cpi	r18, 0x13	; 19
     62e:	8a e7       	ldi	r24, 0x7A	; 122
     630:	38 07       	cpc	r19, r24
     632:	41 05       	cpc	r20, r1
     634:	51 05       	cpc	r21, r1
     636:	28 f4       	brcc	.+10     	; 0x642 <qdec_enabled+0x266>
     638:	80 81       	ld	r24, Z
     63a:	80 7f       	andi	r24, 0xF0	; 240
     63c:	87 60       	ori	r24, 0x07	; 7
     63e:	80 83       	st	Z, r24
     640:	3e c0       	rjmp	.+124    	; 0x6be <qdec_enabled+0x2e2>
     642:	29 34       	cpi	r18, 0x49	; 73
     644:	88 ee       	ldi	r24, 0xE8	; 232
     646:	38 07       	cpc	r19, r24
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	48 07       	cpc	r20, r24
     64c:	51 05       	cpc	r21, r1
     64e:	28 f4       	brcc	.+10     	; 0x65a <qdec_enabled+0x27e>
     650:	80 81       	ld	r24, Z
     652:	80 7f       	andi	r24, 0xF0	; 240
     654:	86 60       	ori	r24, 0x06	; 6
     656:	80 83       	st	Z, r24
     658:	32 c0       	rjmp	.+100    	; 0x6be <qdec_enabled+0x2e2>
     65a:	21 32       	cpi	r18, 0x21	; 33
     65c:	81 ea       	ldi	r24, 0xA1	; 161
     65e:	38 07       	cpc	r19, r24
     660:	87 e0       	ldi	r24, 0x07	; 7
     662:	48 07       	cpc	r20, r24
     664:	51 05       	cpc	r21, r1
     666:	28 f4       	brcc	.+10     	; 0x672 <qdec_enabled+0x296>
     668:	80 81       	ld	r24, Z
     66a:	80 7f       	andi	r24, 0xF0	; 240
     66c:	85 60       	ori	r24, 0x05	; 5
     66e:	80 83       	st	Z, r24
     670:	26 c0       	rjmp	.+76     	; 0x6be <qdec_enabled+0x2e2>
     672:	21 30       	cpi	r18, 0x01	; 1
     674:	89 e0       	ldi	r24, 0x09	; 9
     676:	38 07       	cpc	r19, r24
     678:	8d e3       	ldi	r24, 0x3D	; 61
     67a:	48 07       	cpc	r20, r24
     67c:	51 05       	cpc	r21, r1
     67e:	28 f4       	brcc	.+10     	; 0x68a <qdec_enabled+0x2ae>
     680:	80 81       	ld	r24, Z
     682:	80 7f       	andi	r24, 0xF0	; 240
     684:	84 60       	ori	r24, 0x04	; 4
     686:	80 83       	st	Z, r24
     688:	1a c0       	rjmp	.+52     	; 0x6be <qdec_enabled+0x2e2>
     68a:	21 30       	cpi	r18, 0x01	; 1
     68c:	82 e1       	ldi	r24, 0x12	; 18
     68e:	38 07       	cpc	r19, r24
     690:	8a e7       	ldi	r24, 0x7A	; 122
     692:	48 07       	cpc	r20, r24
     694:	51 05       	cpc	r21, r1
     696:	28 f4       	brcc	.+10     	; 0x6a2 <qdec_enabled+0x2c6>
     698:	80 81       	ld	r24, Z
     69a:	80 7f       	andi	r24, 0xF0	; 240
     69c:	83 60       	ori	r24, 0x03	; 3
     69e:	80 83       	st	Z, r24
     6a0:	0e c0       	rjmp	.+28     	; 0x6be <qdec_enabled+0x2e2>
     6a2:	21 30       	cpi	r18, 0x01	; 1
     6a4:	34 42       	sbci	r19, 0x24	; 36
     6a6:	44 4f       	sbci	r20, 0xF4	; 244
     6a8:	51 05       	cpc	r21, r1
     6aa:	28 f4       	brcc	.+10     	; 0x6b6 <qdec_enabled+0x2da>
     6ac:	80 81       	ld	r24, Z
     6ae:	80 7f       	andi	r24, 0xF0	; 240
     6b0:	82 60       	ori	r24, 0x02	; 2
     6b2:	80 83       	st	Z, r24
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <qdec_enabled+0x2e2>
     6b6:	80 81       	ld	r24, Z
     6b8:	80 7f       	andi	r24, 0xF0	; 240
     6ba:	81 60       	ori	r24, 0x01	; 1
     6bc:	80 83       	st	Z, r24
     6be:	e9 89       	ldd	r30, Y+17	; 0x11
     6c0:	fa 89       	ldd	r31, Y+18	; 0x12
     6c2:	80 81       	ld	r24, Z
     6c4:	e8 2f       	mov	r30, r24
     6c6:	ef 70       	andi	r30, 0x0F	; 15
     6c8:	8e 2f       	mov	r24, r30
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	fc 01       	movw	r30, r24
     6ce:	31 97       	sbiw	r30, 0x01	; 1
     6d0:	e7 30       	cpi	r30, 0x07	; 7
     6d2:	f1 05       	cpc	r31, r1
     6d4:	20 f4       	brcc	.+8      	; 0x6de <qdec_enabled+0x302>
     6d6:	e2 50       	subi	r30, 0x02	; 2
     6d8:	ff 4f       	sbci	r31, 0xFF	; 255
     6da:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__tablejump2__>
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	dc 01       	movw	r26, r24
     6e4:	22 c0       	rjmp	.+68     	; 0x72a <qdec_enabled+0x34e>
     6e6:	82 e1       	ldi	r24, 0x12	; 18
     6e8:	9a e7       	ldi	r25, 0x7A	; 122
     6ea:	a0 e0       	ldi	r26, 0x00	; 0
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	1d c0       	rjmp	.+58     	; 0x72a <qdec_enabled+0x34e>
     6f0:	88 e4       	ldi	r24, 0x48	; 72
     6f2:	98 ee       	ldi	r25, 0xE8	; 232
     6f4:	a1 e0       	ldi	r26, 0x01	; 1
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	18 c0       	rjmp	.+48     	; 0x72a <qdec_enabled+0x34e>
     6fa:	80 e2       	ldi	r24, 0x20	; 32
     6fc:	91 ea       	ldi	r25, 0xA1	; 161
     6fe:	a7 e0       	ldi	r26, 0x07	; 7
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	13 c0       	rjmp	.+38     	; 0x72a <qdec_enabled+0x34e>
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	99 e0       	ldi	r25, 0x09	; 9
     708:	ad e3       	ldi	r26, 0x3D	; 61
     70a:	b0 e0       	ldi	r27, 0x00	; 0
     70c:	0e c0       	rjmp	.+28     	; 0x72a <qdec_enabled+0x34e>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	92 e1       	ldi	r25, 0x12	; 18
     712:	aa e7       	ldi	r26, 0x7A	; 122
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	09 c0       	rjmp	.+18     	; 0x72a <qdec_enabled+0x34e>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	94 e2       	ldi	r25, 0x24	; 36
     71c:	a4 ef       	ldi	r26, 0xF4	; 244
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	04 c0       	rjmp	.+8      	; 0x72a <qdec_enabled+0x34e>
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	98 e4       	ldi	r25, 0x48	; 72
     726:	a8 ee       	ldi	r26, 0xE8	; 232
     728:	b1 e0       	ldi	r27, 0x01	; 1
     72a:	1c 01       	movw	r2, r24
     72c:	2d 01       	movw	r4, r26
     72e:	28 2f       	mov	r18, r24
     730:	33 2d       	mov	r19, r3
     732:	44 2d       	mov	r20, r4
     734:	55 2d       	mov	r21, r5
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	06 e0       	ldi	r16, 0x06	; 6
     740:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__ashldi3>
     744:	a2 2c       	mov	r10, r2
     746:	b3 2c       	mov	r11, r3
     748:	c4 2c       	mov	r12, r4
     74a:	d5 2c       	mov	r13, r5
     74c:	e1 2c       	mov	r14, r1
     74e:	f1 2c       	mov	r15, r1
     750:	00 e0       	ldi	r16, 0x00	; 0
     752:	10 e0       	ldi	r17, 0x00	; 0
     754:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__subdi3>
     758:	01 e0       	ldi	r16, 0x01	; 1
     75a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__ashldi3>
     75e:	00 e0       	ldi	r16, 0x00	; 0
     760:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__subdi3>
     764:	03 e0       	ldi	r16, 0x03	; 3
     766:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__ashldi3>
     76a:	cb 88       	ldd	r12, Y+19	; 0x13
     76c:	dc 88       	ldd	r13, Y+20	; 0x14
     76e:	ed 88       	ldd	r14, Y+21	; 0x15
     770:	fe 88       	ldd	r15, Y+22	; 0x16
     772:	16 01       	movw	r2, r12
     774:	27 01       	movw	r4, r14
     776:	ac 2c       	mov	r10, r12
     778:	b3 2c       	mov	r11, r3
     77a:	c4 2c       	mov	r12, r4
     77c:	d5 2c       	mov	r13, r5
     77e:	e1 2c       	mov	r14, r1
     780:	f1 2c       	mov	r15, r1
     782:	00 e0       	ldi	r16, 0x00	; 0
     784:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__udivdi3>
     788:	02 e0       	ldi	r16, 0x02	; 2
     78a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__ashldi3>
     78e:	2d 84       	ldd	r2, Y+13	; 0x0d
     790:	3e 84       	ldd	r3, Y+14	; 0x0e
     792:	a2 2c       	mov	r10, r2
     794:	b3 2c       	mov	r11, r3
     796:	c1 2c       	mov	r12, r1
     798:	d1 2c       	mov	r13, r1
     79a:	00 e0       	ldi	r16, 0x00	; 0
     79c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__udivdi3>
     7a0:	2f 8b       	std	Y+23, r18	; 0x17
     7a2:	38 8f       	std	Y+24, r19	; 0x18
     7a4:	49 8f       	std	Y+25, r20	; 0x19
     7a6:	5a 8f       	std	Y+26, r21	; 0x1a
     7a8:	1b 8e       	std	Y+27, r1	; 0x1b
     7aa:	1c 8e       	std	Y+28, r1	; 0x1c
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	bf 90       	pop	r11
     7be:	af 90       	pop	r10
     7c0:	9f 90       	pop	r9
     7c2:	8f 90       	pop	r8
     7c4:	7f 90       	pop	r7
     7c6:	6f 90       	pop	r6
     7c8:	5f 90       	pop	r5
     7ca:	4f 90       	pop	r4
     7cc:	3f 90       	pop	r3
     7ce:	2f 90       	pop	r2
     7d0:	08 95       	ret

000007d2 <qdec_get_position>:
	tc_write_count(config->timer, 0);
}

uint16_t qdec_get_position(qdec_config_t *config)
{
	return tc_read_count(config->timer);
     7d2:	dc 01       	movw	r26, r24
     7d4:	1b 96       	adiw	r26, 0x0b	; 11
     7d6:	ed 91       	ld	r30, X+
     7d8:	fc 91       	ld	r31, X
     7da:	1c 97       	sbiw	r26, 0x0c	; 12
 * \param tc Pointer to TC module.
 * \note Output the Counter value CNT
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	return (((TC0_t *)tc)->CNT);
     7dc:	80 a1       	ldd	r24, Z+32	; 0x20
     7de:	91 a1       	ldd	r25, Z+33	; 0x21
}
     7e0:	08 95       	ret

000007e2 <qdec_get_direction>:
{
#if XMEGA_E
	return !(((TC5_t *)config->timer)->CTRLGSET & TC5_DIR_bm);

#else
	return !(((TC0_t *)config->timer)->CTRLFSET & TC0_DIR_bm);
     7e2:	dc 01       	movw	r26, r24
     7e4:	1b 96       	adiw	r26, 0x0b	; 11
     7e6:	ed 91       	ld	r30, X+
     7e8:	fc 91       	ld	r31, X
     7ea:	1c 97       	sbiw	r26, 0x0c	; 12
     7ec:	81 85       	ldd	r24, Z+9	; 0x09
     7ee:	80 95       	com	r24

#endif
}
     7f0:	81 70       	andi	r24, 0x01	; 1
     7f2:	08 95       	ret

000007f4 <qdec_get_frequency>:

uint16_t qdec_get_frequency(qdec_config_t *config)
{
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	ec 01       	movw	r28, r24
	uint16_t capture = 0;

	/* While the CC flag is setted, read the CC value.
	 * This allows to read all CC buffers on XMEGA E and read the last value
	 */
	while (tc_is_cc_interrupt(config->freq_opt.timer, TC_CCA)) {
     7fa:	e9 89       	ldd	r30, Y+17	; 0x11
     7fc:	fa 89       	ldd	r31, Y+18	; 0x12
 * \return  CCx Interrupt or not
 */
static inline bool tc_is_cc_interrupt(volatile void *tc,
		enum tc_cc_channel_t channel_index)
{
	if (tc_is_tc0(void *tc)) {
     7fe:	af 01       	movw	r20, r30
     800:	40 74       	andi	r20, 0x40	; 64
     802:	55 27       	eor	r21, r21
#endif
}

uint16_t qdec_get_frequency(qdec_config_t *config)
{
	uint16_t capture = 0;
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0

	/* While the CC flag is setted, read the CC value.
	 * This allows to read all CC buffers on XMEGA E and read the last value
	 */
	while (tc_is_cc_interrupt(config->freq_opt.timer, TC_CCA)) {
     808:	05 c0       	rjmp	.+10     	; 0x814 <qdec_get_frequency+0x20>
		enum tc_cc_channel_t channel_index)
{
	if (tc_is_tc0(void *tc)) {
		switch (channel_index) {
		case TC_CCA:
			return (((TC0_t *)tc)->CCA);
     80a:	20 a5       	ldd	r18, Z+40	; 0x28
     80c:	31 a5       	ldd	r19, Z+41	; 0x29
     80e:	02 c0       	rjmp	.+4      	; 0x814 <qdec_get_frequency+0x20>
			return (((TC0_t *)tc)->CCD);
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
			case TC_CCA:
				return (((TC1_t *)tc)->CCA);
     810:	20 a5       	ldd	r18, Z+40	; 0x28
     812:	31 a5       	ldd	r19, Z+41	; 0x29
 * \return  CCx Interrupt or not
 */
static inline bool tc_is_cc_interrupt(volatile void *tc,
		enum tc_cc_channel_t channel_index)
{
	if (tc_is_tc0(void *tc)) {
     814:	41 15       	cp	r20, r1
     816:	51 05       	cpc	r21, r1
     818:	21 f4       	brne	.+8      	; 0x822 <qdec_get_frequency+0x2e>
		switch (channel_index) {
		case TC_CCA:
			return (((TC0_t *)tc)->INTFLAGS & TC0_CCAIF_bm);
     81a:	84 85       	ldd	r24, Z+12	; 0x0c
     81c:	84 fd       	sbrc	r24, 4
     81e:	f5 cf       	rjmp	.-22     	; 0x80a <qdec_get_frequency+0x16>
     820:	03 c0       	rjmp	.+6      	; 0x828 <qdec_get_frequency+0x34>
			return (((TC0_t *)tc)->INTFLAGS & TC0_CCDIF_bm);
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
			case TC_CCA:
				return (((TC1_t *)tc)->INTFLAGS &
     822:	84 85       	ldd	r24, Z+12	; 0x0c
     824:	84 fd       	sbrc	r24, 4
     826:	f4 cf       	rjmp	.-24     	; 0x810 <qdec_get_frequency+0x1c>
		capture = tc_read_cc(config->freq_opt.timer, TC_CCA);
	}
	if (capture == 0) {
     828:	21 15       	cp	r18, r1
     82a:	31 05       	cpc	r19, r1
     82c:	19 f4       	brne	.+6      	; 0x834 <qdec_get_frequency+0x40>
		/* Out of range and certainly due to a rebounce not filtered */
		return config->freq_opt.last_freq;
     82e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     830:	9c 8d       	ldd	r25, Y+28	; 0x1c
     832:	0b c0       	rjmp	.+22     	; 0x84a <qdec_get_frequency+0x56>
	}

	config->freq_opt.last_freq = config->freq_opt.coef / capture;
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	6f 89       	ldd	r22, Y+23	; 0x17
     83a:	78 8d       	ldd	r23, Y+24	; 0x18
     83c:	89 8d       	ldd	r24, Y+25	; 0x19
     83e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     840:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__udivmodsi4>
     844:	c9 01       	movw	r24, r18
     846:	2b 8f       	std	Y+27, r18	; 0x1b
     848:	3c 8f       	std	Y+28, r19	; 0x1c
	return config->freq_opt.last_freq;
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     850:	1f 92       	push	r1
     852:	0f 92       	push	r0
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	0f 92       	push	r0
     858:	11 24       	eor	r1, r1
     85a:	2f 93       	push	r18
     85c:	3f 93       	push	r19
     85e:	4f 93       	push	r20
     860:	5f 93       	push	r21
     862:	6f 93       	push	r22
     864:	7f 93       	push	r23
     866:	8f 93       	push	r24
     868:	9f 93       	push	r25
     86a:	af 93       	push	r26
     86c:	bf 93       	push	r27
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     872:	e0 91 96 20 	lds	r30, 0x2096
     876:	f0 91 97 20 	lds	r31, 0x2097
     87a:	30 97       	sbiw	r30, 0x00	; 0
     87c:	09 f0       	breq	.+2      	; 0x880 <__vector_14+0x30>
		tc_tcc0_ovf_callback();
     87e:	09 95       	icall
	}
}
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	bf 91       	pop	r27
     886:	af 91       	pop	r26
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	7f 91       	pop	r23
     88e:	6f 91       	pop	r22
     890:	5f 91       	pop	r21
     892:	4f 91       	pop	r20
     894:	3f 91       	pop	r19
     896:	2f 91       	pop	r18
     898:	0f 90       	pop	r0
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	0f 90       	pop	r0
     89e:	1f 90       	pop	r1
     8a0:	18 95       	reti

000008a2 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     8a2:	1f 92       	push	r1
     8a4:	0f 92       	push	r0
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	0f 92       	push	r0
     8aa:	11 24       	eor	r1, r1
     8ac:	2f 93       	push	r18
     8ae:	3f 93       	push	r19
     8b0:	4f 93       	push	r20
     8b2:	5f 93       	push	r21
     8b4:	6f 93       	push	r22
     8b6:	7f 93       	push	r23
     8b8:	8f 93       	push	r24
     8ba:	9f 93       	push	r25
     8bc:	af 93       	push	r26
     8be:	bf 93       	push	r27
     8c0:	ef 93       	push	r30
     8c2:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     8c4:	e0 91 94 20 	lds	r30, 0x2094
     8c8:	f0 91 95 20 	lds	r31, 0x2095
     8cc:	30 97       	sbiw	r30, 0x00	; 0
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__vector_15+0x30>
		tc_tcc0_err_callback();
     8d0:	09 95       	icall
	}
}
     8d2:	ff 91       	pop	r31
     8d4:	ef 91       	pop	r30
     8d6:	bf 91       	pop	r27
     8d8:	af 91       	pop	r26
     8da:	9f 91       	pop	r25
     8dc:	8f 91       	pop	r24
     8de:	7f 91       	pop	r23
     8e0:	6f 91       	pop	r22
     8e2:	5f 91       	pop	r21
     8e4:	4f 91       	pop	r20
     8e6:	3f 91       	pop	r19
     8e8:	2f 91       	pop	r18
     8ea:	0f 90       	pop	r0
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	0f 90       	pop	r0
     8f0:	1f 90       	pop	r1
     8f2:	18 95       	reti

000008f4 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     8f4:	1f 92       	push	r1
     8f6:	0f 92       	push	r0
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	0f 92       	push	r0
     8fc:	11 24       	eor	r1, r1
     8fe:	2f 93       	push	r18
     900:	3f 93       	push	r19
     902:	4f 93       	push	r20
     904:	5f 93       	push	r21
     906:	6f 93       	push	r22
     908:	7f 93       	push	r23
     90a:	8f 93       	push	r24
     90c:	9f 93       	push	r25
     90e:	af 93       	push	r26
     910:	bf 93       	push	r27
     912:	ef 93       	push	r30
     914:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     916:	e0 91 92 20 	lds	r30, 0x2092
     91a:	f0 91 93 20 	lds	r31, 0x2093
     91e:	30 97       	sbiw	r30, 0x00	; 0
     920:	09 f0       	breq	.+2      	; 0x924 <__vector_16+0x30>
		tc_tcc0_cca_callback();
     922:	09 95       	icall
	}
}
     924:	ff 91       	pop	r31
     926:	ef 91       	pop	r30
     928:	bf 91       	pop	r27
     92a:	af 91       	pop	r26
     92c:	9f 91       	pop	r25
     92e:	8f 91       	pop	r24
     930:	7f 91       	pop	r23
     932:	6f 91       	pop	r22
     934:	5f 91       	pop	r21
     936:	4f 91       	pop	r20
     938:	3f 91       	pop	r19
     93a:	2f 91       	pop	r18
     93c:	0f 90       	pop	r0
     93e:	0f be       	out	0x3f, r0	; 63
     940:	0f 90       	pop	r0
     942:	1f 90       	pop	r1
     944:	18 95       	reti

00000946 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	5f 93       	push	r21
     958:	6f 93       	push	r22
     95a:	7f 93       	push	r23
     95c:	8f 93       	push	r24
     95e:	9f 93       	push	r25
     960:	af 93       	push	r26
     962:	bf 93       	push	r27
     964:	ef 93       	push	r30
     966:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     968:	e0 91 90 20 	lds	r30, 0x2090
     96c:	f0 91 91 20 	lds	r31, 0x2091
     970:	30 97       	sbiw	r30, 0x00	; 0
     972:	09 f0       	breq	.+2      	; 0x976 <__vector_17+0x30>
		tc_tcc0_ccb_callback();
     974:	09 95       	icall
	}
}
     976:	ff 91       	pop	r31
     978:	ef 91       	pop	r30
     97a:	bf 91       	pop	r27
     97c:	af 91       	pop	r26
     97e:	9f 91       	pop	r25
     980:	8f 91       	pop	r24
     982:	7f 91       	pop	r23
     984:	6f 91       	pop	r22
     986:	5f 91       	pop	r21
     988:	4f 91       	pop	r20
     98a:	3f 91       	pop	r19
     98c:	2f 91       	pop	r18
     98e:	0f 90       	pop	r0
     990:	0f be       	out	0x3f, r0	; 63
     992:	0f 90       	pop	r0
     994:	1f 90       	pop	r1
     996:	18 95       	reti

00000998 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     998:	1f 92       	push	r1
     99a:	0f 92       	push	r0
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	0f 92       	push	r0
     9a0:	11 24       	eor	r1, r1
     9a2:	2f 93       	push	r18
     9a4:	3f 93       	push	r19
     9a6:	4f 93       	push	r20
     9a8:	5f 93       	push	r21
     9aa:	6f 93       	push	r22
     9ac:	7f 93       	push	r23
     9ae:	8f 93       	push	r24
     9b0:	9f 93       	push	r25
     9b2:	af 93       	push	r26
     9b4:	bf 93       	push	r27
     9b6:	ef 93       	push	r30
     9b8:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     9ba:	e0 91 8e 20 	lds	r30, 0x208E
     9be:	f0 91 8f 20 	lds	r31, 0x208F
     9c2:	30 97       	sbiw	r30, 0x00	; 0
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <__vector_18+0x30>
		tc_tcc0_ccc_callback();
     9c6:	09 95       	icall
	}
}
     9c8:	ff 91       	pop	r31
     9ca:	ef 91       	pop	r30
     9cc:	bf 91       	pop	r27
     9ce:	af 91       	pop	r26
     9d0:	9f 91       	pop	r25
     9d2:	8f 91       	pop	r24
     9d4:	7f 91       	pop	r23
     9d6:	6f 91       	pop	r22
     9d8:	5f 91       	pop	r21
     9da:	4f 91       	pop	r20
     9dc:	3f 91       	pop	r19
     9de:	2f 91       	pop	r18
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	0f 90       	pop	r0
     9e6:	1f 90       	pop	r1
     9e8:	18 95       	reti

000009ea <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     9ea:	1f 92       	push	r1
     9ec:	0f 92       	push	r0
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	0f 92       	push	r0
     9f2:	11 24       	eor	r1, r1
     9f4:	2f 93       	push	r18
     9f6:	3f 93       	push	r19
     9f8:	4f 93       	push	r20
     9fa:	5f 93       	push	r21
     9fc:	6f 93       	push	r22
     9fe:	7f 93       	push	r23
     a00:	8f 93       	push	r24
     a02:	9f 93       	push	r25
     a04:	af 93       	push	r26
     a06:	bf 93       	push	r27
     a08:	ef 93       	push	r30
     a0a:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     a0c:	e0 91 8c 20 	lds	r30, 0x208C
     a10:	f0 91 8d 20 	lds	r31, 0x208D
     a14:	30 97       	sbiw	r30, 0x00	; 0
     a16:	09 f0       	breq	.+2      	; 0xa1a <__vector_19+0x30>
		tc_tcc0_ccd_callback();
     a18:	09 95       	icall
	}
}
     a1a:	ff 91       	pop	r31
     a1c:	ef 91       	pop	r30
     a1e:	bf 91       	pop	r27
     a20:	af 91       	pop	r26
     a22:	9f 91       	pop	r25
     a24:	8f 91       	pop	r24
     a26:	7f 91       	pop	r23
     a28:	6f 91       	pop	r22
     a2a:	5f 91       	pop	r21
     a2c:	4f 91       	pop	r20
     a2e:	3f 91       	pop	r19
     a30:	2f 91       	pop	r18
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     a3c:	1f 92       	push	r1
     a3e:	0f 92       	push	r0
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	0f 92       	push	r0
     a44:	11 24       	eor	r1, r1
     a46:	2f 93       	push	r18
     a48:	3f 93       	push	r19
     a4a:	4f 93       	push	r20
     a4c:	5f 93       	push	r21
     a4e:	6f 93       	push	r22
     a50:	7f 93       	push	r23
     a52:	8f 93       	push	r24
     a54:	9f 93       	push	r25
     a56:	af 93       	push	r26
     a58:	bf 93       	push	r27
     a5a:	ef 93       	push	r30
     a5c:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     a5e:	e0 91 8a 20 	lds	r30, 0x208A
     a62:	f0 91 8b 20 	lds	r31, 0x208B
     a66:	30 97       	sbiw	r30, 0x00	; 0
     a68:	09 f0       	breq	.+2      	; 0xa6c <__vector_20+0x30>
		tc_tcc1_ovf_callback();
     a6a:	09 95       	icall
	}
}
     a6c:	ff 91       	pop	r31
     a6e:	ef 91       	pop	r30
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	0f 90       	pop	r0
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	0f 90       	pop	r0
     a8a:	1f 90       	pop	r1
     a8c:	18 95       	reti

00000a8e <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     a8e:	1f 92       	push	r1
     a90:	0f 92       	push	r0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	0f 92       	push	r0
     a96:	11 24       	eor	r1, r1
     a98:	2f 93       	push	r18
     a9a:	3f 93       	push	r19
     a9c:	4f 93       	push	r20
     a9e:	5f 93       	push	r21
     aa0:	6f 93       	push	r22
     aa2:	7f 93       	push	r23
     aa4:	8f 93       	push	r24
     aa6:	9f 93       	push	r25
     aa8:	af 93       	push	r26
     aaa:	bf 93       	push	r27
     aac:	ef 93       	push	r30
     aae:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     ab0:	e0 91 88 20 	lds	r30, 0x2088
     ab4:	f0 91 89 20 	lds	r31, 0x2089
     ab8:	30 97       	sbiw	r30, 0x00	; 0
     aba:	09 f0       	breq	.+2      	; 0xabe <__vector_21+0x30>
		tc_tcc1_err_callback();
     abc:	09 95       	icall
	}
}
     abe:	ff 91       	pop	r31
     ac0:	ef 91       	pop	r30
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	0f 90       	pop	r0
     adc:	1f 90       	pop	r1
     ade:	18 95       	reti

00000ae0 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     b02:	e0 91 86 20 	lds	r30, 0x2086
     b06:	f0 91 87 20 	lds	r31, 0x2087
     b0a:	30 97       	sbiw	r30, 0x00	; 0
     b0c:	09 f0       	breq	.+2      	; 0xb10 <__vector_22+0x30>
		tc_tcc1_cca_callback();
     b0e:	09 95       	icall
	}
}
     b10:	ff 91       	pop	r31
     b12:	ef 91       	pop	r30
     b14:	bf 91       	pop	r27
     b16:	af 91       	pop	r26
     b18:	9f 91       	pop	r25
     b1a:	8f 91       	pop	r24
     b1c:	7f 91       	pop	r23
     b1e:	6f 91       	pop	r22
     b20:	5f 91       	pop	r21
     b22:	4f 91       	pop	r20
     b24:	3f 91       	pop	r19
     b26:	2f 91       	pop	r18
     b28:	0f 90       	pop	r0
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	0f 90       	pop	r0
     b2e:	1f 90       	pop	r1
     b30:	18 95       	reti

00000b32 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     b32:	1f 92       	push	r1
     b34:	0f 92       	push	r0
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	0f 92       	push	r0
     b3a:	11 24       	eor	r1, r1
     b3c:	2f 93       	push	r18
     b3e:	3f 93       	push	r19
     b40:	4f 93       	push	r20
     b42:	5f 93       	push	r21
     b44:	6f 93       	push	r22
     b46:	7f 93       	push	r23
     b48:	8f 93       	push	r24
     b4a:	9f 93       	push	r25
     b4c:	af 93       	push	r26
     b4e:	bf 93       	push	r27
     b50:	ef 93       	push	r30
     b52:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     b54:	e0 91 84 20 	lds	r30, 0x2084
     b58:	f0 91 85 20 	lds	r31, 0x2085
     b5c:	30 97       	sbiw	r30, 0x00	; 0
     b5e:	09 f0       	breq	.+2      	; 0xb62 <__vector_23+0x30>
		tc_tcc1_ccb_callback();
     b60:	09 95       	icall
	}
}
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	bf 91       	pop	r27
     b68:	af 91       	pop	r26
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	7f 91       	pop	r23
     b70:	6f 91       	pop	r22
     b72:	5f 91       	pop	r21
     b74:	4f 91       	pop	r20
     b76:	3f 91       	pop	r19
     b78:	2f 91       	pop	r18
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	0f 90       	pop	r0
     b80:	1f 90       	pop	r1
     b82:	18 95       	reti

00000b84 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	2f 93       	push	r18
     b90:	3f 93       	push	r19
     b92:	4f 93       	push	r20
     b94:	5f 93       	push	r21
     b96:	6f 93       	push	r22
     b98:	7f 93       	push	r23
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	af 93       	push	r26
     ba0:	bf 93       	push	r27
     ba2:	ef 93       	push	r30
     ba4:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     ba6:	e0 91 82 20 	lds	r30, 0x2082
     baa:	f0 91 83 20 	lds	r31, 0x2083
     bae:	30 97       	sbiw	r30, 0x00	; 0
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <__vector_77+0x30>
		tc_tcd0_ovf_callback();
     bb2:	09 95       	icall
	}
}
     bb4:	ff 91       	pop	r31
     bb6:	ef 91       	pop	r30
     bb8:	bf 91       	pop	r27
     bba:	af 91       	pop	r26
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	7f 91       	pop	r23
     bc2:	6f 91       	pop	r22
     bc4:	5f 91       	pop	r21
     bc6:	4f 91       	pop	r20
     bc8:	3f 91       	pop	r19
     bca:	2f 91       	pop	r18
     bcc:	0f 90       	pop	r0
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	0f 90       	pop	r0
     bd2:	1f 90       	pop	r1
     bd4:	18 95       	reti

00000bd6 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     bd6:	1f 92       	push	r1
     bd8:	0f 92       	push	r0
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	0f 92       	push	r0
     bde:	11 24       	eor	r1, r1
     be0:	2f 93       	push	r18
     be2:	3f 93       	push	r19
     be4:	4f 93       	push	r20
     be6:	5f 93       	push	r21
     be8:	6f 93       	push	r22
     bea:	7f 93       	push	r23
     bec:	8f 93       	push	r24
     bee:	9f 93       	push	r25
     bf0:	af 93       	push	r26
     bf2:	bf 93       	push	r27
     bf4:	ef 93       	push	r30
     bf6:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     bf8:	e0 91 80 20 	lds	r30, 0x2080
     bfc:	f0 91 81 20 	lds	r31, 0x2081
     c00:	30 97       	sbiw	r30, 0x00	; 0
     c02:	09 f0       	breq	.+2      	; 0xc06 <__vector_78+0x30>
		tc_tcd0_err_callback();
     c04:	09 95       	icall
	}
}
     c06:	ff 91       	pop	r31
     c08:	ef 91       	pop	r30
     c0a:	bf 91       	pop	r27
     c0c:	af 91       	pop	r26
     c0e:	9f 91       	pop	r25
     c10:	8f 91       	pop	r24
     c12:	7f 91       	pop	r23
     c14:	6f 91       	pop	r22
     c16:	5f 91       	pop	r21
     c18:	4f 91       	pop	r20
     c1a:	3f 91       	pop	r19
     c1c:	2f 91       	pop	r18
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	0f 90       	pop	r0
     c24:	1f 90       	pop	r1
     c26:	18 95       	reti

00000c28 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     c4a:	e0 91 7e 20 	lds	r30, 0x207E
     c4e:	f0 91 7f 20 	lds	r31, 0x207F
     c52:	30 97       	sbiw	r30, 0x00	; 0
     c54:	09 f0       	breq	.+2      	; 0xc58 <__vector_79+0x30>
		tc_tcd0_cca_callback();
     c56:	09 95       	icall
	}
}
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	bf 91       	pop	r27
     c5e:	af 91       	pop	r26
     c60:	9f 91       	pop	r25
     c62:	8f 91       	pop	r24
     c64:	7f 91       	pop	r23
     c66:	6f 91       	pop	r22
     c68:	5f 91       	pop	r21
     c6a:	4f 91       	pop	r20
     c6c:	3f 91       	pop	r19
     c6e:	2f 91       	pop	r18
     c70:	0f 90       	pop	r0
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	0f 90       	pop	r0
     c76:	1f 90       	pop	r1
     c78:	18 95       	reti

00000c7a <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     c7a:	1f 92       	push	r1
     c7c:	0f 92       	push	r0
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	0f 92       	push	r0
     c82:	11 24       	eor	r1, r1
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     c9c:	e0 91 7c 20 	lds	r30, 0x207C
     ca0:	f0 91 7d 20 	lds	r31, 0x207D
     ca4:	30 97       	sbiw	r30, 0x00	; 0
     ca6:	09 f0       	breq	.+2      	; 0xcaa <__vector_80+0x30>
		tc_tcd0_ccb_callback();
     ca8:	09 95       	icall
	}
}
     caa:	ff 91       	pop	r31
     cac:	ef 91       	pop	r30
     cae:	bf 91       	pop	r27
     cb0:	af 91       	pop	r26
     cb2:	9f 91       	pop	r25
     cb4:	8f 91       	pop	r24
     cb6:	7f 91       	pop	r23
     cb8:	6f 91       	pop	r22
     cba:	5f 91       	pop	r21
     cbc:	4f 91       	pop	r20
     cbe:	3f 91       	pop	r19
     cc0:	2f 91       	pop	r18
     cc2:	0f 90       	pop	r0
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	0f 90       	pop	r0
     cc8:	1f 90       	pop	r1
     cca:	18 95       	reti

00000ccc <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     ccc:	1f 92       	push	r1
     cce:	0f 92       	push	r0
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	0f 92       	push	r0
     cd4:	11 24       	eor	r1, r1
     cd6:	2f 93       	push	r18
     cd8:	3f 93       	push	r19
     cda:	4f 93       	push	r20
     cdc:	5f 93       	push	r21
     cde:	6f 93       	push	r22
     ce0:	7f 93       	push	r23
     ce2:	8f 93       	push	r24
     ce4:	9f 93       	push	r25
     ce6:	af 93       	push	r26
     ce8:	bf 93       	push	r27
     cea:	ef 93       	push	r30
     cec:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     cee:	e0 91 7a 20 	lds	r30, 0x207A
     cf2:	f0 91 7b 20 	lds	r31, 0x207B
     cf6:	30 97       	sbiw	r30, 0x00	; 0
     cf8:	09 f0       	breq	.+2      	; 0xcfc <__vector_81+0x30>
		tc_tcd0_ccc_callback();
     cfa:	09 95       	icall
	}
}
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	11 24       	eor	r1, r1
     d28:	2f 93       	push	r18
     d2a:	3f 93       	push	r19
     d2c:	4f 93       	push	r20
     d2e:	5f 93       	push	r21
     d30:	6f 93       	push	r22
     d32:	7f 93       	push	r23
     d34:	8f 93       	push	r24
     d36:	9f 93       	push	r25
     d38:	af 93       	push	r26
     d3a:	bf 93       	push	r27
     d3c:	ef 93       	push	r30
     d3e:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     d40:	e0 91 78 20 	lds	r30, 0x2078
     d44:	f0 91 79 20 	lds	r31, 0x2079
     d48:	30 97       	sbiw	r30, 0x00	; 0
     d4a:	09 f0       	breq	.+2      	; 0xd4e <__vector_82+0x30>
		tc_tcd0_ccd_callback();
     d4c:	09 95       	icall
	}
}
     d4e:	ff 91       	pop	r31
     d50:	ef 91       	pop	r30
     d52:	bf 91       	pop	r27
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	7f 91       	pop	r23
     d5c:	6f 91       	pop	r22
     d5e:	5f 91       	pop	r21
     d60:	4f 91       	pop	r20
     d62:	3f 91       	pop	r19
     d64:	2f 91       	pop	r18
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     d70:	1f 92       	push	r1
     d72:	0f 92       	push	r0
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	0f 92       	push	r0
     d78:	11 24       	eor	r1, r1
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     d92:	e0 91 76 20 	lds	r30, 0x2076
     d96:	f0 91 77 20 	lds	r31, 0x2077
     d9a:	30 97       	sbiw	r30, 0x00	; 0
     d9c:	09 f0       	breq	.+2      	; 0xda0 <__vector_83+0x30>
		tc_tcd1_ovf_callback();
     d9e:	09 95       	icall
	}
}
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     dc2:	1f 92       	push	r1
     dc4:	0f 92       	push	r0
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	0f 92       	push	r0
     dca:	11 24       	eor	r1, r1
     dcc:	2f 93       	push	r18
     dce:	3f 93       	push	r19
     dd0:	4f 93       	push	r20
     dd2:	5f 93       	push	r21
     dd4:	6f 93       	push	r22
     dd6:	7f 93       	push	r23
     dd8:	8f 93       	push	r24
     dda:	9f 93       	push	r25
     ddc:	af 93       	push	r26
     dde:	bf 93       	push	r27
     de0:	ef 93       	push	r30
     de2:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     de4:	e0 91 74 20 	lds	r30, 0x2074
     de8:	f0 91 75 20 	lds	r31, 0x2075
     dec:	30 97       	sbiw	r30, 0x00	; 0
     dee:	09 f0       	breq	.+2      	; 0xdf2 <__vector_84+0x30>
		tc_tcd1_err_callback();
     df0:	09 95       	icall
	}
}
     df2:	ff 91       	pop	r31
     df4:	ef 91       	pop	r30
     df6:	bf 91       	pop	r27
     df8:	af 91       	pop	r26
     dfa:	9f 91       	pop	r25
     dfc:	8f 91       	pop	r24
     dfe:	7f 91       	pop	r23
     e00:	6f 91       	pop	r22
     e02:	5f 91       	pop	r21
     e04:	4f 91       	pop	r20
     e06:	3f 91       	pop	r19
     e08:	2f 91       	pop	r18
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     e14:	1f 92       	push	r1
     e16:	0f 92       	push	r0
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	0f 92       	push	r0
     e1c:	11 24       	eor	r1, r1
     e1e:	2f 93       	push	r18
     e20:	3f 93       	push	r19
     e22:	4f 93       	push	r20
     e24:	5f 93       	push	r21
     e26:	6f 93       	push	r22
     e28:	7f 93       	push	r23
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
     e2e:	af 93       	push	r26
     e30:	bf 93       	push	r27
     e32:	ef 93       	push	r30
     e34:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     e36:	e0 91 72 20 	lds	r30, 0x2072
     e3a:	f0 91 73 20 	lds	r31, 0x2073
     e3e:	30 97       	sbiw	r30, 0x00	; 0
     e40:	09 f0       	breq	.+2      	; 0xe44 <__vector_85+0x30>
		tc_tcd1_cca_callback();
     e42:	09 95       	icall
	}
}
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	bf 91       	pop	r27
     e4a:	af 91       	pop	r26
     e4c:	9f 91       	pop	r25
     e4e:	8f 91       	pop	r24
     e50:	7f 91       	pop	r23
     e52:	6f 91       	pop	r22
     e54:	5f 91       	pop	r21
     e56:	4f 91       	pop	r20
     e58:	3f 91       	pop	r19
     e5a:	2f 91       	pop	r18
     e5c:	0f 90       	pop	r0
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	0f 90       	pop	r0
     e62:	1f 90       	pop	r1
     e64:	18 95       	reti

00000e66 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     e66:	1f 92       	push	r1
     e68:	0f 92       	push	r0
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	2f 93       	push	r18
     e72:	3f 93       	push	r19
     e74:	4f 93       	push	r20
     e76:	5f 93       	push	r21
     e78:	6f 93       	push	r22
     e7a:	7f 93       	push	r23
     e7c:	8f 93       	push	r24
     e7e:	9f 93       	push	r25
     e80:	af 93       	push	r26
     e82:	bf 93       	push	r27
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     e88:	e0 91 70 20 	lds	r30, 0x2070
     e8c:	f0 91 71 20 	lds	r31, 0x2071
     e90:	30 97       	sbiw	r30, 0x00	; 0
     e92:	09 f0       	breq	.+2      	; 0xe96 <__vector_86+0x30>
		tc_tcd1_ccb_callback();
     e94:	09 95       	icall
	}
}
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     eda:	e0 91 6e 20 	lds	r30, 0x206E
     ede:	f0 91 6f 20 	lds	r31, 0x206F
     ee2:	30 97       	sbiw	r30, 0x00	; 0
     ee4:	09 f0       	breq	.+2      	; 0xee8 <__vector_47+0x30>
		tc_tce0_ovf_callback();
     ee6:	09 95       	icall
	}
}
     ee8:	ff 91       	pop	r31
     eea:	ef 91       	pop	r30
     eec:	bf 91       	pop	r27
     eee:	af 91       	pop	r26
     ef0:	9f 91       	pop	r25
     ef2:	8f 91       	pop	r24
     ef4:	7f 91       	pop	r23
     ef6:	6f 91       	pop	r22
     ef8:	5f 91       	pop	r21
     efa:	4f 91       	pop	r20
     efc:	3f 91       	pop	r19
     efe:	2f 91       	pop	r18
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	1f 90       	pop	r1
     f08:	18 95       	reti

00000f0a <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     f0a:	1f 92       	push	r1
     f0c:	0f 92       	push	r0
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	0f 92       	push	r0
     f12:	11 24       	eor	r1, r1
     f14:	2f 93       	push	r18
     f16:	3f 93       	push	r19
     f18:	4f 93       	push	r20
     f1a:	5f 93       	push	r21
     f1c:	6f 93       	push	r22
     f1e:	7f 93       	push	r23
     f20:	8f 93       	push	r24
     f22:	9f 93       	push	r25
     f24:	af 93       	push	r26
     f26:	bf 93       	push	r27
     f28:	ef 93       	push	r30
     f2a:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     f2c:	e0 91 6c 20 	lds	r30, 0x206C
     f30:	f0 91 6d 20 	lds	r31, 0x206D
     f34:	30 97       	sbiw	r30, 0x00	; 0
     f36:	09 f0       	breq	.+2      	; 0xf3a <__vector_48+0x30>
		tc_tce0_err_callback();
     f38:	09 95       	icall
	}
}
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     f5c:	1f 92       	push	r1
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1
     f66:	2f 93       	push	r18
     f68:	3f 93       	push	r19
     f6a:	4f 93       	push	r20
     f6c:	5f 93       	push	r21
     f6e:	6f 93       	push	r22
     f70:	7f 93       	push	r23
     f72:	8f 93       	push	r24
     f74:	9f 93       	push	r25
     f76:	af 93       	push	r26
     f78:	bf 93       	push	r27
     f7a:	ef 93       	push	r30
     f7c:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     f7e:	e0 91 6a 20 	lds	r30, 0x206A
     f82:	f0 91 6b 20 	lds	r31, 0x206B
     f86:	30 97       	sbiw	r30, 0x00	; 0
     f88:	09 f0       	breq	.+2      	; 0xf8c <__vector_49+0x30>
		tc_tce0_cca_callback();
     f8a:	09 95       	icall
	}
}
     f8c:	ff 91       	pop	r31
     f8e:	ef 91       	pop	r30
     f90:	bf 91       	pop	r27
     f92:	af 91       	pop	r26
     f94:	9f 91       	pop	r25
     f96:	8f 91       	pop	r24
     f98:	7f 91       	pop	r23
     f9a:	6f 91       	pop	r22
     f9c:	5f 91       	pop	r21
     f9e:	4f 91       	pop	r20
     fa0:	3f 91       	pop	r19
     fa2:	2f 91       	pop	r18
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	11 24       	eor	r1, r1
     fb8:	2f 93       	push	r18
     fba:	3f 93       	push	r19
     fbc:	4f 93       	push	r20
     fbe:	5f 93       	push	r21
     fc0:	6f 93       	push	r22
     fc2:	7f 93       	push	r23
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	af 93       	push	r26
     fca:	bf 93       	push	r27
     fcc:	ef 93       	push	r30
     fce:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     fd0:	e0 91 68 20 	lds	r30, 0x2068
     fd4:	f0 91 69 20 	lds	r31, 0x2069
     fd8:	30 97       	sbiw	r30, 0x00	; 0
     fda:	09 f0       	breq	.+2      	; 0xfde <__vector_50+0x30>
		tc_tce0_ccb_callback();
     fdc:	09 95       	icall
	}
}
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1000:	1f 92       	push	r1
    1002:	0f 92       	push	r0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1022:	e0 91 66 20 	lds	r30, 0x2066
    1026:	f0 91 67 20 	lds	r31, 0x2067
    102a:	30 97       	sbiw	r30, 0x00	; 0
    102c:	09 f0       	breq	.+2      	; 0x1030 <__vector_51+0x30>
		tc_tce0_ccc_callback();
    102e:	09 95       	icall
	}
}
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	bf 91       	pop	r27
    1036:	af 91       	pop	r26
    1038:	9f 91       	pop	r25
    103a:	8f 91       	pop	r24
    103c:	7f 91       	pop	r23
    103e:	6f 91       	pop	r22
    1040:	5f 91       	pop	r21
    1042:	4f 91       	pop	r20
    1044:	3f 91       	pop	r19
    1046:	2f 91       	pop	r18
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti

00001052 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	2f 93       	push	r18
    105e:	3f 93       	push	r19
    1060:	4f 93       	push	r20
    1062:	5f 93       	push	r21
    1064:	6f 93       	push	r22
    1066:	7f 93       	push	r23
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	af 93       	push	r26
    106e:	bf 93       	push	r27
    1070:	ef 93       	push	r30
    1072:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1074:	e0 91 64 20 	lds	r30, 0x2064
    1078:	f0 91 65 20 	lds	r31, 0x2065
    107c:	30 97       	sbiw	r30, 0x00	; 0
    107e:	09 f0       	breq	.+2      	; 0x1082 <__vector_52+0x30>
		tc_tce0_ccd_callback();
    1080:	09 95       	icall
	}
}
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	bf 91       	pop	r27
    1088:	af 91       	pop	r26
    108a:	9f 91       	pop	r25
    108c:	8f 91       	pop	r24
    108e:	7f 91       	pop	r23
    1090:	6f 91       	pop	r22
    1092:	5f 91       	pop	r21
    1094:	4f 91       	pop	r20
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    10a4:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    10a6:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    10a8:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    10aa:	28 2f       	mov	r18, r24
    10ac:	39 2f       	mov	r19, r25
    10ae:	21 15       	cp	r18, r1
    10b0:	88 e0       	ldi	r24, 0x08	; 8
    10b2:	38 07       	cpc	r19, r24
    10b4:	39 f4       	brne	.+14     	; 0x10c4 <tc_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	83 e0       	ldi	r24, 0x03	; 3
    10ba:	f5 d8       	rcall	.-3606   	; 0x2a6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    10bc:	64 e0       	ldi	r22, 0x04	; 4
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	f2 d8       	rcall	.-3612   	; 0x2a6 <sysclk_enable_module>
    10c2:	2d c0       	rjmp	.+90     	; 0x111e <tc_enable+0x7a>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    10c4:	20 34       	cpi	r18, 0x40	; 64
    10c6:	88 e0       	ldi	r24, 0x08	; 8
    10c8:	38 07       	cpc	r19, r24
    10ca:	39 f4       	brne	.+14     	; 0x10da <tc_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    10cc:	62 e0       	ldi	r22, 0x02	; 2
    10ce:	83 e0       	ldi	r24, 0x03	; 3
    10d0:	ea d8       	rcall	.-3628   	; 0x2a6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    10d2:	64 e0       	ldi	r22, 0x04	; 4
    10d4:	83 e0       	ldi	r24, 0x03	; 3
    10d6:	e7 d8       	rcall	.-3634   	; 0x2a6 <sysclk_enable_module>
    10d8:	22 c0       	rjmp	.+68     	; 0x111e <tc_enable+0x7a>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    10da:	21 15       	cp	r18, r1
    10dc:	89 e0       	ldi	r24, 0x09	; 9
    10de:	38 07       	cpc	r19, r24
    10e0:	39 f4       	brne	.+14     	; 0x10f0 <tc_enable+0x4c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	84 e0       	ldi	r24, 0x04	; 4
    10e6:	df d8       	rcall	.-3650   	; 0x2a6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    10e8:	64 e0       	ldi	r22, 0x04	; 4
    10ea:	84 e0       	ldi	r24, 0x04	; 4
    10ec:	dc d8       	rcall	.-3656   	; 0x2a6 <sysclk_enable_module>
    10ee:	17 c0       	rjmp	.+46     	; 0x111e <tc_enable+0x7a>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    10f0:	20 34       	cpi	r18, 0x40	; 64
    10f2:	89 e0       	ldi	r24, 0x09	; 9
    10f4:	38 07       	cpc	r19, r24
    10f6:	39 f4       	brne	.+14     	; 0x1106 <tc_enable+0x62>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    10f8:	62 e0       	ldi	r22, 0x02	; 2
    10fa:	84 e0       	ldi	r24, 0x04	; 4
    10fc:	d4 d8       	rcall	.-3672   	; 0x2a6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    10fe:	64 e0       	ldi	r22, 0x04	; 4
    1100:	84 e0       	ldi	r24, 0x04	; 4
    1102:	d1 d8       	rcall	.-3678   	; 0x2a6 <sysclk_enable_module>
    1104:	0c c0       	rjmp	.+24     	; 0x111e <tc_enable+0x7a>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1106:	21 15       	cp	r18, r1
    1108:	3a 40       	sbci	r19, 0x0A	; 10
    110a:	39 f4       	brne	.+14     	; 0x111a <tc_enable+0x76>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	85 e0       	ldi	r24, 0x05	; 5
    1110:	ca d8       	rcall	.-3692   	; 0x2a6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1112:	64 e0       	ldi	r22, 0x04	; 4
    1114:	85 e0       	ldi	r24, 0x05	; 5
    1116:	c7 d8       	rcall	.-3698   	; 0x2a6 <sysclk_enable_module>
    1118:	02 c0       	rjmp	.+4      	; 0x111e <tc_enable+0x7a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    111a:	cf bf       	out	0x3f, r28	; 63
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <tc_enable+0x7c>
    111e:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1124:	fc 01       	movw	r30, r24
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	95 ff       	sbrs	r25, 5
    112a:	fd cf       	rjmp	.-6      	; 0x1126 <usart_putchar+0x2>
    112c:	60 83       	st	Z, r22
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	08 95       	ret

00001134 <usart_getchar>:
    1134:	fc 01       	movw	r30, r24
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	99 23       	and	r25, r25
    113a:	ec f7       	brge	.-6      	; 0x1136 <usart_getchar+0x2>
    113c:	80 81       	ld	r24, Z
    113e:	08 95       	ret

00001140 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1140:	2f 92       	push	r2
    1142:	3f 92       	push	r3
    1144:	4f 92       	push	r4
    1146:	5f 92       	push	r5
    1148:	6f 92       	push	r6
    114a:	7f 92       	push	r7
    114c:	8f 92       	push	r8
    114e:	9f 92       	push	r9
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	1c 01       	movw	r2, r24
    1164:	2a 01       	movw	r4, r20
    1166:	3b 01       	movw	r6, r22
    1168:	48 01       	movw	r8, r16
    116a:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    116c:	d9 01       	movw	r26, r18
    116e:	c8 01       	movw	r24, r16
    1170:	68 94       	set
    1172:	12 f8       	bld	r1, 2
    1174:	b6 95       	lsr	r27
    1176:	a7 95       	ror	r26
    1178:	97 95       	ror	r25
    117a:	87 95       	ror	r24
    117c:	16 94       	lsr	r1
    117e:	d1 f7       	brne	.-12     	; 0x1174 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1180:	b9 01       	movw	r22, r18
    1182:	a8 01       	movw	r20, r16
    1184:	03 2e       	mov	r0, r19
    1186:	36 e1       	ldi	r19, 0x16	; 22
    1188:	76 95       	lsr	r23
    118a:	67 95       	ror	r22
    118c:	57 95       	ror	r21
    118e:	47 95       	ror	r20
    1190:	3a 95       	dec	r19
    1192:	d1 f7       	brne	.-12     	; 0x1188 <usart_set_baudrate+0x48>
    1194:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1196:	f1 01       	movw	r30, r2
    1198:	24 81       	ldd	r18, Z+4	; 0x04
    119a:	22 fd       	sbrc	r18, 2
    119c:	08 c0       	rjmp	.+16     	; 0x11ae <usart_set_baudrate+0x6e>
		max_rate /= 2;
    119e:	b6 95       	lsr	r27
    11a0:	a7 95       	ror	r26
    11a2:	97 95       	ror	r25
    11a4:	87 95       	ror	r24
		min_rate /= 2;
    11a6:	76 95       	lsr	r23
    11a8:	67 95       	ror	r22
    11aa:	57 95       	ror	r21
    11ac:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    11ae:	84 15       	cp	r24, r4
    11b0:	95 05       	cpc	r25, r5
    11b2:	a6 05       	cpc	r26, r6
    11b4:	b7 05       	cpc	r27, r7
    11b6:	08 f4       	brcc	.+2      	; 0x11ba <usart_set_baudrate+0x7a>
    11b8:	aa c0       	rjmp	.+340    	; 0x130e <usart_set_baudrate+0x1ce>
    11ba:	44 16       	cp	r4, r20
    11bc:	55 06       	cpc	r5, r21
    11be:	66 06       	cpc	r6, r22
    11c0:	77 06       	cpc	r7, r23
    11c2:	08 f4       	brcc	.+2      	; 0x11c6 <usart_set_baudrate+0x86>
    11c4:	a6 c0       	rjmp	.+332    	; 0x1312 <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    11c6:	f1 01       	movw	r30, r2
    11c8:	84 81       	ldd	r24, Z+4	; 0x04
    11ca:	82 fd       	sbrc	r24, 2
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <usart_set_baudrate+0x96>
		baud *= 2;
    11ce:	44 0c       	add	r4, r4
    11d0:	55 1c       	adc	r5, r5
    11d2:	66 1c       	adc	r6, r6
    11d4:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    11d6:	c5 01       	movw	r24, r10
    11d8:	b4 01       	movw	r22, r8
    11da:	a3 01       	movw	r20, r6
    11dc:	92 01       	movw	r18, r4
    11de:	40 d4       	rcall	.+2176   	; 0x1a60 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    11e0:	2f 3f       	cpi	r18, 0xFF	; 255
    11e2:	31 05       	cpc	r19, r1
    11e4:	41 05       	cpc	r20, r1
    11e6:	51 05       	cpc	r21, r1
    11e8:	08 f4       	brcc	.+2      	; 0x11ec <usart_set_baudrate+0xac>
    11ea:	95 c0       	rjmp	.+298    	; 0x1316 <usart_set_baudrate+0x1d6>
    11ec:	c1 2c       	mov	r12, r1
    11ee:	d1 2c       	mov	r13, r1
    11f0:	76 01       	movw	r14, r12
    11f2:	ca 94       	dec	r12
    11f4:	c9 ef       	ldi	r28, 0xF9	; 249
    11f6:	05 c0       	rjmp	.+10     	; 0x1202 <usart_set_baudrate+0xc2>
    11f8:	2c 15       	cp	r18, r12
    11fa:	3d 05       	cpc	r19, r13
    11fc:	4e 05       	cpc	r20, r14
    11fe:	5f 05       	cpc	r21, r15
    1200:	68 f0       	brcs	.+26     	; 0x121c <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
    1202:	cc 0c       	add	r12, r12
    1204:	dd 1c       	adc	r13, r13
    1206:	ee 1c       	adc	r14, r14
    1208:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    120a:	cd 3f       	cpi	r28, 0xFD	; 253
    120c:	14 f4       	brge	.+4      	; 0x1212 <usart_set_baudrate+0xd2>
			limit |= 1;
    120e:	68 94       	set
    1210:	c0 f8       	bld	r12, 0
    1212:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1214:	c7 30       	cpi	r28, 0x07	; 7
    1216:	81 f7       	brne	.-32     	; 0x11f8 <usart_set_baudrate+0xb8>
    1218:	8c 2f       	mov	r24, r28
    121a:	54 c0       	rjmp	.+168    	; 0x12c4 <usart_set_baudrate+0x184>
    121c:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    121e:	cc 23       	and	r28, r28
    1220:	0c f0       	brlt	.+2      	; 0x1224 <usart_set_baudrate+0xe4>
    1222:	50 c0       	rjmp	.+160    	; 0x12c4 <usart_set_baudrate+0x184>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1224:	d3 01       	movw	r26, r6
    1226:	c2 01       	movw	r24, r4
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	aa 1f       	adc	r26, r26
    122e:	bb 1f       	adc	r27, r27
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	aa 1f       	adc	r26, r26
    1236:	bb 1f       	adc	r27, r27
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	aa 1f       	adc	r26, r26
    123e:	bb 1f       	adc	r27, r27
    1240:	85 01       	movw	r16, r10
    1242:	74 01       	movw	r14, r8
    1244:	e8 1a       	sub	r14, r24
    1246:	f9 0a       	sbc	r15, r25
    1248:	0a 0b       	sbc	r16, r26
    124a:	1b 0b       	sbc	r17, r27
    124c:	d8 01       	movw	r26, r16
    124e:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1250:	ce 3f       	cpi	r28, 0xFE	; 254
    1252:	ec f4       	brge	.+58     	; 0x128e <usart_set_baudrate+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1254:	2d ef       	ldi	r18, 0xFD	; 253
    1256:	3f ef       	ldi	r19, 0xFF	; 255
    1258:	2c 1b       	sub	r18, r28
    125a:	31 09       	sbc	r19, r1
    125c:	c7 fd       	sbrc	r28, 7
    125e:	33 95       	inc	r19
    1260:	04 c0       	rjmp	.+8      	; 0x126a <usart_set_baudrate+0x12a>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	aa 1f       	adc	r26, r26
    1268:	bb 1f       	adc	r27, r27
    126a:	2a 95       	dec	r18
    126c:	d2 f7       	brpl	.-12     	; 0x1262 <usart_set_baudrate+0x122>
    126e:	73 01       	movw	r14, r6
    1270:	62 01       	movw	r12, r4
    1272:	f6 94       	lsr	r15
    1274:	e7 94       	ror	r14
    1276:	d7 94       	ror	r13
    1278:	c7 94       	ror	r12
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	6c 0d       	add	r22, r12
    1280:	7d 1d       	adc	r23, r13
    1282:	8e 1d       	adc	r24, r14
    1284:	9f 1d       	adc	r25, r15
    1286:	a3 01       	movw	r20, r6
    1288:	92 01       	movw	r18, r4
    128a:	ea d3       	rcall	.+2004   	; 0x1a60 <__udivmodsi4>
    128c:	36 c0       	rjmp	.+108    	; 0x12fa <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
    128e:	23 e0       	ldi	r18, 0x03	; 3
    1290:	2c 0f       	add	r18, r28
    1292:	83 01       	movw	r16, r6
    1294:	72 01       	movw	r14, r4
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <usart_set_baudrate+0x160>
    1298:	ee 0c       	add	r14, r14
    129a:	ff 1c       	adc	r15, r15
    129c:	00 1f       	adc	r16, r16
    129e:	11 1f       	adc	r17, r17
    12a0:	2a 95       	dec	r18
    12a2:	d2 f7       	brpl	.-12     	; 0x1298 <usart_set_baudrate+0x158>
    12a4:	a8 01       	movw	r20, r16
    12a6:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
    12a8:	67 01       	movw	r12, r14
    12aa:	78 01       	movw	r14, r16
    12ac:	f6 94       	lsr	r15
    12ae:	e7 94       	ror	r14
    12b0:	d7 94       	ror	r13
    12b2:	c7 94       	ror	r12
    12b4:	bc 01       	movw	r22, r24
    12b6:	cd 01       	movw	r24, r26
    12b8:	6c 0d       	add	r22, r12
    12ba:	7d 1d       	adc	r23, r13
    12bc:	8e 1d       	adc	r24, r14
    12be:	9f 1d       	adc	r25, r15
    12c0:	cf d3       	rcall	.+1950   	; 0x1a60 <__udivmodsi4>
    12c2:	1b c0       	rjmp	.+54     	; 0x12fa <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    12c4:	8d 5f       	subi	r24, 0xFD	; 253
    12c6:	a3 01       	movw	r20, r6
    12c8:	92 01       	movw	r18, r4
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <usart_set_baudrate+0x194>
    12cc:	22 0f       	add	r18, r18
    12ce:	33 1f       	adc	r19, r19
    12d0:	44 1f       	adc	r20, r20
    12d2:	55 1f       	adc	r21, r21
    12d4:	8a 95       	dec	r24
    12d6:	d2 f7       	brpl	.-12     	; 0x12cc <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
    12d8:	da 01       	movw	r26, r20
    12da:	c9 01       	movw	r24, r18
    12dc:	b6 95       	lsr	r27
    12de:	a7 95       	ror	r26
    12e0:	97 95       	ror	r25
    12e2:	87 95       	ror	r24
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	68 0d       	add	r22, r8
    12ea:	79 1d       	adc	r23, r9
    12ec:	8a 1d       	adc	r24, r10
    12ee:	9b 1d       	adc	r25, r11
    12f0:	b7 d3       	rcall	.+1902   	; 0x1a60 <__udivmodsi4>
    12f2:	21 50       	subi	r18, 0x01	; 1
    12f4:	31 09       	sbc	r19, r1
    12f6:	41 09       	sbc	r20, r1
    12f8:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    12fa:	83 2f       	mov	r24, r19
    12fc:	8f 70       	andi	r24, 0x0F	; 15
    12fe:	c2 95       	swap	r28
    1300:	c0 7f       	andi	r28, 0xF0	; 240
    1302:	c8 2b       	or	r28, r24
    1304:	f1 01       	movw	r30, r2
    1306:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1308:	26 83       	std	Z+6, r18	; 0x06

	return true;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	1c c0       	rjmp	.+56     	; 0x1346 <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	1a c0       	rjmp	.+52     	; 0x1346 <usart_set_baudrate+0x206>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	18 c0       	rjmp	.+48     	; 0x1346 <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1316:	d3 01       	movw	r26, r6
    1318:	c2 01       	movw	r24, r4
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	aa 1f       	adc	r26, r26
    1320:	bb 1f       	adc	r27, r27
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	aa 1f       	adc	r26, r26
    1328:	bb 1f       	adc	r27, r27
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	aa 1f       	adc	r26, r26
    1330:	bb 1f       	adc	r27, r27
    1332:	85 01       	movw	r16, r10
    1334:	74 01       	movw	r14, r8
    1336:	e8 1a       	sub	r14, r24
    1338:	f9 0a       	sbc	r15, r25
    133a:	0a 0b       	sbc	r16, r26
    133c:	1b 0b       	sbc	r17, r27
    133e:	d8 01       	movw	r26, r16
    1340:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1342:	c9 ef       	ldi	r28, 0xF9	; 249
    1344:	87 cf       	rjmp	.-242    	; 0x1254 <usart_set_baudrate+0x114>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	bf 90       	pop	r11
    1356:	af 90       	pop	r10
    1358:	9f 90       	pop	r9
    135a:	8f 90       	pop	r8
    135c:	7f 90       	pop	r7
    135e:	6f 90       	pop	r6
    1360:	5f 90       	pop	r5
    1362:	4f 90       	pop	r4
    1364:	3f 90       	pop	r3
    1366:	2f 90       	pop	r2
    1368:	08 95       	ret

0000136a <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	ec 01       	movw	r28, r24
    1374:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	09 f4       	brne	.+2      	; 0x137c <usart_init_rs232+0x12>
    137a:	d6 c0       	rjmp	.+428    	; 0x1528 <usart_init_rs232+0x1be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    137c:	80 3c       	cpi	r24, 0xC0	; 192
    137e:	91 05       	cpc	r25, r1
    1380:	29 f4       	brne	.+10     	; 0x138c <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1382:	60 e1       	ldi	r22, 0x10	; 16
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    138a:	ce c0       	rjmp	.+412    	; 0x1528 <usart_init_rs232+0x1be>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    138c:	c1 15       	cp	r28, r1
    138e:	84 e0       	ldi	r24, 0x04	; 4
    1390:	d8 07       	cpc	r29, r24
    1392:	29 f4       	brne	.+10     	; 0x139e <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1394:	64 e0       	ldi	r22, 0x04	; 4
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    139c:	c5 c0       	rjmp	.+394    	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    139e:	c0 38       	cpi	r28, 0x80	; 128
    13a0:	e1 e0       	ldi	r30, 0x01	; 1
    13a2:	de 07       	cpc	r29, r30
    13a4:	29 f4       	brne	.+10     	; 0x13b0 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    13a6:	62 e0       	ldi	r22, 0x02	; 2
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    13ae:	bc c0       	rjmp	.+376    	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    13b0:	c1 15       	cp	r28, r1
    13b2:	f1 e0       	ldi	r31, 0x01	; 1
    13b4:	df 07       	cpc	r29, r31
    13b6:	29 f4       	brne	.+10     	; 0x13c2 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    13c0:	b3 c0       	rjmp	.+358    	; 0x1528 <usart_init_rs232+0x1be>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    13c2:	c0 38       	cpi	r28, 0x80	; 128
    13c4:	83 e0       	ldi	r24, 0x03	; 3
    13c6:	d8 07       	cpc	r29, r24
    13c8:	29 f4       	brne	.+10     	; 0x13d4 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    13d2:	aa c0       	rjmp	.+340    	; 0x1528 <usart_init_rs232+0x1be>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    13d4:	c1 15       	cp	r28, r1
    13d6:	e2 e0       	ldi	r30, 0x02	; 2
    13d8:	de 07       	cpc	r29, r30
    13da:	29 f4       	brne	.+10     	; 0x13e6 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    13dc:	62 e0       	ldi	r22, 0x02	; 2
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    13e4:	a1 c0       	rjmp	.+322    	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    13e6:	c0 32       	cpi	r28, 0x20	; 32
    13e8:	f3 e0       	ldi	r31, 0x03	; 3
    13ea:	df 07       	cpc	r29, r31
    13ec:	29 f4       	brne	.+10     	; 0x13f8 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    13ee:	64 e0       	ldi	r22, 0x04	; 4
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    13f6:	98 c0       	rjmp	.+304    	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    13f8:	c1 15       	cp	r28, r1
    13fa:	88 e0       	ldi	r24, 0x08	; 8
    13fc:	d8 07       	cpc	r29, r24
    13fe:	29 f4       	brne	.+10     	; 0x140a <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	83 e0       	ldi	r24, 0x03	; 3
    1404:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    1408:	8f c0       	rjmp	.+286    	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    140a:	c1 15       	cp	r28, r1
    140c:	e9 e0       	ldi	r30, 0x09	; 9
    140e:	de 07       	cpc	r29, r30
    1410:	29 f4       	brne	.+10     	; 0x141c <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	84 e0       	ldi	r24, 0x04	; 4
    1416:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    141a:	86 c0       	rjmp	.+268    	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    141c:	c1 15       	cp	r28, r1
    141e:	fa e0       	ldi	r31, 0x0A	; 10
    1420:	df 07       	cpc	r29, r31
    1422:	29 f4       	brne	.+10     	; 0x142e <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	85 e0       	ldi	r24, 0x05	; 5
    1428:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    142c:	7d c0       	rjmp	.+250    	; 0x1528 <usart_init_rs232+0x1be>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    142e:	c0 34       	cpi	r28, 0x40	; 64
    1430:	88 e0       	ldi	r24, 0x08	; 8
    1432:	d8 07       	cpc	r29, r24
    1434:	29 f4       	brne	.+10     	; 0x1440 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1436:	62 e0       	ldi	r22, 0x02	; 2
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    143e:	74 c0       	rjmp	.+232    	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1440:	c0 34       	cpi	r28, 0x40	; 64
    1442:	e9 e0       	ldi	r30, 0x09	; 9
    1444:	de 07       	cpc	r29, r30
    1446:	29 f4       	brne	.+10     	; 0x1452 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1448:	62 e0       	ldi	r22, 0x02	; 2
    144a:	84 e0       	ldi	r24, 0x04	; 4
    144c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    1450:	6b c0       	rjmp	.+214    	; 0x1528 <usart_init_rs232+0x1be>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1452:	c0 39       	cpi	r28, 0x90	; 144
    1454:	f8 e0       	ldi	r31, 0x08	; 8
    1456:	df 07       	cpc	r29, r31
    1458:	29 f4       	brne	.+10     	; 0x1464 <usart_init_rs232+0xfa>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    145a:	64 e0       	ldi	r22, 0x04	; 4
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    1462:	62 c0       	rjmp	.+196    	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1464:	c0 39       	cpi	r28, 0x90	; 144
    1466:	89 e0       	ldi	r24, 0x09	; 9
    1468:	d8 07       	cpc	r29, r24
    146a:	29 f4       	brne	.+10     	; 0x1476 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    146c:	64 e0       	ldi	r22, 0x04	; 4
    146e:	84 e0       	ldi	r24, 0x04	; 4
    1470:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    1474:	59 c0       	rjmp	.+178    	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1476:	c0 39       	cpi	r28, 0x90	; 144
    1478:	ea e0       	ldi	r30, 0x0A	; 10
    147a:	de 07       	cpc	r29, r30
    147c:	29 f4       	brne	.+10     	; 0x1488 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    147e:	64 e0       	ldi	r22, 0x04	; 4
    1480:	85 e0       	ldi	r24, 0x05	; 5
    1482:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    1486:	50 c0       	rjmp	.+160    	; 0x1528 <usart_init_rs232+0x1be>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1488:	c0 3c       	cpi	r28, 0xC0	; 192
    148a:	f8 e0       	ldi	r31, 0x08	; 8
    148c:	df 07       	cpc	r29, r31
    148e:	29 f4       	brne	.+10     	; 0x149a <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1490:	68 e0       	ldi	r22, 0x08	; 8
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    1498:	47 c0       	rjmp	.+142    	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    149a:	c0 3c       	cpi	r28, 0xC0	; 192
    149c:	89 e0       	ldi	r24, 0x09	; 9
    149e:	d8 07       	cpc	r29, r24
    14a0:	29 f4       	brne	.+10     	; 0x14ac <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    14a2:	68 e0       	ldi	r22, 0x08	; 8
    14a4:	84 e0       	ldi	r24, 0x04	; 4
    14a6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    14aa:	3e c0       	rjmp	.+124    	; 0x1528 <usart_init_rs232+0x1be>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    14ac:	c0 3a       	cpi	r28, 0xA0	; 160
    14ae:	e8 e0       	ldi	r30, 0x08	; 8
    14b0:	de 07       	cpc	r29, r30
    14b2:	29 f4       	brne	.+10     	; 0x14be <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    14b4:	60 e1       	ldi	r22, 0x10	; 16
    14b6:	83 e0       	ldi	r24, 0x03	; 3
    14b8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    14bc:	35 c0       	rjmp	.+106    	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    14be:	c0 3a       	cpi	r28, 0xA0	; 160
    14c0:	f9 e0       	ldi	r31, 0x09	; 9
    14c2:	df 07       	cpc	r29, r31
    14c4:	29 f4       	brne	.+10     	; 0x14d0 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    14c6:	60 e1       	ldi	r22, 0x10	; 16
    14c8:	84 e0       	ldi	r24, 0x04	; 4
    14ca:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    14ce:	2c c0       	rjmp	.+88     	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    14d0:	c0 3a       	cpi	r28, 0xA0	; 160
    14d2:	8a e0       	ldi	r24, 0x0A	; 10
    14d4:	d8 07       	cpc	r29, r24
    14d6:	29 f4       	brne	.+10     	; 0x14e2 <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    14d8:	60 e1       	ldi	r22, 0x10	; 16
    14da:	85 e0       	ldi	r24, 0x05	; 5
    14dc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    14e0:	23 c0       	rjmp	.+70     	; 0x1528 <usart_init_rs232+0x1be>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    14e2:	c0 3b       	cpi	r28, 0xB0	; 176
    14e4:	e8 e0       	ldi	r30, 0x08	; 8
    14e6:	de 07       	cpc	r29, r30
    14e8:	29 f4       	brne	.+10     	; 0x14f4 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    14ea:	60 e2       	ldi	r22, 0x20	; 32
    14ec:	83 e0       	ldi	r24, 0x03	; 3
    14ee:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    14f2:	1a c0       	rjmp	.+52     	; 0x1528 <usart_init_rs232+0x1be>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    14f4:	c0 3b       	cpi	r28, 0xB0	; 176
    14f6:	f9 e0       	ldi	r31, 0x09	; 9
    14f8:	df 07       	cpc	r29, r31
    14fa:	29 f4       	brne	.+10     	; 0x1506 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    14fc:	60 e2       	ldi	r22, 0x20	; 32
    14fe:	84 e0       	ldi	r24, 0x04	; 4
    1500:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    1504:	11 c0       	rjmp	.+34     	; 0x1528 <usart_init_rs232+0x1be>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1506:	c0 38       	cpi	r28, 0x80	; 128
    1508:	84 e0       	ldi	r24, 0x04	; 4
    150a:	d8 07       	cpc	r29, r24
    150c:	29 f4       	brne	.+10     	; 0x1518 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    150e:	60 e4       	ldi	r22, 0x40	; 64
    1510:	83 e0       	ldi	r24, 0x03	; 3
    1512:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
    1516:	08 c0       	rjmp	.+16     	; 0x1528 <usart_init_rs232+0x1be>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1518:	c0 3a       	cpi	r28, 0xA0	; 160
    151a:	e4 e0       	ldi	r30, 0x04	; 4
    151c:	de 07       	cpc	r29, r30
    151e:	21 f4       	brne	.+8      	; 0x1528 <usart_init_rs232+0x1be>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1520:	60 e4       	ldi	r22, 0x40	; 64
    1522:	85 e0       	ldi	r24, 0x05	; 5
    1524:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	8f 73       	andi	r24, 0x3F	; 63
    152c:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    152e:	f8 01       	movw	r30, r16
    1530:	94 81       	ldd	r25, Z+4	; 0x04
    1532:	85 81       	ldd	r24, Z+5	; 0x05
    1534:	89 2b       	or	r24, r25
    1536:	96 81       	ldd	r25, Z+6	; 0x06
    1538:	91 11       	cpse	r25, r1
    153a:	98 e0       	ldi	r25, 0x08	; 8
    153c:	89 2b       	or	r24, r25
    153e:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1540:	f8 01       	movw	r30, r16
    1542:	40 81       	ld	r20, Z
    1544:	51 81       	ldd	r21, Z+1	; 0x01
    1546:	62 81       	ldd	r22, Z+2	; 0x02
    1548:	73 81       	ldd	r23, Z+3	; 0x03
    154a:	00 e0       	ldi	r16, 0x00	; 0
    154c:	18 e4       	ldi	r17, 0x48	; 72
    154e:	28 ee       	ldi	r18, 0xE8	; 232
    1550:	31 e0       	ldi	r19, 0x01	; 1
    1552:	ce 01       	movw	r24, r28
    1554:	f5 dd       	rcall	.-1046   	; 0x1140 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	98 60       	ori	r25, 0x08	; 8
    155a:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	90 61       	ori	r25, 0x10	; 16
    1560:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	08 95       	ret

0000156c <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    157a:	6b 01       	movw	r12, r22
    157c:	e1 2c       	mov	r14, r1
    157e:	f1 2c       	mov	r15, r1
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	78 e4       	ldi	r23, 0x48	; 72
    1584:	88 ee       	ldi	r24, 0xE8	; 232
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	a7 01       	movw	r20, r14
    158a:	96 01       	movw	r18, r12
    158c:	69 d2       	rcall	.+1234   	; 0x1a60 <__udivmodsi4>
    158e:	ca 01       	movw	r24, r20
    1590:	b9 01       	movw	r22, r18
    1592:	2f ef       	ldi	r18, 0xFF	; 255
    1594:	3f ef       	ldi	r19, 0xFF	; 255
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	62 d2       	rcall	.+1220   	; 0x1a60 <__udivmodsi4>
	if (smallest_div < 1) {
    159c:	21 15       	cp	r18, r1
    159e:	31 05       	cpc	r19, r1
    15a0:	29 f4       	brne	.+10     	; 0x15ac <pwm_set_frequency+0x40>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    15a6:	21 e0       	ldi	r18, 0x01	; 1
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	2d c0       	rjmp	.+90     	; 0x1606 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    15ac:	22 30       	cpi	r18, 0x02	; 2
    15ae:	31 05       	cpc	r19, r1
    15b0:	28 f4       	brcc	.+10     	; 0x15bc <pwm_set_frequency+0x50>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    15b2:	82 e0       	ldi	r24, 0x02	; 2
    15b4:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    15b6:	22 e0       	ldi	r18, 0x02	; 2
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	25 c0       	rjmp	.+74     	; 0x1606 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    15bc:	24 30       	cpi	r18, 0x04	; 4
    15be:	31 05       	cpc	r19, r1
    15c0:	28 f4       	brcc	.+10     	; 0x15cc <pwm_set_frequency+0x60>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    15c6:	24 e0       	ldi	r18, 0x04	; 4
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	1d c0       	rjmp	.+58     	; 0x1606 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    15cc:	28 30       	cpi	r18, 0x08	; 8
    15ce:	31 05       	cpc	r19, r1
    15d0:	28 f4       	brcc	.+10     	; 0x15dc <pwm_set_frequency+0x70>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    15d2:	84 e0       	ldi	r24, 0x04	; 4
    15d4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    15d6:	28 e0       	ldi	r18, 0x08	; 8
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	15 c0       	rjmp	.+42     	; 0x1606 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    15dc:	20 34       	cpi	r18, 0x40	; 64
    15de:	31 05       	cpc	r19, r1
    15e0:	28 f4       	brcc	.+10     	; 0x15ec <pwm_set_frequency+0x80>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    15e2:	85 e0       	ldi	r24, 0x05	; 5
    15e4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    15e6:	20 e4       	ldi	r18, 0x40	; 64
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	0d c0       	rjmp	.+26     	; 0x1606 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    15ec:	2f 3f       	cpi	r18, 0xFF	; 255
    15ee:	31 05       	cpc	r19, r1
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <pwm_set_frequency+0x88>
    15f2:	28 f4       	brcc	.+10     	; 0x15fe <pwm_set_frequency+0x92>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    15f4:	86 e0       	ldi	r24, 0x06	; 6
    15f6:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	31 e0       	ldi	r19, 0x01	; 1
    15fc:	04 c0       	rjmp	.+8      	; 0x1606 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    15fe:	87 e0       	ldi	r24, 0x07	; 7
    1600:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	78 e4       	ldi	r23, 0x48	; 72
    160e:	88 ee       	ldi	r24, 0xE8	; 232
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	26 d2       	rcall	.+1100   	; 0x1a60 <__udivmodsi4>
    1614:	ca 01       	movw	r24, r20
    1616:	b9 01       	movw	r22, r18
    1618:	a7 01       	movw	r20, r14
    161a:	96 01       	movw	r18, r12
    161c:	21 d2       	rcall	.+1090   	; 0x1a60 <__udivmodsi4>
    161e:	2d 83       	std	Y+5, r18	; 0x05
    1620:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    1622:	24 36       	cpi	r18, 0x64	; 100
    1624:	31 05       	cpc	r19, r1
    1626:	18 f4       	brcc	.+6      	; 0x162e <pwm_set_frequency+0xc2>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    1628:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    162a:	1d 82       	std	Y+5, r1	; 0x05
    162c:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	08 95       	ret

0000163c <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	ec 01       	movw	r28, r24
    1646:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    1648:	62 30       	cpi	r22, 0x02	; 2
    164a:	91 f1       	breq	.+100    	; 0x16b0 <pwm_init+0x74>
    164c:	28 f4       	brcc	.+10     	; 0x1658 <pwm_init+0x1c>
    164e:	66 23       	and	r22, r22
    1650:	49 f0       	breq	.+18     	; 0x1664 <pwm_init+0x28>
    1652:	61 30       	cpi	r22, 0x01	; 1
    1654:	d1 f0       	breq	.+52     	; 0x168a <pwm_init+0x4e>
    1656:	64 c0       	rjmp	.+200    	; 0x1720 <pwm_init+0xe4>
    1658:	63 30       	cpi	r22, 0x03	; 3
    165a:	e9 f1       	breq	.+122    	; 0x16d6 <pwm_init+0x9a>
    165c:	64 30       	cpi	r22, 0x04	; 4
    165e:	09 f4       	brne	.+2      	; 0x1662 <pwm_init+0x26>
    1660:	4d c0       	rjmp	.+154    	; 0x16fc <pwm_init+0xc0>
    1662:	5e c0       	rjmp	.+188    	; 0x1720 <pwm_init+0xe4>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	98 e0       	ldi	r25, 0x08	; 8
    1668:	88 83       	st	Y, r24
    166a:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    166c:	e0 e4       	ldi	r30, 0x40	; 64
    166e:	f6 e0       	ldi	r31, 0x06	; 6
    1670:	30 81       	ld	r19, Z
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	2f ef       	ldi	r18, 0xFF	; 255
    1678:	24 0f       	add	r18, r20
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <pwm_init+0x44>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	2a 95       	dec	r18
    1682:	e2 f7       	brpl	.-8      	; 0x167c <pwm_init+0x40>
    1684:	83 2b       	or	r24, r19
    1686:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1688:	4b c0       	rjmp	.+150    	; 0x1720 <pwm_init+0xe4>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    168a:	80 e4       	ldi	r24, 0x40	; 64
    168c:	98 e0       	ldi	r25, 0x08	; 8
    168e:	88 83       	st	Y, r24
    1690:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    1692:	e0 e4       	ldi	r30, 0x40	; 64
    1694:	f6 e0       	ldi	r31, 0x06	; 6
    1696:	30 81       	ld	r19, Z
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	23 e0       	ldi	r18, 0x03	; 3
    169e:	24 0f       	add	r18, r20
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <pwm_init+0x6a>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	2a 95       	dec	r18
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <pwm_init+0x66>
    16aa:	83 2b       	or	r24, r19
    16ac:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    16ae:	38 c0       	rjmp	.+112    	; 0x1720 <pwm_init+0xe4>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	99 e0       	ldi	r25, 0x09	; 9
    16b4:	88 83       	st	Y, r24
    16b6:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    16b8:	e0 e6       	ldi	r30, 0x60	; 96
    16ba:	f6 e0       	ldi	r31, 0x06	; 6
    16bc:	30 81       	ld	r19, Z
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	2f ef       	ldi	r18, 0xFF	; 255
    16c4:	24 0f       	add	r18, r20
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <pwm_init+0x90>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	2a 95       	dec	r18
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <pwm_init+0x8c>
    16d0:	83 2b       	or	r24, r19
    16d2:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    16d4:	25 c0       	rjmp	.+74     	; 0x1720 <pwm_init+0xe4>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    16d6:	80 e4       	ldi	r24, 0x40	; 64
    16d8:	99 e0       	ldi	r25, 0x09	; 9
    16da:	88 83       	st	Y, r24
    16dc:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    16de:	e0 e6       	ldi	r30, 0x60	; 96
    16e0:	f6 e0       	ldi	r31, 0x06	; 6
    16e2:	30 81       	ld	r19, Z
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	23 e0       	ldi	r18, 0x03	; 3
    16ea:	24 0f       	add	r18, r20
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <pwm_init+0xb6>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	2a 95       	dec	r18
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <pwm_init+0xb2>
    16f6:	83 2b       	or	r24, r19
    16f8:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    16fa:	12 c0       	rjmp	.+36     	; 0x1720 <pwm_init+0xe4>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	9a e0       	ldi	r25, 0x0A	; 10
    1700:	88 83       	st	Y, r24
    1702:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    1704:	e0 e8       	ldi	r30, 0x80	; 128
    1706:	f6 e0       	ldi	r31, 0x06	; 6
    1708:	30 81       	ld	r19, Z
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	2f ef       	ldi	r18, 0xFF	; 255
    1710:	24 0f       	add	r18, r20
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <pwm_init+0xdc>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	2a 95       	dec	r18
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <pwm_init+0xd8>
    171c:	83 2b       	or	r24, r19
    171e:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    1720:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    1722:	42 30       	cpi	r20, 0x02	; 2
    1724:	61 f0       	breq	.+24     	; 0x173e <pwm_init+0x102>
    1726:	18 f4       	brcc	.+6      	; 0x172e <pwm_init+0xf2>
    1728:	41 30       	cpi	r20, 0x01	; 1
    172a:	31 f0       	breq	.+12     	; 0x1738 <pwm_init+0xfc>
    172c:	10 c0       	rjmp	.+32     	; 0x174e <pwm_init+0x112>
    172e:	43 30       	cpi	r20, 0x03	; 3
    1730:	49 f0       	breq	.+18     	; 0x1744 <pwm_init+0x108>
    1732:	44 30       	cpi	r20, 0x04	; 4
    1734:	51 f0       	breq	.+20     	; 0x174a <pwm_init+0x10e>
    1736:	0b c0       	rjmp	.+22     	; 0x174e <pwm_init+0x112>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    1738:	80 e1       	ldi	r24, 0x10	; 16
    173a:	8b 83       	std	Y+3, r24	; 0x03
		break;
    173c:	08 c0       	rjmp	.+16     	; 0x174e <pwm_init+0x112>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    173e:	80 e2       	ldi	r24, 0x20	; 32
    1740:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1742:	05 c0       	rjmp	.+10     	; 0x174e <pwm_init+0x112>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    1744:	80 e4       	ldi	r24, 0x40	; 64
    1746:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1748:	02 c0       	rjmp	.+4      	; 0x174e <pwm_init+0x112>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    174a:	80 e8       	ldi	r24, 0x80	; 128
    174c:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    174e:	88 81       	ld	r24, Y
    1750:	99 81       	ldd	r25, Y+1	; 0x01
    1752:	a8 dc       	rcall	.-1712   	; 0x10a4 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    1754:	e8 81       	ld	r30, Y
    1756:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1758:	81 81       	ldd	r24, Z+1	; 0x01
    175a:	88 7f       	andi	r24, 0xF8	; 248
    175c:	83 60       	ori	r24, 0x03	; 3
    175e:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    1760:	1d 82       	std	Y+5, r1	; 0x05
    1762:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    1764:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    1766:	e8 81       	ld	r30, Y
    1768:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    176a:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    176c:	80 7f       	andi	r24, 0xF0	; 240
    176e:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    1770:	b8 01       	movw	r22, r16
    1772:	ce 01       	movw	r24, r28
    1774:	fb de       	rcall	.-522    	; 0x156c <pwm_set_frequency>
}
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	08 95       	ret

00001780 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	ec 01       	movw	r28, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    1786:	ad 81       	ldd	r26, Y+5	; 0x05
    1788:	be 81       	ldd	r27, Y+6	; 0x06
    178a:	26 2f       	mov	r18, r22
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	90 d1       	rcall	.+800    	; 0x1ab0 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    1790:	24 e6       	ldi	r18, 0x64	; 100
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	63 d1       	rcall	.+710    	; 0x1a60 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	e8 81       	ld	r30, Y
    179e:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    17a0:	e6 fd       	sbrc	r30, 6
    17a2:	17 c0       	rjmp	.+46     	; 0x17d2 <pwm_start+0x52>
		switch (channel_index) {
    17a4:	82 30       	cpi	r24, 0x02	; 2
    17a6:	61 f0       	breq	.+24     	; 0x17c0 <pwm_start+0x40>
    17a8:	18 f4       	brcc	.+6      	; 0x17b0 <pwm_start+0x30>
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	31 f0       	breq	.+12     	; 0x17ba <pwm_start+0x3a>
    17ae:	1b c0       	rjmp	.+54     	; 0x17e6 <pwm_start+0x66>
    17b0:	83 30       	cpi	r24, 0x03	; 3
    17b2:	49 f0       	breq	.+18     	; 0x17c6 <pwm_start+0x46>
    17b4:	84 30       	cpi	r24, 0x04	; 4
    17b6:	51 f0       	breq	.+20     	; 0x17cc <pwm_start+0x4c>
    17b8:	16 c0       	rjmp	.+44     	; 0x17e6 <pwm_start+0x66>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    17ba:	20 af       	std	Z+56, r18	; 0x38
    17bc:	31 af       	std	Z+57, r19	; 0x39
    17be:	13 c0       	rjmp	.+38     	; 0x17e6 <pwm_start+0x66>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    17c0:	22 af       	std	Z+58, r18	; 0x3a
    17c2:	33 af       	std	Z+59, r19	; 0x3b
    17c4:	10 c0       	rjmp	.+32     	; 0x17e6 <pwm_start+0x66>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    17c6:	24 af       	std	Z+60, r18	; 0x3c
    17c8:	35 af       	std	Z+61, r19	; 0x3d
    17ca:	0d c0       	rjmp	.+26     	; 0x17e6 <pwm_start+0x66>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    17cc:	26 af       	std	Z+62, r18	; 0x3e
    17ce:	37 af       	std	Z+63, r19	; 0x3f
    17d0:	0a c0       	rjmp	.+20     	; 0x17e6 <pwm_start+0x66>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	19 f0       	breq	.+6      	; 0x17dc <pwm_start+0x5c>
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	21 f0       	breq	.+8      	; 0x17e2 <pwm_start+0x62>
    17da:	05 c0       	rjmp	.+10     	; 0x17e6 <pwm_start+0x66>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    17dc:	20 af       	std	Z+56, r18	; 0x38
    17de:	31 af       	std	Z+57, r19	; 0x39
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <pwm_start+0x66>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    17e2:	22 af       	std	Z+58, r18	; 0x3a
    17e4:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	e8 81       	ld	r30, Y
    17ec:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    17ee:	86 a3       	std	Z+38, r24	; 0x26
    17f0:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	e8 81       	ld	r30, Y
    17f6:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    17f8:	e6 fd       	sbrc	r30, 6
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <pwm_start+0x84>
		((TC0_t *)tc)->CTRLB |= enablemask;
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	89 2b       	or	r24, r25
    1800:	81 83       	std	Z+1, r24	; 0x01
    1802:	04 c0       	rjmp	.+8      	; 0x180c <pwm_start+0x8c>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    1804:	91 81       	ldd	r25, Z+1	; 0x01
    1806:	80 73       	andi	r24, 0x30	; 48
    1808:	89 2b       	or	r24, r25
    180a:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    180c:	e8 81       	ld	r30, Y
    180e:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1810:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1812:	80 7f       	andi	r24, 0xF0	; 240
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	89 2b       	or	r24, r25
    1818:	80 83       	st	Z, r24
}
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	08 95       	ret

00001820 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    1826:	86 dc       	rcall	.-1780   	; 0x1134 <usart_getchar>
    1828:	88 83       	st	Y, r24
}
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	08 95       	ret

00001830 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1830:	79 cc       	rjmp	.-1806   	; 0x1124 <usart_putchar>
}
    1832:	08 95       	ret

00001834 <__vector_88>:
	qdec_config_revolution(&config, 20);
	qdec_config_enable_freq(&config, 1);
	qdec_enabled(&config);
}
ISR(USART_RX_Vect)
{
    1834:	1f 92       	push	r1
    1836:	0f 92       	push	r0
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	0f 92       	push	r0
    183c:	11 24       	eor	r1, r1
    183e:	2f 93       	push	r18
    1840:	3f 93       	push	r19
    1842:	4f 93       	push	r20
    1844:	5f 93       	push	r21
    1846:	6f 93       	push	r22
    1848:	7f 93       	push	r23
    184a:	8f 93       	push	r24
    184c:	9f 93       	push	r25
    184e:	af 93       	push	r26
    1850:	bf 93       	push	r27
    1852:	ef 93       	push	r30
    1854:	ff 93       	push	r31
	usart_putchar(CONF_TEST_USART,usart_getchar(CONF_TEST_USART));
    1856:	80 ea       	ldi	r24, 0xA0	; 160
    1858:	99 e0       	ldi	r25, 0x09	; 9
    185a:	6c dc       	rcall	.-1832   	; 0x1134 <usart_getchar>
    185c:	68 2f       	mov	r22, r24
    185e:	80 ea       	ldi	r24, 0xA0	; 160
    1860:	99 e0       	ldi	r25, 0x09	; 9
    1862:	60 dc       	rcall	.-1856   	; 0x1124 <usart_putchar>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1864:	e0 ea       	ldi	r30, 0xA0	; 160
    1866:	f9 e0       	ldi	r31, 0x09	; 9
    1868:	81 81       	ldd	r24, Z+1	; 0x01
	while (!usart_tx_is_complete(CONF_TEST_USART)) {
    186a:	86 ff       	sbrs	r24, 6
    186c:	fd cf       	rjmp	.-6      	; 0x1868 <__vector_88+0x34>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    186e:	80 e4       	ldi	r24, 0x40	; 64
    1870:	80 93 a1 09 	sts	0x09A1, r24
	}
	usart_clear_tx_complete(CONF_TEST_USART);
}
    1874:	ff 91       	pop	r31
    1876:	ef 91       	pop	r30
    1878:	bf 91       	pop	r27
    187a:	af 91       	pop	r26
    187c:	9f 91       	pop	r25
    187e:	8f 91       	pop	r24
    1880:	7f 91       	pop	r23
    1882:	6f 91       	pop	r22
    1884:	5f 91       	pop	r21
    1886:	4f 91       	pop	r20
    1888:	3f 91       	pop	r19
    188a:	2f 91       	pop	r18
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	0f 90       	pop	r0
    1892:	1f 90       	pop	r1
    1894:	18 95       	reti

00001896 <main>:
	pmic_init();
	pwm_init(&pwm_cfg, PWM_TCD0, PWM_CH_A, 100); //Initialize config
	pwm_start(&pwm_cfg, 50); // va de 0 a 100 indica el porcentaje
}
int main (void)
{
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	27 97       	sbiw	r28, 0x07	; 7
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	de bf       	out	0x3e, r29	; 62
	/* Insert system clock initialization code here (sysclk_init()). */

	
	board_init();
    18a4:	0e 94 23 01 	call	0x246	; 0x246 <board_init>
	sysclk_init();
    18a8:	0e 94 2e 01 	call	0x25c	; 0x25c <sysclk_init>
{
 //* QDec configuration
 //*   - PA5 - QDPH0
 //*   - PA6 - QDPH90
 //*   - PA7 - QDINDX
	qdec_get_config_defaults(&config);   //TIMER C0 Y Y F C1
    18ac:	8a ea       	ldi	r24, 0xAA	; 170
    18ae:	90 e2       	ldi	r25, 0x20	; 32
    18b0:	0e 94 b0 01 	call	0x360	; 0x360 <qdec_get_config_defaults>
	qdec_config_phase_pins(&config, &PORTA, 5, false, 500);
    18b4:	04 ef       	ldi	r16, 0xF4	; 244
    18b6:	11 e0       	ldi	r17, 0x01	; 1
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	45 e0       	ldi	r20, 0x05	; 5
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	76 e0       	ldi	r23, 0x06	; 6
    18c0:	8a ea       	ldi	r24, 0xAA	; 170
    18c2:	90 e2       	ldi	r25, 0x20	; 32
    18c4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <qdec_config_phase_pins>
	qdec_config_revolution(&config, 20);
    18c8:	64 e1       	ldi	r22, 0x14	; 20
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	8a ea       	ldi	r24, 0xAA	; 170
    18ce:	90 e2       	ldi	r25, 0x20	; 32
    18d0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <qdec_config_revolution>
	qdec_config_enable_freq(&config, 1);
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	8a ea       	ldi	r24, 0xAA	; 170
    18de:	90 e2       	ldi	r25, 0x20	; 32
    18e0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <qdec_config_enable_freq>
	qdec_enabled(&config);
    18e4:	8a ea       	ldi	r24, 0xAA	; 170
    18e6:	90 e2       	ldi	r25, 0x20	; 32
    18e8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <qdec_enabled>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    18ec:	0f 2e       	mov	r0, r31
    18ee:	f0 ea       	ldi	r31, 0xA0	; 160
    18f0:	ef 2e       	mov	r14, r31
    18f2:	f1 2c       	mov	r15, r1
    18f4:	f0 2d       	mov	r31, r0
    18f6:	0f 2e       	mov	r0, r31
    18f8:	f7 e0       	ldi	r31, 0x07	; 7
    18fa:	df 2e       	mov	r13, r31
    18fc:	f0 2d       	mov	r31, r0
    18fe:	f7 01       	movw	r30, r14
    1900:	d2 82       	std	Z+2, r13	; 0x02
///////////////////////////////////////////////////
//PWM FRENO
static void conf_PWM(void)
{
	pmic_init();
	pwm_init(&pwm_cfg, PWM_TCD0, PWM_CH_A, 100); //Initialize config
    1902:	24 e6       	ldi	r18, 0x64	; 100
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	62 e0       	ldi	r22, 0x02	; 2
    190a:	83 ea       	ldi	r24, 0xA3	; 163
    190c:	90 e2       	ldi	r25, 0x20	; 32
    190e:	96 de       	rcall	.-724    	; 0x163c <pwm_init>
	pwm_start(&pwm_cfg, 50); // va de 0 a 100 indica el porcentaje
    1910:	62 e3       	ldi	r22, 0x32	; 50
    1912:	83 ea       	ldi	r24, 0xA3	; 163
    1914:	90 e2       	ldi	r25, 0x20	; 32
    1916:	34 df       	rcall	.-408    	; 0x1780 <pwm_start>
		.charlength = CONF_TEST_CHARLENGTH,
		.paritytype = CONF_TEST_PARITY,
		.stopbits   = CONF_TEST_STOPBITS,
	};
	
	sysclk_enable_module(SYSCLK_PORT_D, PR_USART0_bm);
    1918:	60 e1       	ldi	r22, 0x10	; 16
    191a:	84 e0       	ldi	r24, 0x04	; 4
    191c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1920:	00 ea       	ldi	r16, 0xA0	; 160
    1922:	19 e0       	ldi	r17, 0x09	; 9
    1924:	00 93 9e 20 	sts	0x209E, r16
    1928:	10 93 9f 20 	sts	0x209F, r17
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    192c:	88 e1       	ldi	r24, 0x18	; 24
    192e:	9c e0       	ldi	r25, 0x0C	; 12
    1930:	80 93 9c 20 	sts	0x209C, r24
    1934:	90 93 9d 20 	sts	0x209D, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1938:	80 e1       	ldi	r24, 0x10	; 16
    193a:	9c e0       	ldi	r25, 0x0C	; 12
    193c:	80 93 9a 20 	sts	0x209A, r24
    1940:	90 93 9b 20 	sts	0x209B, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1944:	83 e0       	ldi	r24, 0x03	; 3
    1946:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1948:	1e 82       	std	Y+6, r1	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    194a:	1f 82       	std	Y+7, r1	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    194c:	80 e8       	ldi	r24, 0x80	; 128
    194e:	95 e2       	ldi	r25, 0x25	; 37
    1950:	a0 e0       	ldi	r26, 0x00	; 0
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	ab 83       	std	Y+3, r26	; 0x03
    195a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    195c:	60 e1       	ldi	r22, 0x10	; 16
    195e:	84 e0       	ldi	r24, 0x04	; 4
    1960:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1964:	be 01       	movw	r22, r28
    1966:	6f 5f       	subi	r22, 0xFF	; 255
    1968:	7f 4f       	sbci	r23, 0xFF	; 255
    196a:	80 ea       	ldi	r24, 0xA0	; 160
    196c:	99 e0       	ldi	r25, 0x09	; 9
    196e:	fd dc       	rcall	.-1542   	; 0x136a <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1970:	6f e5       	ldi	r22, 0x5F	; 95
    1972:	71 e0       	ldi	r23, 0x01	; 1
    1974:	88 e7       	ldi	r24, 0x78	; 120
    1976:	91 e0       	ldi	r25, 0x01	; 1
    1978:	2a d1       	rcall	.+596    	; 0x1bce <fdevopen>
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
    197a:	f8 01       	movw	r30, r16
    197c:	83 81       	ldd	r24, Z+3	; 0x03
    197e:	8f 7c       	andi	r24, 0xCF	; 207
    1980:	80 61       	ori	r24, 0x10	; 16
    1982:	83 83       	std	Z+3, r24	; 0x03
	board_init();
	sysclk_init();
	qdec_init();
	conf_PWM();
	conf_serial();
	irq_initialize_vectors();
    1984:	f7 01       	movw	r30, r14
    1986:	d2 82       	std	Z+2, r13	; 0x02
	sei();
    1988:	78 94       	sei
	
	
	printf("\x0C\n\r-- QDec Example --\n\r");
    198a:	86 e0       	ldi	r24, 0x06	; 6
    198c:	90 e2       	ldi	r25, 0x20	; 32
    198e:	9f 93       	push	r25
    1990:	8f 93       	push	r24
    1992:	67 d1       	rcall	.+718    	; 0x1c62 <printf>
	printf("-- Compiled: %s %s --\n\r\n\r", __DATE__, __TIME__);
    1994:	8e e1       	ldi	r24, 0x1E	; 30
    1996:	90 e2       	ldi	r25, 0x20	; 32
    1998:	9f 93       	push	r25
    199a:	8f 93       	push	r24
    199c:	87 e2       	ldi	r24, 0x27	; 39
    199e:	90 e2       	ldi	r25, 0x20	; 32
    19a0:	9f 93       	push	r25
    19a2:	8f 93       	push	r24
    19a4:	83 e3       	ldi	r24, 0x33	; 51
    19a6:	90 e2       	ldi	r25, 0x20	; 32
    19a8:	9f 93       	push	r25
    19aa:	8f 93       	push	r24
    19ac:	5a d1       	rcall	.+692    	; 0x1c62 <printf>
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	de bf       	out	0x3e, r29	; 62
		
		if (qdec_position_prev != qdec_position)
		 {
			/* New position then display it */
			qdec_position_prev = qdec_position;
			printf("%02u", qdec_position);
    19b2:	0f 2e       	mov	r0, r31
    19b4:	fd e4       	ldi	r31, 0x4D	; 77
    19b6:	ef 2e       	mov	r14, r31
    19b8:	f0 e2       	ldi	r31, 0x20	; 32
    19ba:	ff 2e       	mov	r15, r31
    19bc:	f0 2d       	mov	r31, r0
			 {
				printf(" ++");
			 }
		     else
			  {
				printf(" --");
    19be:	0f 2e       	mov	r0, r31
    19c0:	f6 e5       	ldi	r31, 0x56	; 86
    19c2:	af 2e       	mov	r10, r31
    19c4:	f0 e2       	ldi	r31, 0x20	; 32
    19c6:	bf 2e       	mov	r11, r31
    19c8:	f0 2d       	mov	r31, r0
			qdec_position_prev = qdec_position;
			printf("%02u", qdec_position);
			/* display direction */
			if (qdec_dir)
			 {
				printf(" ++");
    19ca:	0f 2e       	mov	r0, r31
    19cc:	f2 e5       	ldi	r31, 0x52	; 82
    19ce:	cf 2e       	mov	r12, r31
    19d0:	f0 e2       	ldi	r31, 0x20	; 32
    19d2:	df 2e       	mov	r13, r31
    19d4:	f0 2d       	mov	r31, r0
			  {
				printf(" --");
		      }

			/* Display frequency */
			printf(" %5umHz\r\n", qdec_get_frequency(&config));		
    19d6:	0a e5       	ldi	r16, 0x5A	; 90
    19d8:	10 e2       	ldi	r17, 0x20	; 32
	
	printf("\x0C\n\r-- QDec Example --\n\r");
	printf("-- Compiled: %s %s --\n\r\n\r", __DATE__, __TIME__);
	while (1)
	{
		qdec_position = qdec_get_position(&config);
    19da:	8a ea       	ldi	r24, 0xAA	; 170
    19dc:	90 e2       	ldi	r25, 0x20	; 32
    19de:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <qdec_get_position>
    19e2:	80 93 a0 20 	sts	0x20A0, r24
    19e6:	90 93 a1 20 	sts	0x20A1, r25
		qdec_dir = qdec_get_direction(&config);
    19ea:	8a ea       	ldi	r24, 0xAA	; 170
    19ec:	90 e2       	ldi	r25, 0x20	; 32
    19ee:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <qdec_get_direction>
    19f2:	80 93 a2 20 	sts	0x20A2, r24
		
		if (qdec_position_prev != qdec_position)
    19f6:	80 91 a0 20 	lds	r24, 0x20A0
    19fa:	90 91 a1 20 	lds	r25, 0x20A1
    19fe:	20 91 98 20 	lds	r18, 0x2098
    1a02:	30 91 99 20 	lds	r19, 0x2099
    1a06:	28 17       	cp	r18, r24
    1a08:	39 07       	cpc	r19, r25
    1a0a:	39 f3       	breq	.-50     	; 0x19da <main+0x144>
		 {
			/* New position then display it */
			qdec_position_prev = qdec_position;
    1a0c:	80 93 98 20 	sts	0x2098, r24
    1a10:	90 93 99 20 	sts	0x2099, r25
			printf("%02u", qdec_position);
    1a14:	9f 93       	push	r25
    1a16:	8f 93       	push	r24
    1a18:	ff 92       	push	r15
    1a1a:	ef 92       	push	r14
    1a1c:	22 d1       	rcall	.+580    	; 0x1c62 <printf>
			/* display direction */
			if (qdec_dir)
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	80 91 a2 20 	lds	r24, 0x20A2
    1a2a:	88 23       	and	r24, r24
    1a2c:	31 f0       	breq	.+12     	; 0x1a3a <main+0x1a4>
			 {
				printf(" ++");
    1a2e:	df 92       	push	r13
    1a30:	cf 92       	push	r12
    1a32:	17 d1       	rcall	.+558    	; 0x1c62 <printf>
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	05 c0       	rjmp	.+10     	; 0x1a44 <main+0x1ae>
			 }
		     else
			  {
				printf(" --");
    1a3a:	bf 92       	push	r11
    1a3c:	af 92       	push	r10
    1a3e:	11 d1       	rcall	.+546    	; 0x1c62 <printf>
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
		      }

			/* Display frequency */
			printf(" %5umHz\r\n", qdec_get_frequency(&config));		
    1a44:	8a ea       	ldi	r24, 0xAA	; 170
    1a46:	90 e2       	ldi	r25, 0x20	; 32
    1a48:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <qdec_get_frequency>
    1a4c:	9f 93       	push	r25
    1a4e:	8f 93       	push	r24
    1a50:	1f 93       	push	r17
    1a52:	0f 93       	push	r16
    1a54:	06 d1       	rcall	.+524    	; 0x1c62 <printf>
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	bd cf       	rjmp	.-134    	; 0x19da <main+0x144>

00001a60 <__udivmodsi4>:
    1a60:	a1 e2       	ldi	r26, 0x21	; 33
    1a62:	1a 2e       	mov	r1, r26
    1a64:	aa 1b       	sub	r26, r26
    1a66:	bb 1b       	sub	r27, r27
    1a68:	fd 01       	movw	r30, r26
    1a6a:	0d c0       	rjmp	.+26     	; 0x1a86 <__udivmodsi4_ep>

00001a6c <__udivmodsi4_loop>:
    1a6c:	aa 1f       	adc	r26, r26
    1a6e:	bb 1f       	adc	r27, r27
    1a70:	ee 1f       	adc	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	a2 17       	cp	r26, r18
    1a76:	b3 07       	cpc	r27, r19
    1a78:	e4 07       	cpc	r30, r20
    1a7a:	f5 07       	cpc	r31, r21
    1a7c:	20 f0       	brcs	.+8      	; 0x1a86 <__udivmodsi4_ep>
    1a7e:	a2 1b       	sub	r26, r18
    1a80:	b3 0b       	sbc	r27, r19
    1a82:	e4 0b       	sbc	r30, r20
    1a84:	f5 0b       	sbc	r31, r21

00001a86 <__udivmodsi4_ep>:
    1a86:	66 1f       	adc	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	1a 94       	dec	r1
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <__udivmodsi4_loop>
    1a92:	60 95       	com	r22
    1a94:	70 95       	com	r23
    1a96:	80 95       	com	r24
    1a98:	90 95       	com	r25
    1a9a:	9b 01       	movw	r18, r22
    1a9c:	ac 01       	movw	r20, r24
    1a9e:	bd 01       	movw	r22, r26
    1aa0:	cf 01       	movw	r24, r30
    1aa2:	08 95       	ret

00001aa4 <__tablejump2__>:
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	05 90       	lpm	r0, Z+
    1aaa:	f4 91       	lpm	r31, Z
    1aac:	e0 2d       	mov	r30, r0
    1aae:	09 94       	ijmp

00001ab0 <__umulhisi3>:
    1ab0:	a2 9f       	mul	r26, r18
    1ab2:	b0 01       	movw	r22, r0
    1ab4:	b3 9f       	mul	r27, r19
    1ab6:	c0 01       	movw	r24, r0
    1ab8:	a3 9f       	mul	r26, r19
    1aba:	70 0d       	add	r23, r0
    1abc:	81 1d       	adc	r24, r1
    1abe:	11 24       	eor	r1, r1
    1ac0:	91 1d       	adc	r25, r1
    1ac2:	b2 9f       	mul	r27, r18
    1ac4:	70 0d       	add	r23, r0
    1ac6:	81 1d       	adc	r24, r1
    1ac8:	11 24       	eor	r1, r1
    1aca:	91 1d       	adc	r25, r1
    1acc:	08 95       	ret

00001ace <__umoddi3>:
    1ace:	68 94       	set
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <__udivdi3_umoddi3>

00001ad2 <__udivdi3>:
    1ad2:	e8 94       	clt

00001ad4 <__udivdi3_umoddi3>:
    1ad4:	8f 92       	push	r8
    1ad6:	9f 92       	push	r9
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	05 d0       	rcall	.+10     	; 0x1ae8 <__udivmod64>
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	9f 90       	pop	r9
    1ae4:	8f 90       	pop	r8
    1ae6:	08 95       	ret

00001ae8 <__udivmod64>:
    1ae8:	88 24       	eor	r8, r8
    1aea:	99 24       	eor	r9, r9
    1aec:	f4 01       	movw	r30, r8
    1aee:	e4 01       	movw	r28, r8
    1af0:	b0 e4       	ldi	r27, 0x40	; 64
    1af2:	9f 93       	push	r25
    1af4:	aa 27       	eor	r26, r26
    1af6:	9a 15       	cp	r25, r10
    1af8:	8b 04       	cpc	r8, r11
    1afa:	9c 04       	cpc	r9, r12
    1afc:	ed 05       	cpc	r30, r13
    1afe:	fe 05       	cpc	r31, r14
    1b00:	cf 05       	cpc	r28, r15
    1b02:	d0 07       	cpc	r29, r16
    1b04:	a1 07       	cpc	r26, r17
    1b06:	98 f4       	brcc	.+38     	; 0x1b2e <__udivmod64+0x46>
    1b08:	ad 2f       	mov	r26, r29
    1b0a:	dc 2f       	mov	r29, r28
    1b0c:	cf 2f       	mov	r28, r31
    1b0e:	fe 2f       	mov	r31, r30
    1b10:	e9 2d       	mov	r30, r9
    1b12:	98 2c       	mov	r9, r8
    1b14:	89 2e       	mov	r8, r25
    1b16:	98 2f       	mov	r25, r24
    1b18:	87 2f       	mov	r24, r23
    1b1a:	76 2f       	mov	r23, r22
    1b1c:	65 2f       	mov	r22, r21
    1b1e:	54 2f       	mov	r21, r20
    1b20:	43 2f       	mov	r20, r19
    1b22:	32 2f       	mov	r19, r18
    1b24:	22 27       	eor	r18, r18
    1b26:	b8 50       	subi	r27, 0x08	; 8
    1b28:	31 f7       	brne	.-52     	; 0x1af6 <__udivmod64+0xe>
    1b2a:	bf 91       	pop	r27
    1b2c:	27 c0       	rjmp	.+78     	; 0x1b7c <__udivmod64+0x94>
    1b2e:	1b 2e       	mov	r1, r27
    1b30:	bf 91       	pop	r27
    1b32:	bb 27       	eor	r27, r27
    1b34:	22 0f       	add	r18, r18
    1b36:	33 1f       	adc	r19, r19
    1b38:	44 1f       	adc	r20, r20
    1b3a:	55 1f       	adc	r21, r21
    1b3c:	66 1f       	adc	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	88 1f       	adc	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	88 1c       	adc	r8, r8
    1b46:	99 1c       	adc	r9, r9
    1b48:	ee 1f       	adc	r30, r30
    1b4a:	ff 1f       	adc	r31, r31
    1b4c:	cc 1f       	adc	r28, r28
    1b4e:	dd 1f       	adc	r29, r29
    1b50:	aa 1f       	adc	r26, r26
    1b52:	bb 1f       	adc	r27, r27
    1b54:	8a 14       	cp	r8, r10
    1b56:	9b 04       	cpc	r9, r11
    1b58:	ec 05       	cpc	r30, r12
    1b5a:	fd 05       	cpc	r31, r13
    1b5c:	ce 05       	cpc	r28, r14
    1b5e:	df 05       	cpc	r29, r15
    1b60:	a0 07       	cpc	r26, r16
    1b62:	b1 07       	cpc	r27, r17
    1b64:	48 f0       	brcs	.+18     	; 0x1b78 <__udivmod64+0x90>
    1b66:	8a 18       	sub	r8, r10
    1b68:	9b 08       	sbc	r9, r11
    1b6a:	ec 09       	sbc	r30, r12
    1b6c:	fd 09       	sbc	r31, r13
    1b6e:	ce 09       	sbc	r28, r14
    1b70:	df 09       	sbc	r29, r15
    1b72:	a0 0b       	sbc	r26, r16
    1b74:	b1 0b       	sbc	r27, r17
    1b76:	21 60       	ori	r18, 0x01	; 1
    1b78:	1a 94       	dec	r1
    1b7a:	e1 f6       	brne	.-72     	; 0x1b34 <__udivmod64+0x4c>
    1b7c:	2e f4       	brtc	.+10     	; 0x1b88 <__udivmod64+0xa0>
    1b7e:	94 01       	movw	r18, r8
    1b80:	af 01       	movw	r20, r30
    1b82:	be 01       	movw	r22, r28
    1b84:	cd 01       	movw	r24, r26
    1b86:	00 0c       	add	r0, r0
    1b88:	08 95       	ret

00001b8a <__ashldi3>:
    1b8a:	0f 93       	push	r16
    1b8c:	08 30       	cpi	r16, 0x08	; 8
    1b8e:	90 f0       	brcs	.+36     	; 0x1bb4 <__ashldi3+0x2a>
    1b90:	98 2f       	mov	r25, r24
    1b92:	87 2f       	mov	r24, r23
    1b94:	76 2f       	mov	r23, r22
    1b96:	65 2f       	mov	r22, r21
    1b98:	54 2f       	mov	r21, r20
    1b9a:	43 2f       	mov	r20, r19
    1b9c:	32 2f       	mov	r19, r18
    1b9e:	22 27       	eor	r18, r18
    1ba0:	08 50       	subi	r16, 0x08	; 8
    1ba2:	f4 cf       	rjmp	.-24     	; 0x1b8c <__ashldi3+0x2>
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	44 1f       	adc	r20, r20
    1baa:	55 1f       	adc	r21, r21
    1bac:	66 1f       	adc	r22, r22
    1bae:	77 1f       	adc	r23, r23
    1bb0:	88 1f       	adc	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	0a 95       	dec	r16
    1bb6:	b2 f7       	brpl	.-20     	; 0x1ba4 <__ashldi3+0x1a>
    1bb8:	0f 91       	pop	r16
    1bba:	08 95       	ret

00001bbc <__subdi3>:
    1bbc:	2a 19       	sub	r18, r10
    1bbe:	3b 09       	sbc	r19, r11
    1bc0:	4c 09       	sbc	r20, r12
    1bc2:	5d 09       	sbc	r21, r13
    1bc4:	6e 09       	sbc	r22, r14
    1bc6:	7f 09       	sbc	r23, r15
    1bc8:	80 0b       	sbc	r24, r16
    1bca:	91 0b       	sbc	r25, r17
    1bcc:	08 95       	ret

00001bce <fdevopen>:
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	31 f4       	brne	.+12     	; 0x1be6 <fdevopen+0x18>
    1bda:	61 15       	cp	r22, r1
    1bdc:	71 05       	cpc	r23, r1
    1bde:	19 f4       	brne	.+6      	; 0x1be6 <fdevopen+0x18>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	39 c0       	rjmp	.+114    	; 0x1c58 <fdevopen+0x8a>
    1be6:	8b 01       	movw	r16, r22
    1be8:	ec 01       	movw	r28, r24
    1bea:	6e e0       	ldi	r22, 0x0E	; 14
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0d d2       	rcall	.+1050   	; 0x200e <calloc>
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	89 2b       	or	r24, r25
    1bf8:	99 f3       	breq	.-26     	; 0x1be0 <fdevopen+0x12>
    1bfa:	80 e8       	ldi	r24, 0x80	; 128
    1bfc:	83 83       	std	Z+3, r24	; 0x03
    1bfe:	01 15       	cp	r16, r1
    1c00:	11 05       	cpc	r17, r1
    1c02:	71 f0       	breq	.+28     	; 0x1c20 <fdevopen+0x52>
    1c04:	02 87       	std	Z+10, r16	; 0x0a
    1c06:	13 87       	std	Z+11, r17	; 0x0b
    1c08:	81 e8       	ldi	r24, 0x81	; 129
    1c0a:	83 83       	std	Z+3, r24	; 0x03
    1c0c:	80 91 c7 20 	lds	r24, 0x20C7
    1c10:	90 91 c8 20 	lds	r25, 0x20C8
    1c14:	89 2b       	or	r24, r25
    1c16:	21 f4       	brne	.+8      	; 0x1c20 <fdevopen+0x52>
    1c18:	e0 93 c7 20 	sts	0x20C7, r30
    1c1c:	f0 93 c8 20 	sts	0x20C8, r31
    1c20:	20 97       	sbiw	r28, 0x00	; 0
    1c22:	c9 f0       	breq	.+50     	; 0x1c56 <fdevopen+0x88>
    1c24:	c0 87       	std	Z+8, r28	; 0x08
    1c26:	d1 87       	std	Z+9, r29	; 0x09
    1c28:	83 81       	ldd	r24, Z+3	; 0x03
    1c2a:	82 60       	ori	r24, 0x02	; 2
    1c2c:	83 83       	std	Z+3, r24	; 0x03
    1c2e:	80 91 c9 20 	lds	r24, 0x20C9
    1c32:	90 91 ca 20 	lds	r25, 0x20CA
    1c36:	89 2b       	or	r24, r25
    1c38:	71 f4       	brne	.+28     	; 0x1c56 <fdevopen+0x88>
    1c3a:	e0 93 c9 20 	sts	0x20C9, r30
    1c3e:	f0 93 ca 20 	sts	0x20CA, r31
    1c42:	80 91 cb 20 	lds	r24, 0x20CB
    1c46:	90 91 cc 20 	lds	r25, 0x20CC
    1c4a:	89 2b       	or	r24, r25
    1c4c:	21 f4       	brne	.+8      	; 0x1c56 <fdevopen+0x88>
    1c4e:	e0 93 cb 20 	sts	0x20CB, r30
    1c52:	f0 93 cc 20 	sts	0x20CC, r31
    1c56:	cf 01       	movw	r24, r30
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	08 95       	ret

00001c62 <printf>:
    1c62:	a0 e0       	ldi	r26, 0x00	; 0
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e6 e3       	ldi	r30, 0x36	; 54
    1c68:	fe e0       	ldi	r31, 0x0E	; 14
    1c6a:	db c3       	rjmp	.+1974   	; 0x2422 <__prologue_saves__+0x20>
    1c6c:	ae 01       	movw	r20, r28
    1c6e:	4b 5f       	subi	r20, 0xFB	; 251
    1c70:	5f 4f       	sbci	r21, 0xFF	; 255
    1c72:	fa 01       	movw	r30, r20
    1c74:	61 91       	ld	r22, Z+
    1c76:	71 91       	ld	r23, Z+
    1c78:	af 01       	movw	r20, r30
    1c7a:	80 91 c9 20 	lds	r24, 0x20C9
    1c7e:	90 91 ca 20 	lds	r25, 0x20CA
    1c82:	02 d0       	rcall	.+4      	; 0x1c88 <vfprintf>
    1c84:	e2 e0       	ldi	r30, 0x02	; 2
    1c86:	e6 c3       	rjmp	.+1996   	; 0x2454 <__epilogue_restores__+0x20>

00001c88 <vfprintf>:
    1c88:	ac e0       	ldi	r26, 0x0C	; 12
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e9 e4       	ldi	r30, 0x49	; 73
    1c8e:	fe e0       	ldi	r31, 0x0E	; 14
    1c90:	b8 c3       	rjmp	.+1904   	; 0x2402 <__prologue_saves__>
    1c92:	7c 01       	movw	r14, r24
    1c94:	6b 01       	movw	r12, r22
    1c96:	8a 01       	movw	r16, r20
    1c98:	fc 01       	movw	r30, r24
    1c9a:	16 82       	std	Z+6, r1	; 0x06
    1c9c:	17 82       	std	Z+7, r1	; 0x07
    1c9e:	83 81       	ldd	r24, Z+3	; 0x03
    1ca0:	81 ff       	sbrs	r24, 1
    1ca2:	b0 c1       	rjmp	.+864    	; 0x2004 <vfprintf+0x37c>
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	01 96       	adiw	r24, 0x01	; 1
    1ca8:	4c 01       	movw	r8, r24
    1caa:	f7 01       	movw	r30, r14
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	f6 01       	movw	r30, r12
    1cb0:	93 fd       	sbrc	r25, 3
    1cb2:	85 91       	lpm	r24, Z+
    1cb4:	93 ff       	sbrs	r25, 3
    1cb6:	81 91       	ld	r24, Z+
    1cb8:	6f 01       	movw	r12, r30
    1cba:	88 23       	and	r24, r24
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <vfprintf+0x38>
    1cbe:	9e c1       	rjmp	.+828    	; 0x1ffc <vfprintf+0x374>
    1cc0:	85 32       	cpi	r24, 0x25	; 37
    1cc2:	39 f4       	brne	.+14     	; 0x1cd2 <vfprintf+0x4a>
    1cc4:	93 fd       	sbrc	r25, 3
    1cc6:	85 91       	lpm	r24, Z+
    1cc8:	93 ff       	sbrs	r25, 3
    1cca:	81 91       	ld	r24, Z+
    1ccc:	6f 01       	movw	r12, r30
    1cce:	85 32       	cpi	r24, 0x25	; 37
    1cd0:	21 f4       	brne	.+8      	; 0x1cda <vfprintf+0x52>
    1cd2:	b7 01       	movw	r22, r14
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	ff d2       	rcall	.+1534   	; 0x22d6 <fputc>
    1cd8:	e8 cf       	rjmp	.-48     	; 0x1caa <vfprintf+0x22>
    1cda:	51 2c       	mov	r5, r1
    1cdc:	31 2c       	mov	r3, r1
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	20 32       	cpi	r18, 0x20	; 32
    1ce2:	a0 f4       	brcc	.+40     	; 0x1d0c <vfprintf+0x84>
    1ce4:	8b 32       	cpi	r24, 0x2B	; 43
    1ce6:	69 f0       	breq	.+26     	; 0x1d02 <vfprintf+0x7a>
    1ce8:	30 f4       	brcc	.+12     	; 0x1cf6 <vfprintf+0x6e>
    1cea:	80 32       	cpi	r24, 0x20	; 32
    1cec:	59 f0       	breq	.+22     	; 0x1d04 <vfprintf+0x7c>
    1cee:	83 32       	cpi	r24, 0x23	; 35
    1cf0:	69 f4       	brne	.+26     	; 0x1d0c <vfprintf+0x84>
    1cf2:	20 61       	ori	r18, 0x10	; 16
    1cf4:	2c c0       	rjmp	.+88     	; 0x1d4e <vfprintf+0xc6>
    1cf6:	8d 32       	cpi	r24, 0x2D	; 45
    1cf8:	39 f0       	breq	.+14     	; 0x1d08 <vfprintf+0x80>
    1cfa:	80 33       	cpi	r24, 0x30	; 48
    1cfc:	39 f4       	brne	.+14     	; 0x1d0c <vfprintf+0x84>
    1cfe:	21 60       	ori	r18, 0x01	; 1
    1d00:	26 c0       	rjmp	.+76     	; 0x1d4e <vfprintf+0xc6>
    1d02:	22 60       	ori	r18, 0x02	; 2
    1d04:	24 60       	ori	r18, 0x04	; 4
    1d06:	23 c0       	rjmp	.+70     	; 0x1d4e <vfprintf+0xc6>
    1d08:	28 60       	ori	r18, 0x08	; 8
    1d0a:	21 c0       	rjmp	.+66     	; 0x1d4e <vfprintf+0xc6>
    1d0c:	27 fd       	sbrc	r18, 7
    1d0e:	27 c0       	rjmp	.+78     	; 0x1d5e <vfprintf+0xd6>
    1d10:	30 ed       	ldi	r19, 0xD0	; 208
    1d12:	38 0f       	add	r19, r24
    1d14:	3a 30       	cpi	r19, 0x0A	; 10
    1d16:	78 f4       	brcc	.+30     	; 0x1d36 <vfprintf+0xae>
    1d18:	26 ff       	sbrs	r18, 6
    1d1a:	06 c0       	rjmp	.+12     	; 0x1d28 <vfprintf+0xa0>
    1d1c:	fa e0       	ldi	r31, 0x0A	; 10
    1d1e:	5f 9e       	mul	r5, r31
    1d20:	30 0d       	add	r19, r0
    1d22:	11 24       	eor	r1, r1
    1d24:	53 2e       	mov	r5, r19
    1d26:	13 c0       	rjmp	.+38     	; 0x1d4e <vfprintf+0xc6>
    1d28:	8a e0       	ldi	r24, 0x0A	; 10
    1d2a:	38 9e       	mul	r3, r24
    1d2c:	30 0d       	add	r19, r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	33 2e       	mov	r3, r19
    1d32:	20 62       	ori	r18, 0x20	; 32
    1d34:	0c c0       	rjmp	.+24     	; 0x1d4e <vfprintf+0xc6>
    1d36:	8e 32       	cpi	r24, 0x2E	; 46
    1d38:	21 f4       	brne	.+8      	; 0x1d42 <vfprintf+0xba>
    1d3a:	26 fd       	sbrc	r18, 6
    1d3c:	5f c1       	rjmp	.+702    	; 0x1ffc <vfprintf+0x374>
    1d3e:	20 64       	ori	r18, 0x40	; 64
    1d40:	06 c0       	rjmp	.+12     	; 0x1d4e <vfprintf+0xc6>
    1d42:	8c 36       	cpi	r24, 0x6C	; 108
    1d44:	11 f4       	brne	.+4      	; 0x1d4a <vfprintf+0xc2>
    1d46:	20 68       	ori	r18, 0x80	; 128
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <vfprintf+0xc6>
    1d4a:	88 36       	cpi	r24, 0x68	; 104
    1d4c:	41 f4       	brne	.+16     	; 0x1d5e <vfprintf+0xd6>
    1d4e:	f6 01       	movw	r30, r12
    1d50:	93 fd       	sbrc	r25, 3
    1d52:	85 91       	lpm	r24, Z+
    1d54:	93 ff       	sbrs	r25, 3
    1d56:	81 91       	ld	r24, Z+
    1d58:	6f 01       	movw	r12, r30
    1d5a:	81 11       	cpse	r24, r1
    1d5c:	c1 cf       	rjmp	.-126    	; 0x1ce0 <vfprintf+0x58>
    1d5e:	98 2f       	mov	r25, r24
    1d60:	9f 7d       	andi	r25, 0xDF	; 223
    1d62:	95 54       	subi	r25, 0x45	; 69
    1d64:	93 30       	cpi	r25, 0x03	; 3
    1d66:	28 f4       	brcc	.+10     	; 0x1d72 <vfprintf+0xea>
    1d68:	0c 5f       	subi	r16, 0xFC	; 252
    1d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6c:	ff e3       	ldi	r31, 0x3F	; 63
    1d6e:	f9 83       	std	Y+1, r31	; 0x01
    1d70:	0d c0       	rjmp	.+26     	; 0x1d8c <vfprintf+0x104>
    1d72:	83 36       	cpi	r24, 0x63	; 99
    1d74:	31 f0       	breq	.+12     	; 0x1d82 <vfprintf+0xfa>
    1d76:	83 37       	cpi	r24, 0x73	; 115
    1d78:	71 f0       	breq	.+28     	; 0x1d96 <vfprintf+0x10e>
    1d7a:	83 35       	cpi	r24, 0x53	; 83
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <vfprintf+0xf8>
    1d7e:	57 c0       	rjmp	.+174    	; 0x1e2e <vfprintf+0x1a6>
    1d80:	21 c0       	rjmp	.+66     	; 0x1dc4 <vfprintf+0x13c>
    1d82:	f8 01       	movw	r30, r16
    1d84:	80 81       	ld	r24, Z
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	0e 5f       	subi	r16, 0xFE	; 254
    1d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8c:	44 24       	eor	r4, r4
    1d8e:	43 94       	inc	r4
    1d90:	51 2c       	mov	r5, r1
    1d92:	54 01       	movw	r10, r8
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <vfprintf+0x136>
    1d96:	38 01       	movw	r6, r16
    1d98:	f2 e0       	ldi	r31, 0x02	; 2
    1d9a:	6f 0e       	add	r6, r31
    1d9c:	71 1c       	adc	r7, r1
    1d9e:	f8 01       	movw	r30, r16
    1da0:	a0 80       	ld	r10, Z
    1da2:	b1 80       	ldd	r11, Z+1	; 0x01
    1da4:	26 ff       	sbrs	r18, 6
    1da6:	03 c0       	rjmp	.+6      	; 0x1dae <vfprintf+0x126>
    1da8:	65 2d       	mov	r22, r5
    1daa:	70 e0       	ldi	r23, 0x00	; 0
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <vfprintf+0x12a>
    1dae:	6f ef       	ldi	r22, 0xFF	; 255
    1db0:	7f ef       	ldi	r23, 0xFF	; 255
    1db2:	c5 01       	movw	r24, r10
    1db4:	2c 87       	std	Y+12, r18	; 0x0c
    1db6:	84 d2       	rcall	.+1288   	; 0x22c0 <strnlen>
    1db8:	2c 01       	movw	r4, r24
    1dba:	83 01       	movw	r16, r6
    1dbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dbe:	2f 77       	andi	r18, 0x7F	; 127
    1dc0:	22 2e       	mov	r2, r18
    1dc2:	16 c0       	rjmp	.+44     	; 0x1df0 <vfprintf+0x168>
    1dc4:	38 01       	movw	r6, r16
    1dc6:	f2 e0       	ldi	r31, 0x02	; 2
    1dc8:	6f 0e       	add	r6, r31
    1dca:	71 1c       	adc	r7, r1
    1dcc:	f8 01       	movw	r30, r16
    1dce:	a0 80       	ld	r10, Z
    1dd0:	b1 80       	ldd	r11, Z+1	; 0x01
    1dd2:	26 ff       	sbrs	r18, 6
    1dd4:	03 c0       	rjmp	.+6      	; 0x1ddc <vfprintf+0x154>
    1dd6:	65 2d       	mov	r22, r5
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <vfprintf+0x158>
    1ddc:	6f ef       	ldi	r22, 0xFF	; 255
    1dde:	7f ef       	ldi	r23, 0xFF	; 255
    1de0:	c5 01       	movw	r24, r10
    1de2:	2c 87       	std	Y+12, r18	; 0x0c
    1de4:	5b d2       	rcall	.+1206   	; 0x229c <strnlen_P>
    1de6:	2c 01       	movw	r4, r24
    1de8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dea:	20 68       	ori	r18, 0x80	; 128
    1dec:	22 2e       	mov	r2, r18
    1dee:	83 01       	movw	r16, r6
    1df0:	23 fc       	sbrc	r2, 3
    1df2:	19 c0       	rjmp	.+50     	; 0x1e26 <vfprintf+0x19e>
    1df4:	83 2d       	mov	r24, r3
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	48 16       	cp	r4, r24
    1dfa:	59 06       	cpc	r5, r25
    1dfc:	a0 f4       	brcc	.+40     	; 0x1e26 <vfprintf+0x19e>
    1dfe:	b7 01       	movw	r22, r14
    1e00:	80 e2       	ldi	r24, 0x20	; 32
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	68 d2       	rcall	.+1232   	; 0x22d6 <fputc>
    1e06:	3a 94       	dec	r3
    1e08:	f5 cf       	rjmp	.-22     	; 0x1df4 <vfprintf+0x16c>
    1e0a:	f5 01       	movw	r30, r10
    1e0c:	27 fc       	sbrc	r2, 7
    1e0e:	85 91       	lpm	r24, Z+
    1e10:	27 fe       	sbrs	r2, 7
    1e12:	81 91       	ld	r24, Z+
    1e14:	5f 01       	movw	r10, r30
    1e16:	b7 01       	movw	r22, r14
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	5d d2       	rcall	.+1210   	; 0x22d6 <fputc>
    1e1c:	31 10       	cpse	r3, r1
    1e1e:	3a 94       	dec	r3
    1e20:	f1 e0       	ldi	r31, 0x01	; 1
    1e22:	4f 1a       	sub	r4, r31
    1e24:	51 08       	sbc	r5, r1
    1e26:	41 14       	cp	r4, r1
    1e28:	51 04       	cpc	r5, r1
    1e2a:	79 f7       	brne	.-34     	; 0x1e0a <vfprintf+0x182>
    1e2c:	de c0       	rjmp	.+444    	; 0x1fea <vfprintf+0x362>
    1e2e:	84 36       	cpi	r24, 0x64	; 100
    1e30:	11 f0       	breq	.+4      	; 0x1e36 <vfprintf+0x1ae>
    1e32:	89 36       	cpi	r24, 0x69	; 105
    1e34:	31 f5       	brne	.+76     	; 0x1e82 <vfprintf+0x1fa>
    1e36:	f8 01       	movw	r30, r16
    1e38:	27 ff       	sbrs	r18, 7
    1e3a:	07 c0       	rjmp	.+14     	; 0x1e4a <vfprintf+0x1c2>
    1e3c:	60 81       	ld	r22, Z
    1e3e:	71 81       	ldd	r23, Z+1	; 0x01
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	93 81       	ldd	r25, Z+3	; 0x03
    1e44:	0c 5f       	subi	r16, 0xFC	; 252
    1e46:	1f 4f       	sbci	r17, 0xFF	; 255
    1e48:	08 c0       	rjmp	.+16     	; 0x1e5a <vfprintf+0x1d2>
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	07 2e       	mov	r0, r23
    1e50:	00 0c       	add	r0, r0
    1e52:	88 0b       	sbc	r24, r24
    1e54:	99 0b       	sbc	r25, r25
    1e56:	0e 5f       	subi	r16, 0xFE	; 254
    1e58:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5a:	2f 76       	andi	r18, 0x6F	; 111
    1e5c:	72 2e       	mov	r7, r18
    1e5e:	97 ff       	sbrs	r25, 7
    1e60:	09 c0       	rjmp	.+18     	; 0x1e74 <vfprintf+0x1ec>
    1e62:	90 95       	com	r25
    1e64:	80 95       	com	r24
    1e66:	70 95       	com	r23
    1e68:	61 95       	neg	r22
    1e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	20 68       	ori	r18, 0x80	; 128
    1e72:	72 2e       	mov	r7, r18
    1e74:	2a e0       	ldi	r18, 0x0A	; 10
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	a4 01       	movw	r20, r8
    1e7a:	65 d2       	rcall	.+1226   	; 0x2346 <__ultoa_invert>
    1e7c:	a8 2e       	mov	r10, r24
    1e7e:	a8 18       	sub	r10, r8
    1e80:	43 c0       	rjmp	.+134    	; 0x1f08 <vfprintf+0x280>
    1e82:	85 37       	cpi	r24, 0x75	; 117
    1e84:	29 f4       	brne	.+10     	; 0x1e90 <vfprintf+0x208>
    1e86:	2f 7e       	andi	r18, 0xEF	; 239
    1e88:	b2 2e       	mov	r11, r18
    1e8a:	2a e0       	ldi	r18, 0x0A	; 10
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	25 c0       	rjmp	.+74     	; 0x1eda <vfprintf+0x252>
    1e90:	f2 2f       	mov	r31, r18
    1e92:	f9 7f       	andi	r31, 0xF9	; 249
    1e94:	bf 2e       	mov	r11, r31
    1e96:	8f 36       	cpi	r24, 0x6F	; 111
    1e98:	c1 f0       	breq	.+48     	; 0x1eca <vfprintf+0x242>
    1e9a:	18 f4       	brcc	.+6      	; 0x1ea2 <vfprintf+0x21a>
    1e9c:	88 35       	cpi	r24, 0x58	; 88
    1e9e:	79 f0       	breq	.+30     	; 0x1ebe <vfprintf+0x236>
    1ea0:	ad c0       	rjmp	.+346    	; 0x1ffc <vfprintf+0x374>
    1ea2:	80 37       	cpi	r24, 0x70	; 112
    1ea4:	19 f0       	breq	.+6      	; 0x1eac <vfprintf+0x224>
    1ea6:	88 37       	cpi	r24, 0x78	; 120
    1ea8:	21 f0       	breq	.+8      	; 0x1eb2 <vfprintf+0x22a>
    1eaa:	a8 c0       	rjmp	.+336    	; 0x1ffc <vfprintf+0x374>
    1eac:	2f 2f       	mov	r18, r31
    1eae:	20 61       	ori	r18, 0x10	; 16
    1eb0:	b2 2e       	mov	r11, r18
    1eb2:	b4 fe       	sbrs	r11, 4
    1eb4:	0d c0       	rjmp	.+26     	; 0x1ed0 <vfprintf+0x248>
    1eb6:	8b 2d       	mov	r24, r11
    1eb8:	84 60       	ori	r24, 0x04	; 4
    1eba:	b8 2e       	mov	r11, r24
    1ebc:	09 c0       	rjmp	.+18     	; 0x1ed0 <vfprintf+0x248>
    1ebe:	24 ff       	sbrs	r18, 4
    1ec0:	0a c0       	rjmp	.+20     	; 0x1ed6 <vfprintf+0x24e>
    1ec2:	9f 2f       	mov	r25, r31
    1ec4:	96 60       	ori	r25, 0x06	; 6
    1ec6:	b9 2e       	mov	r11, r25
    1ec8:	06 c0       	rjmp	.+12     	; 0x1ed6 <vfprintf+0x24e>
    1eca:	28 e0       	ldi	r18, 0x08	; 8
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	05 c0       	rjmp	.+10     	; 0x1eda <vfprintf+0x252>
    1ed0:	20 e1       	ldi	r18, 0x10	; 16
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <vfprintf+0x252>
    1ed6:	20 e1       	ldi	r18, 0x10	; 16
    1ed8:	32 e0       	ldi	r19, 0x02	; 2
    1eda:	f8 01       	movw	r30, r16
    1edc:	b7 fe       	sbrs	r11, 7
    1ede:	07 c0       	rjmp	.+14     	; 0x1eee <vfprintf+0x266>
    1ee0:	60 81       	ld	r22, Z
    1ee2:	71 81       	ldd	r23, Z+1	; 0x01
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	0c 5f       	subi	r16, 0xFC	; 252
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <vfprintf+0x272>
    1eee:	60 81       	ld	r22, Z
    1ef0:	71 81       	ldd	r23, Z+1	; 0x01
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e 5f       	subi	r16, 0xFE	; 254
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	a4 01       	movw	r20, r8
    1efc:	24 d2       	rcall	.+1096   	; 0x2346 <__ultoa_invert>
    1efe:	a8 2e       	mov	r10, r24
    1f00:	a8 18       	sub	r10, r8
    1f02:	fb 2d       	mov	r31, r11
    1f04:	ff 77       	andi	r31, 0x7F	; 127
    1f06:	7f 2e       	mov	r7, r31
    1f08:	76 fe       	sbrs	r7, 6
    1f0a:	0b c0       	rjmp	.+22     	; 0x1f22 <vfprintf+0x29a>
    1f0c:	37 2d       	mov	r19, r7
    1f0e:	3e 7f       	andi	r19, 0xFE	; 254
    1f10:	a5 14       	cp	r10, r5
    1f12:	50 f4       	brcc	.+20     	; 0x1f28 <vfprintf+0x2a0>
    1f14:	74 fe       	sbrs	r7, 4
    1f16:	0a c0       	rjmp	.+20     	; 0x1f2c <vfprintf+0x2a4>
    1f18:	72 fc       	sbrc	r7, 2
    1f1a:	08 c0       	rjmp	.+16     	; 0x1f2c <vfprintf+0x2a4>
    1f1c:	37 2d       	mov	r19, r7
    1f1e:	3e 7e       	andi	r19, 0xEE	; 238
    1f20:	05 c0       	rjmp	.+10     	; 0x1f2c <vfprintf+0x2a4>
    1f22:	ba 2c       	mov	r11, r10
    1f24:	37 2d       	mov	r19, r7
    1f26:	03 c0       	rjmp	.+6      	; 0x1f2e <vfprintf+0x2a6>
    1f28:	ba 2c       	mov	r11, r10
    1f2a:	01 c0       	rjmp	.+2      	; 0x1f2e <vfprintf+0x2a6>
    1f2c:	b5 2c       	mov	r11, r5
    1f2e:	34 ff       	sbrs	r19, 4
    1f30:	0d c0       	rjmp	.+26     	; 0x1f4c <vfprintf+0x2c4>
    1f32:	fe 01       	movw	r30, r28
    1f34:	ea 0d       	add	r30, r10
    1f36:	f1 1d       	adc	r31, r1
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 33       	cpi	r24, 0x30	; 48
    1f3c:	11 f4       	brne	.+4      	; 0x1f42 <vfprintf+0x2ba>
    1f3e:	39 7e       	andi	r19, 0xE9	; 233
    1f40:	09 c0       	rjmp	.+18     	; 0x1f54 <vfprintf+0x2cc>
    1f42:	32 ff       	sbrs	r19, 2
    1f44:	06 c0       	rjmp	.+12     	; 0x1f52 <vfprintf+0x2ca>
    1f46:	b3 94       	inc	r11
    1f48:	b3 94       	inc	r11
    1f4a:	04 c0       	rjmp	.+8      	; 0x1f54 <vfprintf+0x2cc>
    1f4c:	83 2f       	mov	r24, r19
    1f4e:	86 78       	andi	r24, 0x86	; 134
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <vfprintf+0x2cc>
    1f52:	b3 94       	inc	r11
    1f54:	33 fd       	sbrc	r19, 3
    1f56:	12 c0       	rjmp	.+36     	; 0x1f7c <vfprintf+0x2f4>
    1f58:	30 ff       	sbrs	r19, 0
    1f5a:	06 c0       	rjmp	.+12     	; 0x1f68 <vfprintf+0x2e0>
    1f5c:	5a 2c       	mov	r5, r10
    1f5e:	b3 14       	cp	r11, r3
    1f60:	18 f4       	brcc	.+6      	; 0x1f68 <vfprintf+0x2e0>
    1f62:	53 0c       	add	r5, r3
    1f64:	5b 18       	sub	r5, r11
    1f66:	b3 2c       	mov	r11, r3
    1f68:	b3 14       	cp	r11, r3
    1f6a:	60 f4       	brcc	.+24     	; 0x1f84 <vfprintf+0x2fc>
    1f6c:	b7 01       	movw	r22, r14
    1f6e:	80 e2       	ldi	r24, 0x20	; 32
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	3c 87       	std	Y+12, r19	; 0x0c
    1f74:	b0 d1       	rcall	.+864    	; 0x22d6 <fputc>
    1f76:	b3 94       	inc	r11
    1f78:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f7a:	f6 cf       	rjmp	.-20     	; 0x1f68 <vfprintf+0x2e0>
    1f7c:	b3 14       	cp	r11, r3
    1f7e:	10 f4       	brcc	.+4      	; 0x1f84 <vfprintf+0x2fc>
    1f80:	3b 18       	sub	r3, r11
    1f82:	01 c0       	rjmp	.+2      	; 0x1f86 <vfprintf+0x2fe>
    1f84:	31 2c       	mov	r3, r1
    1f86:	34 ff       	sbrs	r19, 4
    1f88:	11 c0       	rjmp	.+34     	; 0x1fac <vfprintf+0x324>
    1f8a:	b7 01       	movw	r22, r14
    1f8c:	80 e3       	ldi	r24, 0x30	; 48
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	3c 87       	std	Y+12, r19	; 0x0c
    1f92:	a1 d1       	rcall	.+834    	; 0x22d6 <fputc>
    1f94:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f96:	32 ff       	sbrs	r19, 2
    1f98:	16 c0       	rjmp	.+44     	; 0x1fc6 <vfprintf+0x33e>
    1f9a:	31 fd       	sbrc	r19, 1
    1f9c:	03 c0       	rjmp	.+6      	; 0x1fa4 <vfprintf+0x31c>
    1f9e:	88 e7       	ldi	r24, 0x78	; 120
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <vfprintf+0x320>
    1fa4:	88 e5       	ldi	r24, 0x58	; 88
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	b7 01       	movw	r22, r14
    1faa:	0c c0       	rjmp	.+24     	; 0x1fc4 <vfprintf+0x33c>
    1fac:	83 2f       	mov	r24, r19
    1fae:	86 78       	andi	r24, 0x86	; 134
    1fb0:	51 f0       	breq	.+20     	; 0x1fc6 <vfprintf+0x33e>
    1fb2:	31 ff       	sbrs	r19, 1
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <vfprintf+0x332>
    1fb6:	8b e2       	ldi	r24, 0x2B	; 43
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <vfprintf+0x334>
    1fba:	80 e2       	ldi	r24, 0x20	; 32
    1fbc:	37 fd       	sbrc	r19, 7
    1fbe:	8d e2       	ldi	r24, 0x2D	; 45
    1fc0:	b7 01       	movw	r22, r14
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	88 d1       	rcall	.+784    	; 0x22d6 <fputc>
    1fc6:	a5 14       	cp	r10, r5
    1fc8:	30 f4       	brcc	.+12     	; 0x1fd6 <vfprintf+0x34e>
    1fca:	b7 01       	movw	r22, r14
    1fcc:	80 e3       	ldi	r24, 0x30	; 48
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	82 d1       	rcall	.+772    	; 0x22d6 <fputc>
    1fd2:	5a 94       	dec	r5
    1fd4:	f8 cf       	rjmp	.-16     	; 0x1fc6 <vfprintf+0x33e>
    1fd6:	aa 94       	dec	r10
    1fd8:	f4 01       	movw	r30, r8
    1fda:	ea 0d       	add	r30, r10
    1fdc:	f1 1d       	adc	r31, r1
    1fde:	80 81       	ld	r24, Z
    1fe0:	b7 01       	movw	r22, r14
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	78 d1       	rcall	.+752    	; 0x22d6 <fputc>
    1fe6:	a1 10       	cpse	r10, r1
    1fe8:	f6 cf       	rjmp	.-20     	; 0x1fd6 <vfprintf+0x34e>
    1fea:	33 20       	and	r3, r3
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <vfprintf+0x368>
    1fee:	5d ce       	rjmp	.-838    	; 0x1caa <vfprintf+0x22>
    1ff0:	b7 01       	movw	r22, r14
    1ff2:	80 e2       	ldi	r24, 0x20	; 32
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	6f d1       	rcall	.+734    	; 0x22d6 <fputc>
    1ff8:	3a 94       	dec	r3
    1ffa:	f7 cf       	rjmp	.-18     	; 0x1fea <vfprintf+0x362>
    1ffc:	f7 01       	movw	r30, r14
    1ffe:	86 81       	ldd	r24, Z+6	; 0x06
    2000:	97 81       	ldd	r25, Z+7	; 0x07
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <vfprintf+0x380>
    2004:	8f ef       	ldi	r24, 0xFF	; 255
    2006:	9f ef       	ldi	r25, 0xFF	; 255
    2008:	2c 96       	adiw	r28, 0x0c	; 12
    200a:	e2 e1       	ldi	r30, 0x12	; 18
    200c:	13 c2       	rjmp	.+1062   	; 0x2434 <__epilogue_restores__>

0000200e <calloc>:
    200e:	0f 93       	push	r16
    2010:	1f 93       	push	r17
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	86 9f       	mul	r24, r22
    2018:	80 01       	movw	r16, r0
    201a:	87 9f       	mul	r24, r23
    201c:	10 0d       	add	r17, r0
    201e:	96 9f       	mul	r25, r22
    2020:	10 0d       	add	r17, r0
    2022:	11 24       	eor	r1, r1
    2024:	c8 01       	movw	r24, r16
    2026:	0d d0       	rcall	.+26     	; 0x2042 <malloc>
    2028:	ec 01       	movw	r28, r24
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	21 f0       	breq	.+8      	; 0x2036 <calloc+0x28>
    202e:	a8 01       	movw	r20, r16
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	3e d1       	rcall	.+636    	; 0x22b2 <memset>
    2036:	ce 01       	movw	r24, r28
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	08 95       	ret

00002042 <malloc>:
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	91 05       	cpc	r25, r1
    204a:	10 f4       	brcc	.+4      	; 0x2050 <malloc+0xe>
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	e0 91 cf 20 	lds	r30, 0x20CF
    2054:	f0 91 d0 20 	lds	r31, 0x20D0
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	c0 e0       	ldi	r28, 0x00	; 0
    205e:	d0 e0       	ldi	r29, 0x00	; 0
    2060:	30 97       	sbiw	r30, 0x00	; 0
    2062:	11 f1       	breq	.+68     	; 0x20a8 <malloc+0x66>
    2064:	40 81       	ld	r20, Z
    2066:	51 81       	ldd	r21, Z+1	; 0x01
    2068:	48 17       	cp	r20, r24
    206a:	59 07       	cpc	r21, r25
    206c:	c0 f0       	brcs	.+48     	; 0x209e <malloc+0x5c>
    206e:	48 17       	cp	r20, r24
    2070:	59 07       	cpc	r21, r25
    2072:	61 f4       	brne	.+24     	; 0x208c <malloc+0x4a>
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	20 97       	sbiw	r28, 0x00	; 0
    207a:	19 f0       	breq	.+6      	; 0x2082 <malloc+0x40>
    207c:	8a 83       	std	Y+2, r24	; 0x02
    207e:	9b 83       	std	Y+3, r25	; 0x03
    2080:	2b c0       	rjmp	.+86     	; 0x20d8 <malloc+0x96>
    2082:	80 93 cf 20 	sts	0x20CF, r24
    2086:	90 93 d0 20 	sts	0x20D0, r25
    208a:	26 c0       	rjmp	.+76     	; 0x20d8 <malloc+0x96>
    208c:	21 15       	cp	r18, r1
    208e:	31 05       	cpc	r19, r1
    2090:	19 f0       	breq	.+6      	; 0x2098 <malloc+0x56>
    2092:	42 17       	cp	r20, r18
    2094:	53 07       	cpc	r21, r19
    2096:	18 f4       	brcc	.+6      	; 0x209e <malloc+0x5c>
    2098:	9a 01       	movw	r18, r20
    209a:	be 01       	movw	r22, r28
    209c:	df 01       	movw	r26, r30
    209e:	ef 01       	movw	r28, r30
    20a0:	02 80       	ldd	r0, Z+2	; 0x02
    20a2:	f3 81       	ldd	r31, Z+3	; 0x03
    20a4:	e0 2d       	mov	r30, r0
    20a6:	dc cf       	rjmp	.-72     	; 0x2060 <malloc+0x1e>
    20a8:	21 15       	cp	r18, r1
    20aa:	31 05       	cpc	r19, r1
    20ac:	09 f1       	breq	.+66     	; 0x20f0 <malloc+0xae>
    20ae:	28 1b       	sub	r18, r24
    20b0:	39 0b       	sbc	r19, r25
    20b2:	24 30       	cpi	r18, 0x04	; 4
    20b4:	31 05       	cpc	r19, r1
    20b6:	90 f4       	brcc	.+36     	; 0x20dc <malloc+0x9a>
    20b8:	12 96       	adiw	r26, 0x02	; 2
    20ba:	8d 91       	ld	r24, X+
    20bc:	9c 91       	ld	r25, X
    20be:	13 97       	sbiw	r26, 0x03	; 3
    20c0:	61 15       	cp	r22, r1
    20c2:	71 05       	cpc	r23, r1
    20c4:	21 f0       	breq	.+8      	; 0x20ce <malloc+0x8c>
    20c6:	fb 01       	movw	r30, r22
    20c8:	82 83       	std	Z+2, r24	; 0x02
    20ca:	93 83       	std	Z+3, r25	; 0x03
    20cc:	04 c0       	rjmp	.+8      	; 0x20d6 <malloc+0x94>
    20ce:	80 93 cf 20 	sts	0x20CF, r24
    20d2:	90 93 d0 20 	sts	0x20D0, r25
    20d6:	fd 01       	movw	r30, r26
    20d8:	32 96       	adiw	r30, 0x02	; 2
    20da:	44 c0       	rjmp	.+136    	; 0x2164 <malloc+0x122>
    20dc:	fd 01       	movw	r30, r26
    20de:	e2 0f       	add	r30, r18
    20e0:	f3 1f       	adc	r31, r19
    20e2:	81 93       	st	Z+, r24
    20e4:	91 93       	st	Z+, r25
    20e6:	22 50       	subi	r18, 0x02	; 2
    20e8:	31 09       	sbc	r19, r1
    20ea:	2d 93       	st	X+, r18
    20ec:	3c 93       	st	X, r19
    20ee:	3a c0       	rjmp	.+116    	; 0x2164 <malloc+0x122>
    20f0:	20 91 cd 20 	lds	r18, 0x20CD
    20f4:	30 91 ce 20 	lds	r19, 0x20CE
    20f8:	23 2b       	or	r18, r19
    20fa:	41 f4       	brne	.+16     	; 0x210c <malloc+0xca>
    20fc:	20 91 02 20 	lds	r18, 0x2002
    2100:	30 91 03 20 	lds	r19, 0x2003
    2104:	20 93 cd 20 	sts	0x20CD, r18
    2108:	30 93 ce 20 	sts	0x20CE, r19
    210c:	20 91 00 20 	lds	r18, 0x2000
    2110:	30 91 01 20 	lds	r19, 0x2001
    2114:	21 15       	cp	r18, r1
    2116:	31 05       	cpc	r19, r1
    2118:	41 f4       	brne	.+16     	; 0x212a <malloc+0xe8>
    211a:	2d b7       	in	r18, 0x3d	; 61
    211c:	3e b7       	in	r19, 0x3e	; 62
    211e:	40 91 04 20 	lds	r20, 0x2004
    2122:	50 91 05 20 	lds	r21, 0x2005
    2126:	24 1b       	sub	r18, r20
    2128:	35 0b       	sbc	r19, r21
    212a:	e0 91 cd 20 	lds	r30, 0x20CD
    212e:	f0 91 ce 20 	lds	r31, 0x20CE
    2132:	e2 17       	cp	r30, r18
    2134:	f3 07       	cpc	r31, r19
    2136:	a0 f4       	brcc	.+40     	; 0x2160 <malloc+0x11e>
    2138:	2e 1b       	sub	r18, r30
    213a:	3f 0b       	sbc	r19, r31
    213c:	28 17       	cp	r18, r24
    213e:	39 07       	cpc	r19, r25
    2140:	78 f0       	brcs	.+30     	; 0x2160 <malloc+0x11e>
    2142:	ac 01       	movw	r20, r24
    2144:	4e 5f       	subi	r20, 0xFE	; 254
    2146:	5f 4f       	sbci	r21, 0xFF	; 255
    2148:	24 17       	cp	r18, r20
    214a:	35 07       	cpc	r19, r21
    214c:	48 f0       	brcs	.+18     	; 0x2160 <malloc+0x11e>
    214e:	4e 0f       	add	r20, r30
    2150:	5f 1f       	adc	r21, r31
    2152:	40 93 cd 20 	sts	0x20CD, r20
    2156:	50 93 ce 20 	sts	0x20CE, r21
    215a:	81 93       	st	Z+, r24
    215c:	91 93       	st	Z+, r25
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <malloc+0x122>
    2160:	e0 e0       	ldi	r30, 0x00	; 0
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	cf 01       	movw	r24, r30
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	08 95       	ret

0000216c <free>:
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	09 f4       	brne	.+2      	; 0x217a <free+0xe>
    2178:	8c c0       	rjmp	.+280    	; 0x2292 <free+0x126>
    217a:	fc 01       	movw	r30, r24
    217c:	32 97       	sbiw	r30, 0x02	; 2
    217e:	12 82       	std	Z+2, r1	; 0x02
    2180:	13 82       	std	Z+3, r1	; 0x03
    2182:	00 91 cf 20 	lds	r16, 0x20CF
    2186:	10 91 d0 20 	lds	r17, 0x20D0
    218a:	01 15       	cp	r16, r1
    218c:	11 05       	cpc	r17, r1
    218e:	81 f4       	brne	.+32     	; 0x21b0 <free+0x44>
    2190:	20 81       	ld	r18, Z
    2192:	31 81       	ldd	r19, Z+1	; 0x01
    2194:	82 0f       	add	r24, r18
    2196:	93 1f       	adc	r25, r19
    2198:	20 91 cd 20 	lds	r18, 0x20CD
    219c:	30 91 ce 20 	lds	r19, 0x20CE
    21a0:	28 17       	cp	r18, r24
    21a2:	39 07       	cpc	r19, r25
    21a4:	79 f5       	brne	.+94     	; 0x2204 <free+0x98>
    21a6:	e0 93 cd 20 	sts	0x20CD, r30
    21aa:	f0 93 ce 20 	sts	0x20CE, r31
    21ae:	71 c0       	rjmp	.+226    	; 0x2292 <free+0x126>
    21b0:	d8 01       	movw	r26, r16
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	50 e0       	ldi	r21, 0x00	; 0
    21b6:	ae 17       	cp	r26, r30
    21b8:	bf 07       	cpc	r27, r31
    21ba:	50 f4       	brcc	.+20     	; 0x21d0 <free+0x64>
    21bc:	12 96       	adiw	r26, 0x02	; 2
    21be:	2d 91       	ld	r18, X+
    21c0:	3c 91       	ld	r19, X
    21c2:	13 97       	sbiw	r26, 0x03	; 3
    21c4:	ad 01       	movw	r20, r26
    21c6:	21 15       	cp	r18, r1
    21c8:	31 05       	cpc	r19, r1
    21ca:	09 f1       	breq	.+66     	; 0x220e <free+0xa2>
    21cc:	d9 01       	movw	r26, r18
    21ce:	f3 cf       	rjmp	.-26     	; 0x21b6 <free+0x4a>
    21d0:	9d 01       	movw	r18, r26
    21d2:	da 01       	movw	r26, r20
    21d4:	22 83       	std	Z+2, r18	; 0x02
    21d6:	33 83       	std	Z+3, r19	; 0x03
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	86 0f       	add	r24, r22
    21de:	97 1f       	adc	r25, r23
    21e0:	82 17       	cp	r24, r18
    21e2:	93 07       	cpc	r25, r19
    21e4:	69 f4       	brne	.+26     	; 0x2200 <free+0x94>
    21e6:	ec 01       	movw	r28, r24
    21e8:	28 81       	ld	r18, Y
    21ea:	39 81       	ldd	r19, Y+1	; 0x01
    21ec:	26 0f       	add	r18, r22
    21ee:	37 1f       	adc	r19, r23
    21f0:	2e 5f       	subi	r18, 0xFE	; 254
    21f2:	3f 4f       	sbci	r19, 0xFF	; 255
    21f4:	20 83       	st	Z, r18
    21f6:	31 83       	std	Z+1, r19	; 0x01
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	9b 81       	ldd	r25, Y+3	; 0x03
    21fc:	82 83       	std	Z+2, r24	; 0x02
    21fe:	93 83       	std	Z+3, r25	; 0x03
    2200:	45 2b       	or	r20, r21
    2202:	29 f4       	brne	.+10     	; 0x220e <free+0xa2>
    2204:	e0 93 cf 20 	sts	0x20CF, r30
    2208:	f0 93 d0 20 	sts	0x20D0, r31
    220c:	42 c0       	rjmp	.+132    	; 0x2292 <free+0x126>
    220e:	12 96       	adiw	r26, 0x02	; 2
    2210:	ed 93       	st	X+, r30
    2212:	fc 93       	st	X, r31
    2214:	13 97       	sbiw	r26, 0x03	; 3
    2216:	ed 01       	movw	r28, r26
    2218:	49 91       	ld	r20, Y+
    221a:	59 91       	ld	r21, Y+
    221c:	9e 01       	movw	r18, r28
    221e:	24 0f       	add	r18, r20
    2220:	35 1f       	adc	r19, r21
    2222:	e2 17       	cp	r30, r18
    2224:	f3 07       	cpc	r31, r19
    2226:	71 f4       	brne	.+28     	; 0x2244 <free+0xd8>
    2228:	80 81       	ld	r24, Z
    222a:	91 81       	ldd	r25, Z+1	; 0x01
    222c:	84 0f       	add	r24, r20
    222e:	95 1f       	adc	r25, r21
    2230:	02 96       	adiw	r24, 0x02	; 2
    2232:	8d 93       	st	X+, r24
    2234:	9c 93       	st	X, r25
    2236:	11 97       	sbiw	r26, 0x01	; 1
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	12 96       	adiw	r26, 0x02	; 2
    223e:	8d 93       	st	X+, r24
    2240:	9c 93       	st	X, r25
    2242:	13 97       	sbiw	r26, 0x03	; 3
    2244:	e0 e0       	ldi	r30, 0x00	; 0
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	d8 01       	movw	r26, r16
    224a:	12 96       	adiw	r26, 0x02	; 2
    224c:	8d 91       	ld	r24, X+
    224e:	9c 91       	ld	r25, X
    2250:	13 97       	sbiw	r26, 0x03	; 3
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	19 f0       	breq	.+6      	; 0x225c <free+0xf0>
    2256:	f8 01       	movw	r30, r16
    2258:	8c 01       	movw	r16, r24
    225a:	f6 cf       	rjmp	.-20     	; 0x2248 <free+0xdc>
    225c:	8d 91       	ld	r24, X+
    225e:	9c 91       	ld	r25, X
    2260:	98 01       	movw	r18, r16
    2262:	2e 5f       	subi	r18, 0xFE	; 254
    2264:	3f 4f       	sbci	r19, 0xFF	; 255
    2266:	82 0f       	add	r24, r18
    2268:	93 1f       	adc	r25, r19
    226a:	20 91 cd 20 	lds	r18, 0x20CD
    226e:	30 91 ce 20 	lds	r19, 0x20CE
    2272:	28 17       	cp	r18, r24
    2274:	39 07       	cpc	r19, r25
    2276:	69 f4       	brne	.+26     	; 0x2292 <free+0x126>
    2278:	30 97       	sbiw	r30, 0x00	; 0
    227a:	29 f4       	brne	.+10     	; 0x2286 <free+0x11a>
    227c:	10 92 cf 20 	sts	0x20CF, r1
    2280:	10 92 d0 20 	sts	0x20D0, r1
    2284:	02 c0       	rjmp	.+4      	; 0x228a <free+0x11e>
    2286:	12 82       	std	Z+2, r1	; 0x02
    2288:	13 82       	std	Z+3, r1	; 0x03
    228a:	00 93 cd 20 	sts	0x20CD, r16
    228e:	10 93 ce 20 	sts	0x20CE, r17
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	1f 91       	pop	r17
    2298:	0f 91       	pop	r16
    229a:	08 95       	ret

0000229c <strnlen_P>:
    229c:	fc 01       	movw	r30, r24
    229e:	05 90       	lpm	r0, Z+
    22a0:	61 50       	subi	r22, 0x01	; 1
    22a2:	70 40       	sbci	r23, 0x00	; 0
    22a4:	01 10       	cpse	r0, r1
    22a6:	d8 f7       	brcc	.-10     	; 0x229e <strnlen_P+0x2>
    22a8:	80 95       	com	r24
    22aa:	90 95       	com	r25
    22ac:	8e 0f       	add	r24, r30
    22ae:	9f 1f       	adc	r25, r31
    22b0:	08 95       	ret

000022b2 <memset>:
    22b2:	dc 01       	movw	r26, r24
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <memset+0x6>
    22b6:	6d 93       	st	X+, r22
    22b8:	41 50       	subi	r20, 0x01	; 1
    22ba:	50 40       	sbci	r21, 0x00	; 0
    22bc:	e0 f7       	brcc	.-8      	; 0x22b6 <memset+0x4>
    22be:	08 95       	ret

000022c0 <strnlen>:
    22c0:	fc 01       	movw	r30, r24
    22c2:	61 50       	subi	r22, 0x01	; 1
    22c4:	70 40       	sbci	r23, 0x00	; 0
    22c6:	01 90       	ld	r0, Z+
    22c8:	01 10       	cpse	r0, r1
    22ca:	d8 f7       	brcc	.-10     	; 0x22c2 <strnlen+0x2>
    22cc:	80 95       	com	r24
    22ce:	90 95       	com	r25
    22d0:	8e 0f       	add	r24, r30
    22d2:	9f 1f       	adc	r25, r31
    22d4:	08 95       	ret

000022d6 <fputc>:
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	fb 01       	movw	r30, r22
    22e0:	23 81       	ldd	r18, Z+3	; 0x03
    22e2:	21 fd       	sbrc	r18, 1
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <fputc+0x16>
    22e6:	8f ef       	ldi	r24, 0xFF	; 255
    22e8:	9f ef       	ldi	r25, 0xFF	; 255
    22ea:	28 c0       	rjmp	.+80     	; 0x233c <fputc+0x66>
    22ec:	22 ff       	sbrs	r18, 2
    22ee:	16 c0       	rjmp	.+44     	; 0x231c <fputc+0x46>
    22f0:	46 81       	ldd	r20, Z+6	; 0x06
    22f2:	57 81       	ldd	r21, Z+7	; 0x07
    22f4:	24 81       	ldd	r18, Z+4	; 0x04
    22f6:	35 81       	ldd	r19, Z+5	; 0x05
    22f8:	42 17       	cp	r20, r18
    22fa:	53 07       	cpc	r21, r19
    22fc:	44 f4       	brge	.+16     	; 0x230e <fputc+0x38>
    22fe:	a0 81       	ld	r26, Z
    2300:	b1 81       	ldd	r27, Z+1	; 0x01
    2302:	9d 01       	movw	r18, r26
    2304:	2f 5f       	subi	r18, 0xFF	; 255
    2306:	3f 4f       	sbci	r19, 0xFF	; 255
    2308:	20 83       	st	Z, r18
    230a:	31 83       	std	Z+1, r19	; 0x01
    230c:	8c 93       	st	X, r24
    230e:	26 81       	ldd	r18, Z+6	; 0x06
    2310:	37 81       	ldd	r19, Z+7	; 0x07
    2312:	2f 5f       	subi	r18, 0xFF	; 255
    2314:	3f 4f       	sbci	r19, 0xFF	; 255
    2316:	26 83       	std	Z+6, r18	; 0x06
    2318:	37 83       	std	Z+7, r19	; 0x07
    231a:	10 c0       	rjmp	.+32     	; 0x233c <fputc+0x66>
    231c:	eb 01       	movw	r28, r22
    231e:	09 2f       	mov	r16, r25
    2320:	18 2f       	mov	r17, r24
    2322:	00 84       	ldd	r0, Z+8	; 0x08
    2324:	f1 85       	ldd	r31, Z+9	; 0x09
    2326:	e0 2d       	mov	r30, r0
    2328:	09 95       	icall
    232a:	89 2b       	or	r24, r25
    232c:	e1 f6       	brne	.-72     	; 0x22e6 <fputc+0x10>
    232e:	8e 81       	ldd	r24, Y+6	; 0x06
    2330:	9f 81       	ldd	r25, Y+7	; 0x07
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	8e 83       	std	Y+6, r24	; 0x06
    2336:	9f 83       	std	Y+7, r25	; 0x07
    2338:	81 2f       	mov	r24, r17
    233a:	90 2f       	mov	r25, r16
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	08 95       	ret

00002346 <__ultoa_invert>:
    2346:	fa 01       	movw	r30, r20
    2348:	aa 27       	eor	r26, r26
    234a:	28 30       	cpi	r18, 0x08	; 8
    234c:	51 f1       	breq	.+84     	; 0x23a2 <__ultoa_invert+0x5c>
    234e:	20 31       	cpi	r18, 0x10	; 16
    2350:	81 f1       	breq	.+96     	; 0x23b2 <__ultoa_invert+0x6c>
    2352:	e8 94       	clt
    2354:	6f 93       	push	r22
    2356:	6e 7f       	andi	r22, 0xFE	; 254
    2358:	6e 5f       	subi	r22, 0xFE	; 254
    235a:	7f 4f       	sbci	r23, 0xFF	; 255
    235c:	8f 4f       	sbci	r24, 0xFF	; 255
    235e:	9f 4f       	sbci	r25, 0xFF	; 255
    2360:	af 4f       	sbci	r26, 0xFF	; 255
    2362:	b1 e0       	ldi	r27, 0x01	; 1
    2364:	3e d0       	rcall	.+124    	; 0x23e2 <__ultoa_invert+0x9c>
    2366:	b4 e0       	ldi	r27, 0x04	; 4
    2368:	3c d0       	rcall	.+120    	; 0x23e2 <__ultoa_invert+0x9c>
    236a:	67 0f       	add	r22, r23
    236c:	78 1f       	adc	r23, r24
    236e:	89 1f       	adc	r24, r25
    2370:	9a 1f       	adc	r25, r26
    2372:	a1 1d       	adc	r26, r1
    2374:	68 0f       	add	r22, r24
    2376:	79 1f       	adc	r23, r25
    2378:	8a 1f       	adc	r24, r26
    237a:	91 1d       	adc	r25, r1
    237c:	a1 1d       	adc	r26, r1
    237e:	6a 0f       	add	r22, r26
    2380:	71 1d       	adc	r23, r1
    2382:	81 1d       	adc	r24, r1
    2384:	91 1d       	adc	r25, r1
    2386:	a1 1d       	adc	r26, r1
    2388:	20 d0       	rcall	.+64     	; 0x23ca <__ultoa_invert+0x84>
    238a:	09 f4       	brne	.+2      	; 0x238e <__ultoa_invert+0x48>
    238c:	68 94       	set
    238e:	3f 91       	pop	r19
    2390:	2a e0       	ldi	r18, 0x0A	; 10
    2392:	26 9f       	mul	r18, r22
    2394:	11 24       	eor	r1, r1
    2396:	30 19       	sub	r19, r0
    2398:	30 5d       	subi	r19, 0xD0	; 208
    239a:	31 93       	st	Z+, r19
    239c:	de f6       	brtc	.-74     	; 0x2354 <__ultoa_invert+0xe>
    239e:	cf 01       	movw	r24, r30
    23a0:	08 95       	ret
    23a2:	46 2f       	mov	r20, r22
    23a4:	47 70       	andi	r20, 0x07	; 7
    23a6:	40 5d       	subi	r20, 0xD0	; 208
    23a8:	41 93       	st	Z+, r20
    23aa:	b3 e0       	ldi	r27, 0x03	; 3
    23ac:	0f d0       	rcall	.+30     	; 0x23cc <__ultoa_invert+0x86>
    23ae:	c9 f7       	brne	.-14     	; 0x23a2 <__ultoa_invert+0x5c>
    23b0:	f6 cf       	rjmp	.-20     	; 0x239e <__ultoa_invert+0x58>
    23b2:	46 2f       	mov	r20, r22
    23b4:	4f 70       	andi	r20, 0x0F	; 15
    23b6:	40 5d       	subi	r20, 0xD0	; 208
    23b8:	4a 33       	cpi	r20, 0x3A	; 58
    23ba:	18 f0       	brcs	.+6      	; 0x23c2 <__ultoa_invert+0x7c>
    23bc:	49 5d       	subi	r20, 0xD9	; 217
    23be:	31 fd       	sbrc	r19, 1
    23c0:	40 52       	subi	r20, 0x20	; 32
    23c2:	41 93       	st	Z+, r20
    23c4:	02 d0       	rcall	.+4      	; 0x23ca <__ultoa_invert+0x84>
    23c6:	a9 f7       	brne	.-22     	; 0x23b2 <__ultoa_invert+0x6c>
    23c8:	ea cf       	rjmp	.-44     	; 0x239e <__ultoa_invert+0x58>
    23ca:	b4 e0       	ldi	r27, 0x04	; 4
    23cc:	a6 95       	lsr	r26
    23ce:	97 95       	ror	r25
    23d0:	87 95       	ror	r24
    23d2:	77 95       	ror	r23
    23d4:	67 95       	ror	r22
    23d6:	ba 95       	dec	r27
    23d8:	c9 f7       	brne	.-14     	; 0x23cc <__ultoa_invert+0x86>
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	61 05       	cpc	r22, r1
    23de:	71 05       	cpc	r23, r1
    23e0:	08 95       	ret
    23e2:	9b 01       	movw	r18, r22
    23e4:	ac 01       	movw	r20, r24
    23e6:	0a 2e       	mov	r0, r26
    23e8:	06 94       	lsr	r0
    23ea:	57 95       	ror	r21
    23ec:	47 95       	ror	r20
    23ee:	37 95       	ror	r19
    23f0:	27 95       	ror	r18
    23f2:	ba 95       	dec	r27
    23f4:	c9 f7       	brne	.-14     	; 0x23e8 <__ultoa_invert+0xa2>
    23f6:	62 0f       	add	r22, r18
    23f8:	73 1f       	adc	r23, r19
    23fa:	84 1f       	adc	r24, r20
    23fc:	95 1f       	adc	r25, r21
    23fe:	a0 1d       	adc	r26, r0
    2400:	08 95       	ret

00002402 <__prologue_saves__>:
    2402:	2f 92       	push	r2
    2404:	3f 92       	push	r3
    2406:	4f 92       	push	r4
    2408:	5f 92       	push	r5
    240a:	6f 92       	push	r6
    240c:	7f 92       	push	r7
    240e:	8f 92       	push	r8
    2410:	9f 92       	push	r9
    2412:	af 92       	push	r10
    2414:	bf 92       	push	r11
    2416:	cf 92       	push	r12
    2418:	df 92       	push	r13
    241a:	ef 92       	push	r14
    241c:	ff 92       	push	r15
    241e:	0f 93       	push	r16
    2420:	1f 93       	push	r17
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	ca 1b       	sub	r28, r26
    242c:	db 0b       	sbc	r29, r27
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	09 94       	ijmp

00002434 <__epilogue_restores__>:
    2434:	2a 88       	ldd	r2, Y+18	; 0x12
    2436:	39 88       	ldd	r3, Y+17	; 0x11
    2438:	48 88       	ldd	r4, Y+16	; 0x10
    243a:	5f 84       	ldd	r5, Y+15	; 0x0f
    243c:	6e 84       	ldd	r6, Y+14	; 0x0e
    243e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2440:	8c 84       	ldd	r8, Y+12	; 0x0c
    2442:	9b 84       	ldd	r9, Y+11	; 0x0b
    2444:	aa 84       	ldd	r10, Y+10	; 0x0a
    2446:	b9 84       	ldd	r11, Y+9	; 0x09
    2448:	c8 84       	ldd	r12, Y+8	; 0x08
    244a:	df 80       	ldd	r13, Y+7	; 0x07
    244c:	ee 80       	ldd	r14, Y+6	; 0x06
    244e:	fd 80       	ldd	r15, Y+5	; 0x05
    2450:	0c 81       	ldd	r16, Y+4	; 0x04
    2452:	1b 81       	ldd	r17, Y+3	; 0x03
    2454:	aa 81       	ldd	r26, Y+2	; 0x02
    2456:	b9 81       	ldd	r27, Y+1	; 0x01
    2458:	ce 0f       	add	r28, r30
    245a:	d1 1d       	adc	r29, r1
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	ed 01       	movw	r28, r26
    2462:	08 95       	ret

00002464 <_exit>:
    2464:	f8 94       	cli

00002466 <__stop_program>:
    2466:	ff cf       	rjmp	.-2      	; 0x2466 <__stop_program>
