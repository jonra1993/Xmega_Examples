
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000105e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  0000105e  000010f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00802008  00802008  000010fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000270  00000000  00000000  00001130  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000067da  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e1c  00000000  00000000  00007b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003e0f  00000000  00000000  00008996  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c2c  00000000  00000000  0000c7a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00023630  00000000  00000000  0000d3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002b32  00000000  00000000  00030a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  00033536  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000088f5  00000000  00000000  0003372e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bb c0       	rjmp	.+374    	; 0x178 <__ctors_end>
       2:	00 00       	nop
       4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
       6:	00 00       	nop
       8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
       a:	00 00       	nop
       c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
       e:	00 00       	nop
      10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
      12:	00 00       	nop
      14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
      16:	00 00       	nop
      18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
      1e:	00 00       	nop
      20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
      22:	00 00       	nop
      24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
      26:	00 00       	nop
      28:	c2 c0       	rjmp	.+388    	; 0x1ae <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
      2e:	00 00       	nop
      30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
      32:	00 00       	nop
      34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
      36:	00 00       	nop
      38:	eb c2       	rjmp	.+1494   	; 0x610 <__vector_14>
      3a:	00 00       	nop
      3c:	12 c3       	rjmp	.+1572   	; 0x662 <__vector_15>
      3e:	00 00       	nop
      40:	39 c3       	rjmp	.+1650   	; 0x6b4 <__vector_16>
      42:	00 00       	nop
      44:	60 c3       	rjmp	.+1728   	; 0x706 <__vector_17>
      46:	00 00       	nop
      48:	87 c3       	rjmp	.+1806   	; 0x758 <__vector_18>
      4a:	00 00       	nop
      4c:	ae c3       	rjmp	.+1884   	; 0x7aa <__vector_19>
      4e:	00 00       	nop
      50:	d5 c3       	rjmp	.+1962   	; 0x7fc <__vector_20>
      52:	00 00       	nop
      54:	fc c3       	rjmp	.+2040   	; 0x84e <__vector_21>
      56:	00 00       	nop
      58:	23 c4       	rjmp	.+2118   	; 0x8a0 <__vector_22>
      5a:	00 00       	nop
      5c:	4a c4       	rjmp	.+2196   	; 0x8f2 <__vector_23>
      5e:	00 00       	nop
      60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
      62:	00 00       	nop
      64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
      66:	00 00       	nop
      68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
      6e:	00 00       	nop
      70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
      72:	00 00       	nop
      74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
      76:	00 00       	nop
      78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
      7a:	00 00       	nop
      7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
      7e:	00 00       	nop
      80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
      82:	00 00       	nop
      84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
      86:	00 00       	nop
      88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
      8a:	00 00       	nop
      8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
      8e:	00 00       	nop
      90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
      92:	00 00       	nop
      94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
      96:	00 00       	nop
      98:	8a c0       	rjmp	.+276    	; 0x1ae <__bad_interrupt>
      9a:	00 00       	nop
      9c:	88 c0       	rjmp	.+272    	; 0x1ae <__bad_interrupt>
      9e:	00 00       	nop
      a0:	86 c0       	rjmp	.+268    	; 0x1ae <__bad_interrupt>
      a2:	00 00       	nop
      a4:	84 c0       	rjmp	.+264    	; 0x1ae <__bad_interrupt>
      a6:	00 00       	nop
      a8:	82 c0       	rjmp	.+260    	; 0x1ae <__bad_interrupt>
      aa:	00 00       	nop
      ac:	80 c0       	rjmp	.+256    	; 0x1ae <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7e c0       	rjmp	.+252    	; 0x1ae <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7c c0       	rjmp	.+248    	; 0x1ae <__bad_interrupt>
      b6:	00 00       	nop
      b8:	7a c0       	rjmp	.+244    	; 0x1ae <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dd c5       	rjmp	.+3002   	; 0xc78 <__vector_47>
      be:	00 00       	nop
      c0:	04 c6       	rjmp	.+3080   	; 0xcca <__vector_48>
      c2:	00 00       	nop
      c4:	2b c6       	rjmp	.+3158   	; 0xd1c <__vector_49>
      c6:	00 00       	nop
      c8:	52 c6       	rjmp	.+3236   	; 0xd6e <__vector_50>
      ca:	00 00       	nop
      cc:	79 c6       	rjmp	.+3314   	; 0xdc0 <__vector_51>
      ce:	00 00       	nop
      d0:	a0 c6       	rjmp	.+3392   	; 0xe12 <__vector_52>
      d2:	00 00       	nop
      d4:	6c c0       	rjmp	.+216    	; 0x1ae <__bad_interrupt>
      d6:	00 00       	nop
      d8:	6a c0       	rjmp	.+212    	; 0x1ae <__bad_interrupt>
      da:	00 00       	nop
      dc:	68 c0       	rjmp	.+208    	; 0x1ae <__bad_interrupt>
      de:	00 00       	nop
      e0:	66 c0       	rjmp	.+204    	; 0x1ae <__bad_interrupt>
      e2:	00 00       	nop
      e4:	64 c0       	rjmp	.+200    	; 0x1ae <__bad_interrupt>
      e6:	00 00       	nop
      e8:	62 c0       	rjmp	.+196    	; 0x1ae <__bad_interrupt>
      ea:	00 00       	nop
      ec:	60 c0       	rjmp	.+192    	; 0x1ae <__bad_interrupt>
      ee:	00 00       	nop
      f0:	5e c0       	rjmp	.+188    	; 0x1ae <__bad_interrupt>
      f2:	00 00       	nop
      f4:	5c c0       	rjmp	.+184    	; 0x1ae <__bad_interrupt>
      f6:	00 00       	nop
      f8:	5a c0       	rjmp	.+180    	; 0x1ae <__bad_interrupt>
      fa:	00 00       	nop
      fc:	58 c0       	rjmp	.+176    	; 0x1ae <__bad_interrupt>
      fe:	00 00       	nop
     100:	56 c0       	rjmp	.+172    	; 0x1ae <__bad_interrupt>
     102:	00 00       	nop
     104:	54 c0       	rjmp	.+168    	; 0x1ae <__bad_interrupt>
     106:	00 00       	nop
     108:	52 c0       	rjmp	.+164    	; 0x1ae <__bad_interrupt>
     10a:	00 00       	nop
     10c:	50 c0       	rjmp	.+160    	; 0x1ae <__bad_interrupt>
     10e:	00 00       	nop
     110:	4e c0       	rjmp	.+156    	; 0x1ae <__bad_interrupt>
     112:	00 00       	nop
     114:	4c c0       	rjmp	.+152    	; 0x1ae <__bad_interrupt>
     116:	00 00       	nop
     118:	4a c0       	rjmp	.+148    	; 0x1ae <__bad_interrupt>
     11a:	00 00       	nop
     11c:	48 c0       	rjmp	.+144    	; 0x1ae <__bad_interrupt>
     11e:	00 00       	nop
     120:	46 c0       	rjmp	.+140    	; 0x1ae <__bad_interrupt>
     122:	00 00       	nop
     124:	44 c0       	rjmp	.+136    	; 0x1ae <__bad_interrupt>
     126:	00 00       	nop
     128:	42 c0       	rjmp	.+132    	; 0x1ae <__bad_interrupt>
     12a:	00 00       	nop
     12c:	40 c0       	rjmp	.+128    	; 0x1ae <__bad_interrupt>
     12e:	00 00       	nop
     130:	3e c0       	rjmp	.+124    	; 0x1ae <__bad_interrupt>
     132:	00 00       	nop
     134:	07 c4       	rjmp	.+2062   	; 0x944 <__vector_77>
     136:	00 00       	nop
     138:	2e c4       	rjmp	.+2140   	; 0x996 <__vector_78>
     13a:	00 00       	nop
     13c:	55 c4       	rjmp	.+2218   	; 0x9e8 <__vector_79>
     13e:	00 00       	nop
     140:	7c c4       	rjmp	.+2296   	; 0xa3a <__vector_80>
     142:	00 00       	nop
     144:	a3 c4       	rjmp	.+2374   	; 0xa8c <__vector_81>
     146:	00 00       	nop
     148:	ca c4       	rjmp	.+2452   	; 0xade <__vector_82>
     14a:	00 00       	nop
     14c:	f1 c4       	rjmp	.+2530   	; 0xb30 <__vector_83>
     14e:	00 00       	nop
     150:	18 c5       	rjmp	.+2608   	; 0xb82 <__vector_84>
     152:	00 00       	nop
     154:	3f c5       	rjmp	.+2686   	; 0xbd4 <__vector_85>
     156:	00 00       	nop
     158:	66 c5       	rjmp	.+2764   	; 0xc26 <__vector_86>
     15a:	00 00       	nop
     15c:	28 c0       	rjmp	.+80     	; 0x1ae <__bad_interrupt>
     15e:	00 00       	nop
     160:	d7 c6       	rjmp	.+3502   	; 0xf10 <__vector_88>
     162:	00 00       	nop
     164:	24 c0       	rjmp	.+72     	; 0x1ae <__bad_interrupt>
     166:	00 00       	nop
     168:	22 c0       	rjmp	.+68     	; 0x1ae <__bad_interrupt>
     16a:	00 00       	nop
     16c:	20 c0       	rjmp	.+64     	; 0x1ae <__bad_interrupt>
     16e:	00 00       	nop
     170:	1e c0       	rjmp	.+60     	; 0x1ae <__bad_interrupt>
     172:	00 00       	nop
     174:	1c c0       	rjmp	.+56     	; 0x1ae <__bad_interrupt>
	...

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	cd bf       	out	0x3d, r28	; 61
     180:	df e2       	ldi	r29, 0x2F	; 47
     182:	de bf       	out	0x3e, r29	; 62

00000184 <__do_copy_data>:
     184:	10 e2       	ldi	r17, 0x20	; 32
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	ee e5       	ldi	r30, 0x5E	; 94
     18c:	f0 e1       	ldi	r31, 0x10	; 16
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a8 30       	cpi	r26, 0x08	; 8
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	20 e2       	ldi	r18, 0x20	; 32
     19c:	a8 e0       	ldi	r26, 0x08	; 8
     19e:	b0 e2       	ldi	r27, 0x20	; 32
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	ad 33       	cpi	r26, 0x3D	; 61
     1a6:	b2 07       	cpc	r27, r18
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	ee d6       	rcall	.+3548   	; 0xf88 <main>
     1ac:	56 c7       	rjmp	.+3756   	; 0x105a <_exit>

000001ae <__bad_interrupt>:
     1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     1b0:	fc 01       	movw	r30, r24
     1b2:	81 81       	ldd	r24, Z+1	; 0x01
     1b4:	85 ff       	sbrs	r24, 5
     1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <usart_putchar+0x2>
     1b8:	60 83       	st	Z, r22
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	08 95       	ret

000001c0 <usart_getchar>:
     1c0:	fc 01       	movw	r30, r24
     1c2:	81 81       	ldd	r24, Z+1	; 0x01
     1c4:	88 23       	and	r24, r24
     1c6:	ec f7       	brge	.-6      	; 0x1c2 <usart_getchar+0x2>
     1c8:	80 81       	ld	r24, Z
     1ca:	08 95       	ret

000001cc <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     1cc:	4f 92       	push	r4
     1ce:	5f 92       	push	r5
     1d0:	6f 92       	push	r6
     1d2:	7f 92       	push	r7
     1d4:	8f 92       	push	r8
     1d6:	9f 92       	push	r9
     1d8:	af 92       	push	r10
     1da:	bf 92       	push	r11
     1dc:	cf 92       	push	r12
     1de:	df 92       	push	r13
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	ec 01       	movw	r28, r24
     1ee:	4a 01       	movw	r8, r20
     1f0:	5b 01       	movw	r10, r22
     1f2:	28 01       	movw	r4, r16
     1f4:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     1f6:	d9 01       	movw	r26, r18
     1f8:	c8 01       	movw	r24, r16
     1fa:	68 94       	set
     1fc:	12 f8       	bld	r1, 2
     1fe:	b6 95       	lsr	r27
     200:	a7 95       	ror	r26
     202:	97 95       	ror	r25
     204:	87 95       	ror	r24
     206:	16 94       	lsr	r1
     208:	d1 f7       	brne	.-12     	; 0x1fe <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     20a:	b9 01       	movw	r22, r18
     20c:	a8 01       	movw	r20, r16
     20e:	03 2e       	mov	r0, r19
     210:	36 e1       	ldi	r19, 0x16	; 22
     212:	76 95       	lsr	r23
     214:	67 95       	ror	r22
     216:	57 95       	ror	r21
     218:	47 95       	ror	r20
     21a:	3a 95       	dec	r19
     21c:	d1 f7       	brne	.-12     	; 0x212 <usart_set_baudrate+0x46>
     21e:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     220:	2c 81       	ldd	r18, Y+4	; 0x04
     222:	22 fd       	sbrc	r18, 2
     224:	08 c0       	rjmp	.+16     	; 0x236 <usart_set_baudrate+0x6a>
		max_rate /= 2;
     226:	b6 95       	lsr	r27
     228:	a7 95       	ror	r26
     22a:	97 95       	ror	r25
     22c:	87 95       	ror	r24
		min_rate /= 2;
     22e:	76 95       	lsr	r23
     230:	67 95       	ror	r22
     232:	57 95       	ror	r21
     234:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     236:	88 15       	cp	r24, r8
     238:	99 05       	cpc	r25, r9
     23a:	aa 05       	cpc	r26, r10
     23c:	bb 05       	cpc	r27, r11
     23e:	08 f4       	brcc	.+2      	; 0x242 <usart_set_baudrate+0x76>
     240:	a2 c0       	rjmp	.+324    	; 0x386 <usart_set_baudrate+0x1ba>
     242:	84 16       	cp	r8, r20
     244:	95 06       	cpc	r9, r21
     246:	a6 06       	cpc	r10, r22
     248:	b7 06       	cpc	r11, r23
     24a:	08 f4       	brcc	.+2      	; 0x24e <usart_set_baudrate+0x82>
     24c:	9e c0       	rjmp	.+316    	; 0x38a <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     24e:	8c 81       	ldd	r24, Y+4	; 0x04
     250:	82 fd       	sbrc	r24, 2
     252:	04 c0       	rjmp	.+8      	; 0x25c <usart_set_baudrate+0x90>
		baud *= 2;
     254:	88 0c       	add	r8, r8
     256:	99 1c       	adc	r9, r9
     258:	aa 1c       	adc	r10, r10
     25a:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     25c:	c3 01       	movw	r24, r6
     25e:	b2 01       	movw	r22, r4
     260:	a5 01       	movw	r20, r10
     262:	94 01       	movw	r18, r8
     264:	d8 d6       	rcall	.+3504   	; 0x1016 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     266:	2f 3f       	cpi	r18, 0xFF	; 255
     268:	31 05       	cpc	r19, r1
     26a:	41 05       	cpc	r20, r1
     26c:	51 05       	cpc	r21, r1
     26e:	08 f4       	brcc	.+2      	; 0x272 <usart_set_baudrate+0xa6>
     270:	8e c0       	rjmp	.+284    	; 0x38e <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     272:	c1 2c       	mov	r12, r1
     274:	d1 2c       	mov	r13, r1
     276:	76 01       	movw	r14, r12
     278:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     27a:	19 ef       	ldi	r17, 0xF9	; 249
     27c:	05 c0       	rjmp	.+10     	; 0x288 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
     27e:	2c 15       	cp	r18, r12
     280:	3d 05       	cpc	r19, r13
     282:	4e 05       	cpc	r20, r14
     284:	5f 05       	cpc	r21, r15
     286:	68 f0       	brcs	.+26     	; 0x2a2 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
     288:	cc 0c       	add	r12, r12
     28a:	dd 1c       	adc	r13, r13
     28c:	ee 1c       	adc	r14, r14
     28e:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     290:	1d 3f       	cpi	r17, 0xFD	; 253
     292:	14 f4       	brge	.+4      	; 0x298 <usart_set_baudrate+0xcc>
			limit |= 1;
     294:	68 94       	set
     296:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     298:	1f 5f       	subi	r17, 0xFF	; 255
     29a:	17 30       	cpi	r17, 0x07	; 7
     29c:	81 f7       	brne	.-32     	; 0x27e <usart_set_baudrate+0xb2>
     29e:	21 2f       	mov	r18, r17
     2a0:	4e c0       	rjmp	.+156    	; 0x33e <usart_set_baudrate+0x172>
     2a2:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     2a4:	11 23       	and	r17, r17
     2a6:	0c f0       	brlt	.+2      	; 0x2aa <usart_set_baudrate+0xde>
     2a8:	4a c0       	rjmp	.+148    	; 0x33e <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     2aa:	d5 01       	movw	r26, r10
     2ac:	c4 01       	movw	r24, r8
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	aa 1f       	adc	r26, r26
     2b4:	bb 1f       	adc	r27, r27
     2b6:	88 0f       	add	r24, r24
     2b8:	99 1f       	adc	r25, r25
     2ba:	aa 1f       	adc	r26, r26
     2bc:	bb 1f       	adc	r27, r27
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	aa 1f       	adc	r26, r26
     2c4:	bb 1f       	adc	r27, r27
     2c6:	48 1a       	sub	r4, r24
     2c8:	59 0a       	sbc	r5, r25
     2ca:	6a 0a       	sbc	r6, r26
     2cc:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     2ce:	1e 3f       	cpi	r17, 0xFE	; 254
     2d0:	ec f4       	brge	.+58     	; 0x30c <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     2d2:	6d ef       	ldi	r22, 0xFD	; 253
     2d4:	7f ef       	ldi	r23, 0xFF	; 255
     2d6:	61 1b       	sub	r22, r17
     2d8:	71 09       	sbc	r23, r1
     2da:	17 fd       	sbrc	r17, 7
     2dc:	73 95       	inc	r23
     2de:	04 c0       	rjmp	.+8      	; 0x2e8 <usart_set_baudrate+0x11c>
     2e0:	44 0c       	add	r4, r4
     2e2:	55 1c       	adc	r5, r5
     2e4:	66 1c       	adc	r6, r6
     2e6:	77 1c       	adc	r7, r7
     2e8:	6a 95       	dec	r22
     2ea:	d2 f7       	brpl	.-12     	; 0x2e0 <usart_set_baudrate+0x114>
     2ec:	d5 01       	movw	r26, r10
     2ee:	c4 01       	movw	r24, r8
     2f0:	b6 95       	lsr	r27
     2f2:	a7 95       	ror	r26
     2f4:	97 95       	ror	r25
     2f6:	87 95       	ror	r24
     2f8:	bc 01       	movw	r22, r24
     2fa:	cd 01       	movw	r24, r26
     2fc:	64 0d       	add	r22, r4
     2fe:	75 1d       	adc	r23, r5
     300:	86 1d       	adc	r24, r6
     302:	97 1d       	adc	r25, r7
     304:	a5 01       	movw	r20, r10
     306:	94 01       	movw	r18, r8
     308:	86 d6       	rcall	.+3340   	; 0x1016 <__udivmodsi4>
     30a:	34 c0       	rjmp	.+104    	; 0x374 <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
     30c:	23 e0       	ldi	r18, 0x03	; 3
     30e:	21 0f       	add	r18, r17
     310:	d5 01       	movw	r26, r10
     312:	c4 01       	movw	r24, r8
     314:	04 c0       	rjmp	.+8      	; 0x31e <usart_set_baudrate+0x152>
     316:	88 0f       	add	r24, r24
     318:	99 1f       	adc	r25, r25
     31a:	aa 1f       	adc	r26, r26
     31c:	bb 1f       	adc	r27, r27
     31e:	2a 95       	dec	r18
     320:	d2 f7       	brpl	.-12     	; 0x316 <usart_set_baudrate+0x14a>
     322:	9c 01       	movw	r18, r24
     324:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     326:	b6 95       	lsr	r27
     328:	a7 95       	ror	r26
     32a:	97 95       	ror	r25
     32c:	87 95       	ror	r24
     32e:	bc 01       	movw	r22, r24
     330:	cd 01       	movw	r24, r26
     332:	64 0d       	add	r22, r4
     334:	75 1d       	adc	r23, r5
     336:	86 1d       	adc	r24, r6
     338:	97 1d       	adc	r25, r7
     33a:	6d d6       	rcall	.+3290   	; 0x1016 <__udivmodsi4>
     33c:	1b c0       	rjmp	.+54     	; 0x374 <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     33e:	2d 5f       	subi	r18, 0xFD	; 253
     340:	d5 01       	movw	r26, r10
     342:	c4 01       	movw	r24, r8
     344:	04 c0       	rjmp	.+8      	; 0x34e <usart_set_baudrate+0x182>
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	aa 1f       	adc	r26, r26
     34c:	bb 1f       	adc	r27, r27
     34e:	2a 95       	dec	r18
     350:	d2 f7       	brpl	.-12     	; 0x346 <usart_set_baudrate+0x17a>
     352:	9c 01       	movw	r18, r24
     354:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     356:	b6 95       	lsr	r27
     358:	a7 95       	ror	r26
     35a:	97 95       	ror	r25
     35c:	87 95       	ror	r24
     35e:	bc 01       	movw	r22, r24
     360:	cd 01       	movw	r24, r26
     362:	64 0d       	add	r22, r4
     364:	75 1d       	adc	r23, r5
     366:	86 1d       	adc	r24, r6
     368:	97 1d       	adc	r25, r7
     36a:	55 d6       	rcall	.+3242   	; 0x1016 <__udivmodsi4>
     36c:	21 50       	subi	r18, 0x01	; 1
     36e:	31 09       	sbc	r19, r1
     370:	41 09       	sbc	r20, r1
     372:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     374:	83 2f       	mov	r24, r19
     376:	8f 70       	andi	r24, 0x0F	; 15
     378:	12 95       	swap	r17
     37a:	10 7f       	andi	r17, 0xF0	; 240
     37c:	18 2b       	or	r17, r24
     37e:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     380:	2e 83       	std	Y+6, r18	; 0x06

	return true;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	18 c0       	rjmp	.+48     	; 0x3b6 <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	16 c0       	rjmp	.+44     	; 0x3b6 <usart_set_baudrate+0x1ea>
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	14 c0       	rjmp	.+40     	; 0x3b6 <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     38e:	d5 01       	movw	r26, r10
     390:	c4 01       	movw	r24, r8
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	aa 1f       	adc	r26, r26
     398:	bb 1f       	adc	r27, r27
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	aa 1f       	adc	r26, r26
     3a0:	bb 1f       	adc	r27, r27
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	aa 1f       	adc	r26, r26
     3a8:	bb 1f       	adc	r27, r27
     3aa:	48 1a       	sub	r4, r24
     3ac:	59 0a       	sbc	r5, r25
     3ae:	6a 0a       	sbc	r6, r26
     3b0:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     3b2:	19 ef       	ldi	r17, 0xF9	; 249
     3b4:	8e cf       	rjmp	.-228    	; 0x2d2 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	7f 90       	pop	r7
     3d0:	6f 90       	pop	r6
     3d2:	5f 90       	pop	r5
     3d4:	4f 90       	pop	r4
     3d6:	08 95       	ret

000003d8 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	ec 01       	movw	r28, r24
     3e2:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     3e4:	00 97       	sbiw	r24, 0x00	; 0
     3e6:	09 f4       	brne	.+2      	; 0x3ea <usart_init_rs232+0x12>
     3e8:	be c0       	rjmp	.+380    	; 0x566 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     3ea:	80 3c       	cpi	r24, 0xC0	; 192
     3ec:	91 05       	cpc	r25, r1
     3ee:	21 f4       	brne	.+8      	; 0x3f8 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     3f0:	60 e1       	ldi	r22, 0x10	; 16
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	01 d1       	rcall	.+514    	; 0x5f8 <sysclk_enable_module>
     3f6:	b7 c0       	rjmp	.+366    	; 0x566 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     3f8:	c1 15       	cp	r28, r1
     3fa:	84 e0       	ldi	r24, 0x04	; 4
     3fc:	d8 07       	cpc	r29, r24
     3fe:	21 f4       	brne	.+8      	; 0x408 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     400:	64 e0       	ldi	r22, 0x04	; 4
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	f9 d0       	rcall	.+498    	; 0x5f8 <sysclk_enable_module>
     406:	af c0       	rjmp	.+350    	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     408:	c0 38       	cpi	r28, 0x80	; 128
     40a:	e1 e0       	ldi	r30, 0x01	; 1
     40c:	de 07       	cpc	r29, r30
     40e:	21 f4       	brne	.+8      	; 0x418 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     410:	62 e0       	ldi	r22, 0x02	; 2
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	f1 d0       	rcall	.+482    	; 0x5f8 <sysclk_enable_module>
     416:	a7 c0       	rjmp	.+334    	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     418:	c1 15       	cp	r28, r1
     41a:	f1 e0       	ldi	r31, 0x01	; 1
     41c:	df 07       	cpc	r29, r31
     41e:	21 f4       	brne	.+8      	; 0x428 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     420:	61 e0       	ldi	r22, 0x01	; 1
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	e9 d0       	rcall	.+466    	; 0x5f8 <sysclk_enable_module>
     426:	9f c0       	rjmp	.+318    	; 0x566 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     428:	c0 38       	cpi	r28, 0x80	; 128
     42a:	83 e0       	ldi	r24, 0x03	; 3
     42c:	d8 07       	cpc	r29, r24
     42e:	21 f4       	brne	.+8      	; 0x438 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     430:	61 e0       	ldi	r22, 0x01	; 1
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	e1 d0       	rcall	.+450    	; 0x5f8 <sysclk_enable_module>
     436:	97 c0       	rjmp	.+302    	; 0x566 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     438:	c1 15       	cp	r28, r1
     43a:	e2 e0       	ldi	r30, 0x02	; 2
     43c:	de 07       	cpc	r29, r30
     43e:	21 f4       	brne	.+8      	; 0x448 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     440:	62 e0       	ldi	r22, 0x02	; 2
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	d9 d0       	rcall	.+434    	; 0x5f8 <sysclk_enable_module>
     446:	8f c0       	rjmp	.+286    	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     448:	c0 32       	cpi	r28, 0x20	; 32
     44a:	f3 e0       	ldi	r31, 0x03	; 3
     44c:	df 07       	cpc	r29, r31
     44e:	21 f4       	brne	.+8      	; 0x458 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     450:	64 e0       	ldi	r22, 0x04	; 4
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	d1 d0       	rcall	.+418    	; 0x5f8 <sysclk_enable_module>
     456:	87 c0       	rjmp	.+270    	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     458:	c1 15       	cp	r28, r1
     45a:	88 e0       	ldi	r24, 0x08	; 8
     45c:	d8 07       	cpc	r29, r24
     45e:	21 f4       	brne	.+8      	; 0x468 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	c9 d0       	rcall	.+402    	; 0x5f8 <sysclk_enable_module>
     466:	7f c0       	rjmp	.+254    	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     468:	c1 15       	cp	r28, r1
     46a:	e9 e0       	ldi	r30, 0x09	; 9
     46c:	de 07       	cpc	r29, r30
     46e:	21 f4       	brne	.+8      	; 0x478 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	c1 d0       	rcall	.+386    	; 0x5f8 <sysclk_enable_module>
     476:	77 c0       	rjmp	.+238    	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     478:	c1 15       	cp	r28, r1
     47a:	fa e0       	ldi	r31, 0x0A	; 10
     47c:	df 07       	cpc	r29, r31
     47e:	21 f4       	brne	.+8      	; 0x488 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     480:	61 e0       	ldi	r22, 0x01	; 1
     482:	85 e0       	ldi	r24, 0x05	; 5
     484:	b9 d0       	rcall	.+370    	; 0x5f8 <sysclk_enable_module>
     486:	6f c0       	rjmp	.+222    	; 0x566 <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     488:	c0 34       	cpi	r28, 0x40	; 64
     48a:	88 e0       	ldi	r24, 0x08	; 8
     48c:	d8 07       	cpc	r29, r24
     48e:	21 f4       	brne	.+8      	; 0x498 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     490:	62 e0       	ldi	r22, 0x02	; 2
     492:	83 e0       	ldi	r24, 0x03	; 3
     494:	b1 d0       	rcall	.+354    	; 0x5f8 <sysclk_enable_module>
     496:	67 c0       	rjmp	.+206    	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     498:	c0 34       	cpi	r28, 0x40	; 64
     49a:	e9 e0       	ldi	r30, 0x09	; 9
     49c:	de 07       	cpc	r29, r30
     49e:	21 f4       	brne	.+8      	; 0x4a8 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     4a0:	62 e0       	ldi	r22, 0x02	; 2
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	a9 d0       	rcall	.+338    	; 0x5f8 <sysclk_enable_module>
     4a6:	5f c0       	rjmp	.+190    	; 0x566 <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     4a8:	c0 39       	cpi	r28, 0x90	; 144
     4aa:	f8 e0       	ldi	r31, 0x08	; 8
     4ac:	df 07       	cpc	r29, r31
     4ae:	21 f4       	brne	.+8      	; 0x4b8 <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     4b0:	64 e0       	ldi	r22, 0x04	; 4
     4b2:	83 e0       	ldi	r24, 0x03	; 3
     4b4:	a1 d0       	rcall	.+322    	; 0x5f8 <sysclk_enable_module>
     4b6:	57 c0       	rjmp	.+174    	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     4b8:	c0 39       	cpi	r28, 0x90	; 144
     4ba:	89 e0       	ldi	r24, 0x09	; 9
     4bc:	d8 07       	cpc	r29, r24
     4be:	21 f4       	brne	.+8      	; 0x4c8 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     4c0:	64 e0       	ldi	r22, 0x04	; 4
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	99 d0       	rcall	.+306    	; 0x5f8 <sysclk_enable_module>
     4c6:	4f c0       	rjmp	.+158    	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     4c8:	c0 39       	cpi	r28, 0x90	; 144
     4ca:	ea e0       	ldi	r30, 0x0A	; 10
     4cc:	de 07       	cpc	r29, r30
     4ce:	21 f4       	brne	.+8      	; 0x4d8 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     4d0:	64 e0       	ldi	r22, 0x04	; 4
     4d2:	85 e0       	ldi	r24, 0x05	; 5
     4d4:	91 d0       	rcall	.+290    	; 0x5f8 <sysclk_enable_module>
     4d6:	47 c0       	rjmp	.+142    	; 0x566 <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     4d8:	c0 3c       	cpi	r28, 0xC0	; 192
     4da:	f8 e0       	ldi	r31, 0x08	; 8
     4dc:	df 07       	cpc	r29, r31
     4de:	21 f4       	brne	.+8      	; 0x4e8 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	89 d0       	rcall	.+274    	; 0x5f8 <sysclk_enable_module>
     4e6:	3f c0       	rjmp	.+126    	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     4e8:	c0 3c       	cpi	r28, 0xC0	; 192
     4ea:	89 e0       	ldi	r24, 0x09	; 9
     4ec:	d8 07       	cpc	r29, r24
     4ee:	21 f4       	brne	.+8      	; 0x4f8 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     4f0:	68 e0       	ldi	r22, 0x08	; 8
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	81 d0       	rcall	.+258    	; 0x5f8 <sysclk_enable_module>
     4f6:	37 c0       	rjmp	.+110    	; 0x566 <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     4f8:	c0 3a       	cpi	r28, 0xA0	; 160
     4fa:	e8 e0       	ldi	r30, 0x08	; 8
     4fc:	de 07       	cpc	r29, r30
     4fe:	21 f4       	brne	.+8      	; 0x508 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     500:	60 e1       	ldi	r22, 0x10	; 16
     502:	83 e0       	ldi	r24, 0x03	; 3
     504:	79 d0       	rcall	.+242    	; 0x5f8 <sysclk_enable_module>
     506:	2f c0       	rjmp	.+94     	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     508:	c0 3a       	cpi	r28, 0xA0	; 160
     50a:	f9 e0       	ldi	r31, 0x09	; 9
     50c:	df 07       	cpc	r29, r31
     50e:	21 f4       	brne	.+8      	; 0x518 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     510:	60 e1       	ldi	r22, 0x10	; 16
     512:	84 e0       	ldi	r24, 0x04	; 4
     514:	71 d0       	rcall	.+226    	; 0x5f8 <sysclk_enable_module>
     516:	27 c0       	rjmp	.+78     	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     518:	c0 3a       	cpi	r28, 0xA0	; 160
     51a:	8a e0       	ldi	r24, 0x0A	; 10
     51c:	d8 07       	cpc	r29, r24
     51e:	21 f4       	brne	.+8      	; 0x528 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     520:	60 e1       	ldi	r22, 0x10	; 16
     522:	85 e0       	ldi	r24, 0x05	; 5
     524:	69 d0       	rcall	.+210    	; 0x5f8 <sysclk_enable_module>
     526:	1f c0       	rjmp	.+62     	; 0x566 <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     528:	c0 3b       	cpi	r28, 0xB0	; 176
     52a:	e8 e0       	ldi	r30, 0x08	; 8
     52c:	de 07       	cpc	r29, r30
     52e:	21 f4       	brne	.+8      	; 0x538 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     530:	60 e2       	ldi	r22, 0x20	; 32
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	61 d0       	rcall	.+194    	; 0x5f8 <sysclk_enable_module>
     536:	17 c0       	rjmp	.+46     	; 0x566 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     538:	c0 3b       	cpi	r28, 0xB0	; 176
     53a:	f9 e0       	ldi	r31, 0x09	; 9
     53c:	df 07       	cpc	r29, r31
     53e:	21 f4       	brne	.+8      	; 0x548 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     540:	60 e2       	ldi	r22, 0x20	; 32
     542:	84 e0       	ldi	r24, 0x04	; 4
     544:	59 d0       	rcall	.+178    	; 0x5f8 <sysclk_enable_module>
     546:	0f c0       	rjmp	.+30     	; 0x566 <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     548:	c0 38       	cpi	r28, 0x80	; 128
     54a:	84 e0       	ldi	r24, 0x04	; 4
     54c:	d8 07       	cpc	r29, r24
     54e:	21 f4       	brne	.+8      	; 0x558 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     550:	60 e4       	ldi	r22, 0x40	; 64
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	51 d0       	rcall	.+162    	; 0x5f8 <sysclk_enable_module>
     556:	07 c0       	rjmp	.+14     	; 0x566 <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     558:	c0 3a       	cpi	r28, 0xA0	; 160
     55a:	e4 e0       	ldi	r30, 0x04	; 4
     55c:	de 07       	cpc	r29, r30
     55e:	19 f4       	brne	.+6      	; 0x566 <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     560:	60 e4       	ldi	r22, 0x40	; 64
     562:	85 e0       	ldi	r24, 0x05	; 5
     564:	49 d0       	rcall	.+146    	; 0x5f8 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     566:	8d 81       	ldd	r24, Y+5	; 0x05
     568:	8f 73       	andi	r24, 0x3F	; 63
     56a:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     56c:	f8 01       	movw	r30, r16
     56e:	94 81       	ldd	r25, Z+4	; 0x04
     570:	85 81       	ldd	r24, Z+5	; 0x05
     572:	89 2b       	or	r24, r25
     574:	96 81       	ldd	r25, Z+6	; 0x06
     576:	99 23       	and	r25, r25
     578:	11 f0       	breq	.+4      	; 0x57e <usart_init_rs232+0x1a6>
     57a:	98 e0       	ldi	r25, 0x08	; 8
     57c:	01 c0       	rjmp	.+2      	; 0x580 <usart_init_rs232+0x1a8>
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	89 2b       	or	r24, r25
     582:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     584:	f8 01       	movw	r30, r16
     586:	40 81       	ld	r20, Z
     588:	51 81       	ldd	r21, Z+1	; 0x01
     58a:	62 81       	ldd	r22, Z+2	; 0x02
     58c:	73 81       	ldd	r23, Z+3	; 0x03
     58e:	00 e0       	ldi	r16, 0x00	; 0
     590:	18 e4       	ldi	r17, 0x48	; 72
     592:	28 ee       	ldi	r18, 0xE8	; 232
     594:	31 e0       	ldi	r19, 0x01	; 1
     596:	ce 01       	movw	r24, r28
     598:	19 de       	rcall	.-974    	; 0x1cc <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     59a:	9c 81       	ldd	r25, Y+4	; 0x04
     59c:	98 60       	ori	r25, 0x08	; 8
     59e:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     5a0:	9c 81       	ldd	r25, Y+4	; 0x04
     5a2:	90 61       	ori	r25, 0x10	; 16
     5a4:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	08 95       	ret

000005b0 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     5b0:	8f ef       	ldi	r24, 0xFF	; 255
     5b2:	80 93 70 00 	sts	0x0070, r24
     5b6:	80 93 71 00 	sts	0x0071, r24
     5ba:	80 93 72 00 	sts	0x0072, r24
     5be:	80 93 73 00 	sts	0x0073, r24
     5c2:	80 93 74 00 	sts	0x0074, r24
     5c6:	80 93 75 00 	sts	0x0075, r24
     5ca:	80 93 76 00 	sts	0x0076, r24

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     5ce:	e0 e5       	ldi	r30, 0x50	; 80
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	81 81       	ldd	r24, Z+1	; 0x01

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
     5d4:	84 fd       	sbrc	r24, 4
     5d6:	0b c0       	rjmp	.+22     	; 0x5ee <sysclk_init+0x3e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     5d8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     5da:	f8 94       	cli
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
     5dc:	90 e1       	ldi	r25, 0x10	; 16
     5de:	95 83       	std	Z+5, r25	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
     5e0:	90 81       	ld	r25, Z
     5e2:	90 61       	ori	r25, 0x10	; 16
     5e4:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5e6:	8f bf       	out	0x3f, r24	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     5e8:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
     5ea:	84 ff       	sbrs	r24, 4
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <sysclk_init+0x38>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     5ee:	64 e0       	ldi	r22, 0x04	; 4
     5f0:	80 e4       	ldi	r24, 0x40	; 64
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	77 c4       	rjmp	.+2286   	; 0xee4 <ccp_write_io>
     5f6:	08 95       	ret

000005f8 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     5f8:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     5fa:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     5fc:	e8 2f       	mov	r30, r24
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	e0 59       	subi	r30, 0x90	; 144
     602:	ff 4f       	sbci	r31, 0xFF	; 255
     604:	60 95       	com	r22
     606:	80 81       	ld	r24, Z
     608:	68 23       	and	r22, r24
     60a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     60c:	9f bf       	out	0x3f, r25	; 63
     60e:	08 95       	ret

00000610 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     610:	1f 92       	push	r1
     612:	0f 92       	push	r0
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	0f 92       	push	r0
     618:	11 24       	eor	r1, r1
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     632:	e0 91 3a 20 	lds	r30, 0x203A
     636:	f0 91 3b 20 	lds	r31, 0x203B
     63a:	30 97       	sbiw	r30, 0x00	; 0
     63c:	09 f0       	breq	.+2      	; 0x640 <__vector_14+0x30>
		tc_tcc0_ovf_callback();
     63e:	09 95       	icall
	}
}
     640:	ff 91       	pop	r31
     642:	ef 91       	pop	r30
     644:	bf 91       	pop	r27
     646:	af 91       	pop	r26
     648:	9f 91       	pop	r25
     64a:	8f 91       	pop	r24
     64c:	7f 91       	pop	r23
     64e:	6f 91       	pop	r22
     650:	5f 91       	pop	r21
     652:	4f 91       	pop	r20
     654:	3f 91       	pop	r19
     656:	2f 91       	pop	r18
     658:	0f 90       	pop	r0
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	0f 90       	pop	r0
     65e:	1f 90       	pop	r1
     660:	18 95       	reti

00000662 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     662:	1f 92       	push	r1
     664:	0f 92       	push	r0
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	0f 92       	push	r0
     66a:	11 24       	eor	r1, r1
     66c:	2f 93       	push	r18
     66e:	3f 93       	push	r19
     670:	4f 93       	push	r20
     672:	5f 93       	push	r21
     674:	6f 93       	push	r22
     676:	7f 93       	push	r23
     678:	8f 93       	push	r24
     67a:	9f 93       	push	r25
     67c:	af 93       	push	r26
     67e:	bf 93       	push	r27
     680:	ef 93       	push	r30
     682:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     684:	e0 91 38 20 	lds	r30, 0x2038
     688:	f0 91 39 20 	lds	r31, 0x2039
     68c:	30 97       	sbiw	r30, 0x00	; 0
     68e:	09 f0       	breq	.+2      	; 0x692 <__vector_15+0x30>
		tc_tcc0_err_callback();
     690:	09 95       	icall
	}
}
     692:	ff 91       	pop	r31
     694:	ef 91       	pop	r30
     696:	bf 91       	pop	r27
     698:	af 91       	pop	r26
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	7f 91       	pop	r23
     6a0:	6f 91       	pop	r22
     6a2:	5f 91       	pop	r21
     6a4:	4f 91       	pop	r20
     6a6:	3f 91       	pop	r19
     6a8:	2f 91       	pop	r18
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	0f 90       	pop	r0
     6b0:	1f 90       	pop	r1
     6b2:	18 95       	reti

000006b4 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	2f 93       	push	r18
     6c0:	3f 93       	push	r19
     6c2:	4f 93       	push	r20
     6c4:	5f 93       	push	r21
     6c6:	6f 93       	push	r22
     6c8:	7f 93       	push	r23
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	af 93       	push	r26
     6d0:	bf 93       	push	r27
     6d2:	ef 93       	push	r30
     6d4:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     6d6:	e0 91 36 20 	lds	r30, 0x2036
     6da:	f0 91 37 20 	lds	r31, 0x2037
     6de:	30 97       	sbiw	r30, 0x00	; 0
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <__vector_16+0x30>
		tc_tcc0_cca_callback();
     6e2:	09 95       	icall
	}
}
     6e4:	ff 91       	pop	r31
     6e6:	ef 91       	pop	r30
     6e8:	bf 91       	pop	r27
     6ea:	af 91       	pop	r26
     6ec:	9f 91       	pop	r25
     6ee:	8f 91       	pop	r24
     6f0:	7f 91       	pop	r23
     6f2:	6f 91       	pop	r22
     6f4:	5f 91       	pop	r21
     6f6:	4f 91       	pop	r20
     6f8:	3f 91       	pop	r19
     6fa:	2f 91       	pop	r18
     6fc:	0f 90       	pop	r0
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	0f 90       	pop	r0
     702:	1f 90       	pop	r1
     704:	18 95       	reti

00000706 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     706:	1f 92       	push	r1
     708:	0f 92       	push	r0
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	0f 92       	push	r0
     70e:	11 24       	eor	r1, r1
     710:	2f 93       	push	r18
     712:	3f 93       	push	r19
     714:	4f 93       	push	r20
     716:	5f 93       	push	r21
     718:	6f 93       	push	r22
     71a:	7f 93       	push	r23
     71c:	8f 93       	push	r24
     71e:	9f 93       	push	r25
     720:	af 93       	push	r26
     722:	bf 93       	push	r27
     724:	ef 93       	push	r30
     726:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     728:	e0 91 34 20 	lds	r30, 0x2034
     72c:	f0 91 35 20 	lds	r31, 0x2035
     730:	30 97       	sbiw	r30, 0x00	; 0
     732:	09 f0       	breq	.+2      	; 0x736 <__vector_17+0x30>
		tc_tcc0_ccb_callback();
     734:	09 95       	icall
	}
}
     736:	ff 91       	pop	r31
     738:	ef 91       	pop	r30
     73a:	bf 91       	pop	r27
     73c:	af 91       	pop	r26
     73e:	9f 91       	pop	r25
     740:	8f 91       	pop	r24
     742:	7f 91       	pop	r23
     744:	6f 91       	pop	r22
     746:	5f 91       	pop	r21
     748:	4f 91       	pop	r20
     74a:	3f 91       	pop	r19
     74c:	2f 91       	pop	r18
     74e:	0f 90       	pop	r0
     750:	0f be       	out	0x3f, r0	; 63
     752:	0f 90       	pop	r0
     754:	1f 90       	pop	r1
     756:	18 95       	reti

00000758 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     758:	1f 92       	push	r1
     75a:	0f 92       	push	r0
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	0f 92       	push	r0
     760:	11 24       	eor	r1, r1
     762:	2f 93       	push	r18
     764:	3f 93       	push	r19
     766:	4f 93       	push	r20
     768:	5f 93       	push	r21
     76a:	6f 93       	push	r22
     76c:	7f 93       	push	r23
     76e:	8f 93       	push	r24
     770:	9f 93       	push	r25
     772:	af 93       	push	r26
     774:	bf 93       	push	r27
     776:	ef 93       	push	r30
     778:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     77a:	e0 91 32 20 	lds	r30, 0x2032
     77e:	f0 91 33 20 	lds	r31, 0x2033
     782:	30 97       	sbiw	r30, 0x00	; 0
     784:	09 f0       	breq	.+2      	; 0x788 <__vector_18+0x30>
		tc_tcc0_ccc_callback();
     786:	09 95       	icall
	}
}
     788:	ff 91       	pop	r31
     78a:	ef 91       	pop	r30
     78c:	bf 91       	pop	r27
     78e:	af 91       	pop	r26
     790:	9f 91       	pop	r25
     792:	8f 91       	pop	r24
     794:	7f 91       	pop	r23
     796:	6f 91       	pop	r22
     798:	5f 91       	pop	r21
     79a:	4f 91       	pop	r20
     79c:	3f 91       	pop	r19
     79e:	2f 91       	pop	r18
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	1f 90       	pop	r1
     7a8:	18 95       	reti

000007aa <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     7aa:	1f 92       	push	r1
     7ac:	0f 92       	push	r0
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	0f 92       	push	r0
     7b2:	11 24       	eor	r1, r1
     7b4:	2f 93       	push	r18
     7b6:	3f 93       	push	r19
     7b8:	4f 93       	push	r20
     7ba:	5f 93       	push	r21
     7bc:	6f 93       	push	r22
     7be:	7f 93       	push	r23
     7c0:	8f 93       	push	r24
     7c2:	9f 93       	push	r25
     7c4:	af 93       	push	r26
     7c6:	bf 93       	push	r27
     7c8:	ef 93       	push	r30
     7ca:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     7cc:	e0 91 30 20 	lds	r30, 0x2030
     7d0:	f0 91 31 20 	lds	r31, 0x2031
     7d4:	30 97       	sbiw	r30, 0x00	; 0
     7d6:	09 f0       	breq	.+2      	; 0x7da <__vector_19+0x30>
		tc_tcc0_ccd_callback();
     7d8:	09 95       	icall
	}
}
     7da:	ff 91       	pop	r31
     7dc:	ef 91       	pop	r30
     7de:	bf 91       	pop	r27
     7e0:	af 91       	pop	r26
     7e2:	9f 91       	pop	r25
     7e4:	8f 91       	pop	r24
     7e6:	7f 91       	pop	r23
     7e8:	6f 91       	pop	r22
     7ea:	5f 91       	pop	r21
     7ec:	4f 91       	pop	r20
     7ee:	3f 91       	pop	r19
     7f0:	2f 91       	pop	r18
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	0f 90       	pop	r0
     7f8:	1f 90       	pop	r1
     7fa:	18 95       	reti

000007fc <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	2f 93       	push	r18
     808:	3f 93       	push	r19
     80a:	4f 93       	push	r20
     80c:	5f 93       	push	r21
     80e:	6f 93       	push	r22
     810:	7f 93       	push	r23
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     81e:	e0 91 2e 20 	lds	r30, 0x202E
     822:	f0 91 2f 20 	lds	r31, 0x202F
     826:	30 97       	sbiw	r30, 0x00	; 0
     828:	09 f0       	breq	.+2      	; 0x82c <__vector_20+0x30>
		tc_tcc1_ovf_callback();
     82a:	09 95       	icall
	}
}
     82c:	ff 91       	pop	r31
     82e:	ef 91       	pop	r30
     830:	bf 91       	pop	r27
     832:	af 91       	pop	r26
     834:	9f 91       	pop	r25
     836:	8f 91       	pop	r24
     838:	7f 91       	pop	r23
     83a:	6f 91       	pop	r22
     83c:	5f 91       	pop	r21
     83e:	4f 91       	pop	r20
     840:	3f 91       	pop	r19
     842:	2f 91       	pop	r18
     844:	0f 90       	pop	r0
     846:	0f be       	out	0x3f, r0	; 63
     848:	0f 90       	pop	r0
     84a:	1f 90       	pop	r1
     84c:	18 95       	reti

0000084e <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     84e:	1f 92       	push	r1
     850:	0f 92       	push	r0
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	0f 92       	push	r0
     856:	11 24       	eor	r1, r1
     858:	2f 93       	push	r18
     85a:	3f 93       	push	r19
     85c:	4f 93       	push	r20
     85e:	5f 93       	push	r21
     860:	6f 93       	push	r22
     862:	7f 93       	push	r23
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25
     868:	af 93       	push	r26
     86a:	bf 93       	push	r27
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     870:	e0 91 2c 20 	lds	r30, 0x202C
     874:	f0 91 2d 20 	lds	r31, 0x202D
     878:	30 97       	sbiw	r30, 0x00	; 0
     87a:	09 f0       	breq	.+2      	; 0x87e <__vector_21+0x30>
		tc_tcc1_err_callback();
     87c:	09 95       	icall
	}
}
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	2f 93       	push	r18
     8ac:	3f 93       	push	r19
     8ae:	4f 93       	push	r20
     8b0:	5f 93       	push	r21
     8b2:	6f 93       	push	r22
     8b4:	7f 93       	push	r23
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     8c2:	e0 91 2a 20 	lds	r30, 0x202A
     8c6:	f0 91 2b 20 	lds	r31, 0x202B
     8ca:	30 97       	sbiw	r30, 0x00	; 0
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <__vector_22+0x30>
		tc_tcc1_cca_callback();
     8ce:	09 95       	icall
	}
}
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	bf 91       	pop	r27
     8d6:	af 91       	pop	r26
     8d8:	9f 91       	pop	r25
     8da:	8f 91       	pop	r24
     8dc:	7f 91       	pop	r23
     8de:	6f 91       	pop	r22
     8e0:	5f 91       	pop	r21
     8e2:	4f 91       	pop	r20
     8e4:	3f 91       	pop	r19
     8e6:	2f 91       	pop	r18
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	0f 90       	pop	r0
     8ee:	1f 90       	pop	r1
     8f0:	18 95       	reti

000008f2 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     8f2:	1f 92       	push	r1
     8f4:	0f 92       	push	r0
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	0f 92       	push	r0
     8fa:	11 24       	eor	r1, r1
     8fc:	2f 93       	push	r18
     8fe:	3f 93       	push	r19
     900:	4f 93       	push	r20
     902:	5f 93       	push	r21
     904:	6f 93       	push	r22
     906:	7f 93       	push	r23
     908:	8f 93       	push	r24
     90a:	9f 93       	push	r25
     90c:	af 93       	push	r26
     90e:	bf 93       	push	r27
     910:	ef 93       	push	r30
     912:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     914:	e0 91 28 20 	lds	r30, 0x2028
     918:	f0 91 29 20 	lds	r31, 0x2029
     91c:	30 97       	sbiw	r30, 0x00	; 0
     91e:	09 f0       	breq	.+2      	; 0x922 <__vector_23+0x30>
		tc_tcc1_ccb_callback();
     920:	09 95       	icall
	}
}
     922:	ff 91       	pop	r31
     924:	ef 91       	pop	r30
     926:	bf 91       	pop	r27
     928:	af 91       	pop	r26
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	7f 91       	pop	r23
     930:	6f 91       	pop	r22
     932:	5f 91       	pop	r21
     934:	4f 91       	pop	r20
     936:	3f 91       	pop	r19
     938:	2f 91       	pop	r18
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	2f 93       	push	r18
     950:	3f 93       	push	r19
     952:	4f 93       	push	r20
     954:	5f 93       	push	r21
     956:	6f 93       	push	r22
     958:	7f 93       	push	r23
     95a:	8f 93       	push	r24
     95c:	9f 93       	push	r25
     95e:	af 93       	push	r26
     960:	bf 93       	push	r27
     962:	ef 93       	push	r30
     964:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     966:	e0 91 26 20 	lds	r30, 0x2026
     96a:	f0 91 27 20 	lds	r31, 0x2027
     96e:	30 97       	sbiw	r30, 0x00	; 0
     970:	09 f0       	breq	.+2      	; 0x974 <__vector_77+0x30>
		tc_tcd0_ovf_callback();
     972:	09 95       	icall
	}
}
     974:	ff 91       	pop	r31
     976:	ef 91       	pop	r30
     978:	bf 91       	pop	r27
     97a:	af 91       	pop	r26
     97c:	9f 91       	pop	r25
     97e:	8f 91       	pop	r24
     980:	7f 91       	pop	r23
     982:	6f 91       	pop	r22
     984:	5f 91       	pop	r21
     986:	4f 91       	pop	r20
     988:	3f 91       	pop	r19
     98a:	2f 91       	pop	r18
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
     990:	0f 90       	pop	r0
     992:	1f 90       	pop	r1
     994:	18 95       	reti

00000996 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     996:	1f 92       	push	r1
     998:	0f 92       	push	r0
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	0f 92       	push	r0
     99e:	11 24       	eor	r1, r1
     9a0:	2f 93       	push	r18
     9a2:	3f 93       	push	r19
     9a4:	4f 93       	push	r20
     9a6:	5f 93       	push	r21
     9a8:	6f 93       	push	r22
     9aa:	7f 93       	push	r23
     9ac:	8f 93       	push	r24
     9ae:	9f 93       	push	r25
     9b0:	af 93       	push	r26
     9b2:	bf 93       	push	r27
     9b4:	ef 93       	push	r30
     9b6:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     9b8:	e0 91 24 20 	lds	r30, 0x2024
     9bc:	f0 91 25 20 	lds	r31, 0x2025
     9c0:	30 97       	sbiw	r30, 0x00	; 0
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <__vector_78+0x30>
		tc_tcd0_err_callback();
     9c4:	09 95       	icall
	}
}
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	7f 91       	pop	r23
     9d4:	6f 91       	pop	r22
     9d6:	5f 91       	pop	r21
     9d8:	4f 91       	pop	r20
     9da:	3f 91       	pop	r19
     9dc:	2f 91       	pop	r18
     9de:	0f 90       	pop	r0
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	0f 90       	pop	r0
     9e4:	1f 90       	pop	r1
     9e6:	18 95       	reti

000009e8 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     9e8:	1f 92       	push	r1
     9ea:	0f 92       	push	r0
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	0f 92       	push	r0
     9f0:	11 24       	eor	r1, r1
     9f2:	2f 93       	push	r18
     9f4:	3f 93       	push	r19
     9f6:	4f 93       	push	r20
     9f8:	5f 93       	push	r21
     9fa:	6f 93       	push	r22
     9fc:	7f 93       	push	r23
     9fe:	8f 93       	push	r24
     a00:	9f 93       	push	r25
     a02:	af 93       	push	r26
     a04:	bf 93       	push	r27
     a06:	ef 93       	push	r30
     a08:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     a0a:	e0 91 22 20 	lds	r30, 0x2022
     a0e:	f0 91 23 20 	lds	r31, 0x2023
     a12:	30 97       	sbiw	r30, 0x00	; 0
     a14:	09 f0       	breq	.+2      	; 0xa18 <__vector_79+0x30>
		tc_tcd0_cca_callback();
     a16:	09 95       	icall
	}
}
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	7f 91       	pop	r23
     a26:	6f 91       	pop	r22
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	0f 90       	pop	r0
     a36:	1f 90       	pop	r1
     a38:	18 95       	reti

00000a3a <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     a3a:	1f 92       	push	r1
     a3c:	0f 92       	push	r0
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	0f 92       	push	r0
     a42:	11 24       	eor	r1, r1
     a44:	2f 93       	push	r18
     a46:	3f 93       	push	r19
     a48:	4f 93       	push	r20
     a4a:	5f 93       	push	r21
     a4c:	6f 93       	push	r22
     a4e:	7f 93       	push	r23
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	af 93       	push	r26
     a56:	bf 93       	push	r27
     a58:	ef 93       	push	r30
     a5a:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     a5c:	e0 91 20 20 	lds	r30, 0x2020
     a60:	f0 91 21 20 	lds	r31, 0x2021
     a64:	30 97       	sbiw	r30, 0x00	; 0
     a66:	09 f0       	breq	.+2      	; 0xa6a <__vector_80+0x30>
		tc_tcd0_ccb_callback();
     a68:	09 95       	icall
	}
}
     a6a:	ff 91       	pop	r31
     a6c:	ef 91       	pop	r30
     a6e:	bf 91       	pop	r27
     a70:	af 91       	pop	r26
     a72:	9f 91       	pop	r25
     a74:	8f 91       	pop	r24
     a76:	7f 91       	pop	r23
     a78:	6f 91       	pop	r22
     a7a:	5f 91       	pop	r21
     a7c:	4f 91       	pop	r20
     a7e:	3f 91       	pop	r19
     a80:	2f 91       	pop	r18
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	0f 90       	pop	r0
     a88:	1f 90       	pop	r1
     a8a:	18 95       	reti

00000a8c <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
     a96:	2f 93       	push	r18
     a98:	3f 93       	push	r19
     a9a:	4f 93       	push	r20
     a9c:	5f 93       	push	r21
     a9e:	6f 93       	push	r22
     aa0:	7f 93       	push	r23
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
     aa6:	af 93       	push	r26
     aa8:	bf 93       	push	r27
     aaa:	ef 93       	push	r30
     aac:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     aae:	e0 91 1e 20 	lds	r30, 0x201E
     ab2:	f0 91 1f 20 	lds	r31, 0x201F
     ab6:	30 97       	sbiw	r30, 0x00	; 0
     ab8:	09 f0       	breq	.+2      	; 0xabc <__vector_81+0x30>
		tc_tcd0_ccc_callback();
     aba:	09 95       	icall
	}
}
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	bf 91       	pop	r27
     ac2:	af 91       	pop	r26
     ac4:	9f 91       	pop	r25
     ac6:	8f 91       	pop	r24
     ac8:	7f 91       	pop	r23
     aca:	6f 91       	pop	r22
     acc:	5f 91       	pop	r21
     ace:	4f 91       	pop	r20
     ad0:	3f 91       	pop	r19
     ad2:	2f 91       	pop	r18
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	0f 90       	pop	r0
     ada:	1f 90       	pop	r1
     adc:	18 95       	reti

00000ade <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     ade:	1f 92       	push	r1
     ae0:	0f 92       	push	r0
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	0f 92       	push	r0
     ae6:	11 24       	eor	r1, r1
     ae8:	2f 93       	push	r18
     aea:	3f 93       	push	r19
     aec:	4f 93       	push	r20
     aee:	5f 93       	push	r21
     af0:	6f 93       	push	r22
     af2:	7f 93       	push	r23
     af4:	8f 93       	push	r24
     af6:	9f 93       	push	r25
     af8:	af 93       	push	r26
     afa:	bf 93       	push	r27
     afc:	ef 93       	push	r30
     afe:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     b00:	e0 91 1c 20 	lds	r30, 0x201C
     b04:	f0 91 1d 20 	lds	r31, 0x201D
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	09 f0       	breq	.+2      	; 0xb0e <__vector_82+0x30>
		tc_tcd0_ccd_callback();
     b0c:	09 95       	icall
	}
}
     b0e:	ff 91       	pop	r31
     b10:	ef 91       	pop	r30
     b12:	bf 91       	pop	r27
     b14:	af 91       	pop	r26
     b16:	9f 91       	pop	r25
     b18:	8f 91       	pop	r24
     b1a:	7f 91       	pop	r23
     b1c:	6f 91       	pop	r22
     b1e:	5f 91       	pop	r21
     b20:	4f 91       	pop	r20
     b22:	3f 91       	pop	r19
     b24:	2f 91       	pop	r18
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	0f 90       	pop	r0
     b2c:	1f 90       	pop	r1
     b2e:	18 95       	reti

00000b30 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     b30:	1f 92       	push	r1
     b32:	0f 92       	push	r0
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	0f 92       	push	r0
     b38:	11 24       	eor	r1, r1
     b3a:	2f 93       	push	r18
     b3c:	3f 93       	push	r19
     b3e:	4f 93       	push	r20
     b40:	5f 93       	push	r21
     b42:	6f 93       	push	r22
     b44:	7f 93       	push	r23
     b46:	8f 93       	push	r24
     b48:	9f 93       	push	r25
     b4a:	af 93       	push	r26
     b4c:	bf 93       	push	r27
     b4e:	ef 93       	push	r30
     b50:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     b52:	e0 91 1a 20 	lds	r30, 0x201A
     b56:	f0 91 1b 20 	lds	r31, 0x201B
     b5a:	30 97       	sbiw	r30, 0x00	; 0
     b5c:	09 f0       	breq	.+2      	; 0xb60 <__vector_83+0x30>
		tc_tcd1_ovf_callback();
     b5e:	09 95       	icall
	}
}
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	7f 91       	pop	r23
     b6e:	6f 91       	pop	r22
     b70:	5f 91       	pop	r21
     b72:	4f 91       	pop	r20
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     b82:	1f 92       	push	r1
     b84:	0f 92       	push	r0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	0f 92       	push	r0
     b8a:	11 24       	eor	r1, r1
     b8c:	2f 93       	push	r18
     b8e:	3f 93       	push	r19
     b90:	4f 93       	push	r20
     b92:	5f 93       	push	r21
     b94:	6f 93       	push	r22
     b96:	7f 93       	push	r23
     b98:	8f 93       	push	r24
     b9a:	9f 93       	push	r25
     b9c:	af 93       	push	r26
     b9e:	bf 93       	push	r27
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     ba4:	e0 91 18 20 	lds	r30, 0x2018
     ba8:	f0 91 19 20 	lds	r31, 0x2019
     bac:	30 97       	sbiw	r30, 0x00	; 0
     bae:	09 f0       	breq	.+2      	; 0xbb2 <__vector_84+0x30>
		tc_tcd1_err_callback();
     bb0:	09 95       	icall
	}
}
     bb2:	ff 91       	pop	r31
     bb4:	ef 91       	pop	r30
     bb6:	bf 91       	pop	r27
     bb8:	af 91       	pop	r26
     bba:	9f 91       	pop	r25
     bbc:	8f 91       	pop	r24
     bbe:	7f 91       	pop	r23
     bc0:	6f 91       	pop	r22
     bc2:	5f 91       	pop	r21
     bc4:	4f 91       	pop	r20
     bc6:	3f 91       	pop	r19
     bc8:	2f 91       	pop	r18
     bca:	0f 90       	pop	r0
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	0f 90       	pop	r0
     bd0:	1f 90       	pop	r1
     bd2:	18 95       	reti

00000bd4 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     bd4:	1f 92       	push	r1
     bd6:	0f 92       	push	r0
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	0f 92       	push	r0
     bdc:	11 24       	eor	r1, r1
     bde:	2f 93       	push	r18
     be0:	3f 93       	push	r19
     be2:	4f 93       	push	r20
     be4:	5f 93       	push	r21
     be6:	6f 93       	push	r22
     be8:	7f 93       	push	r23
     bea:	8f 93       	push	r24
     bec:	9f 93       	push	r25
     bee:	af 93       	push	r26
     bf0:	bf 93       	push	r27
     bf2:	ef 93       	push	r30
     bf4:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     bf6:	e0 91 16 20 	lds	r30, 0x2016
     bfa:	f0 91 17 20 	lds	r31, 0x2017
     bfe:	30 97       	sbiw	r30, 0x00	; 0
     c00:	09 f0       	breq	.+2      	; 0xc04 <__vector_85+0x30>
		tc_tcd1_cca_callback();
     c02:	09 95       	icall
	}
}
     c04:	ff 91       	pop	r31
     c06:	ef 91       	pop	r30
     c08:	bf 91       	pop	r27
     c0a:	af 91       	pop	r26
     c0c:	9f 91       	pop	r25
     c0e:	8f 91       	pop	r24
     c10:	7f 91       	pop	r23
     c12:	6f 91       	pop	r22
     c14:	5f 91       	pop	r21
     c16:	4f 91       	pop	r20
     c18:	3f 91       	pop	r19
     c1a:	2f 91       	pop	r18
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     c26:	1f 92       	push	r1
     c28:	0f 92       	push	r0
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	0f 92       	push	r0
     c2e:	11 24       	eor	r1, r1
     c30:	2f 93       	push	r18
     c32:	3f 93       	push	r19
     c34:	4f 93       	push	r20
     c36:	5f 93       	push	r21
     c38:	6f 93       	push	r22
     c3a:	7f 93       	push	r23
     c3c:	8f 93       	push	r24
     c3e:	9f 93       	push	r25
     c40:	af 93       	push	r26
     c42:	bf 93       	push	r27
     c44:	ef 93       	push	r30
     c46:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     c48:	e0 91 14 20 	lds	r30, 0x2014
     c4c:	f0 91 15 20 	lds	r31, 0x2015
     c50:	30 97       	sbiw	r30, 0x00	; 0
     c52:	09 f0       	breq	.+2      	; 0xc56 <__vector_86+0x30>
		tc_tcd1_ccb_callback();
     c54:	09 95       	icall
	}
}
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	bf 91       	pop	r27
     c5c:	af 91       	pop	r26
     c5e:	9f 91       	pop	r25
     c60:	8f 91       	pop	r24
     c62:	7f 91       	pop	r23
     c64:	6f 91       	pop	r22
     c66:	5f 91       	pop	r21
     c68:	4f 91       	pop	r20
     c6a:	3f 91       	pop	r19
     c6c:	2f 91       	pop	r18
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     c78:	1f 92       	push	r1
     c7a:	0f 92       	push	r0
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	0f 92       	push	r0
     c80:	11 24       	eor	r1, r1
     c82:	2f 93       	push	r18
     c84:	3f 93       	push	r19
     c86:	4f 93       	push	r20
     c88:	5f 93       	push	r21
     c8a:	6f 93       	push	r22
     c8c:	7f 93       	push	r23
     c8e:	8f 93       	push	r24
     c90:	9f 93       	push	r25
     c92:	af 93       	push	r26
     c94:	bf 93       	push	r27
     c96:	ef 93       	push	r30
     c98:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     c9a:	e0 91 12 20 	lds	r30, 0x2012
     c9e:	f0 91 13 20 	lds	r31, 0x2013
     ca2:	30 97       	sbiw	r30, 0x00	; 0
     ca4:	09 f0       	breq	.+2      	; 0xca8 <__vector_47+0x30>
		tc_tce0_ovf_callback();
     ca6:	09 95       	icall
	}
}
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	bf 91       	pop	r27
     cae:	af 91       	pop	r26
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	7f 91       	pop	r23
     cb6:	6f 91       	pop	r22
     cb8:	5f 91       	pop	r21
     cba:	4f 91       	pop	r20
     cbc:	3f 91       	pop	r19
     cbe:	2f 91       	pop	r18
     cc0:	0f 90       	pop	r0
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     cec:	e0 91 10 20 	lds	r30, 0x2010
     cf0:	f0 91 11 20 	lds	r31, 0x2011
     cf4:	30 97       	sbiw	r30, 0x00	; 0
     cf6:	09 f0       	breq	.+2      	; 0xcfa <__vector_48+0x30>
		tc_tce0_err_callback();
     cf8:	09 95       	icall
	}
}
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
     cfe:	bf 91       	pop	r27
     d00:	af 91       	pop	r26
     d02:	9f 91       	pop	r25
     d04:	8f 91       	pop	r24
     d06:	7f 91       	pop	r23
     d08:	6f 91       	pop	r22
     d0a:	5f 91       	pop	r21
     d0c:	4f 91       	pop	r20
     d0e:	3f 91       	pop	r19
     d10:	2f 91       	pop	r18
     d12:	0f 90       	pop	r0
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	0f 90       	pop	r0
     d18:	1f 90       	pop	r1
     d1a:	18 95       	reti

00000d1c <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     d1c:	1f 92       	push	r1
     d1e:	0f 92       	push	r0
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	0f 92       	push	r0
     d24:	11 24       	eor	r1, r1
     d26:	2f 93       	push	r18
     d28:	3f 93       	push	r19
     d2a:	4f 93       	push	r20
     d2c:	5f 93       	push	r21
     d2e:	6f 93       	push	r22
     d30:	7f 93       	push	r23
     d32:	8f 93       	push	r24
     d34:	9f 93       	push	r25
     d36:	af 93       	push	r26
     d38:	bf 93       	push	r27
     d3a:	ef 93       	push	r30
     d3c:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     d3e:	e0 91 0e 20 	lds	r30, 0x200E
     d42:	f0 91 0f 20 	lds	r31, 0x200F
     d46:	30 97       	sbiw	r30, 0x00	; 0
     d48:	09 f0       	breq	.+2      	; 0xd4c <__vector_49+0x30>
		tc_tce0_cca_callback();
     d4a:	09 95       	icall
	}
}
     d4c:	ff 91       	pop	r31
     d4e:	ef 91       	pop	r30
     d50:	bf 91       	pop	r27
     d52:	af 91       	pop	r26
     d54:	9f 91       	pop	r25
     d56:	8f 91       	pop	r24
     d58:	7f 91       	pop	r23
     d5a:	6f 91       	pop	r22
     d5c:	5f 91       	pop	r21
     d5e:	4f 91       	pop	r20
     d60:	3f 91       	pop	r19
     d62:	2f 91       	pop	r18
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti

00000d6e <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     d90:	e0 91 0c 20 	lds	r30, 0x200C
     d94:	f0 91 0d 20 	lds	r31, 0x200D
     d98:	30 97       	sbiw	r30, 0x00	; 0
     d9a:	09 f0       	breq	.+2      	; 0xd9e <__vector_50+0x30>
		tc_tce0_ccb_callback();
     d9c:	09 95       	icall
	}
}
     d9e:	ff 91       	pop	r31
     da0:	ef 91       	pop	r30
     da2:	bf 91       	pop	r27
     da4:	af 91       	pop	r26
     da6:	9f 91       	pop	r25
     da8:	8f 91       	pop	r24
     daa:	7f 91       	pop	r23
     dac:	6f 91       	pop	r22
     dae:	5f 91       	pop	r21
     db0:	4f 91       	pop	r20
     db2:	3f 91       	pop	r19
     db4:	2f 91       	pop	r18
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	0f 90       	pop	r0
     dbc:	1f 90       	pop	r1
     dbe:	18 95       	reti

00000dc0 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     de2:	e0 91 0a 20 	lds	r30, 0x200A
     de6:	f0 91 0b 20 	lds	r31, 0x200B
     dea:	30 97       	sbiw	r30, 0x00	; 0
     dec:	09 f0       	breq	.+2      	; 0xdf0 <__vector_51+0x30>
		tc_tce0_ccc_callback();
     dee:	09 95       	icall
	}
}
     df0:	ff 91       	pop	r31
     df2:	ef 91       	pop	r30
     df4:	bf 91       	pop	r27
     df6:	af 91       	pop	r26
     df8:	9f 91       	pop	r25
     dfa:	8f 91       	pop	r24
     dfc:	7f 91       	pop	r23
     dfe:	6f 91       	pop	r22
     e00:	5f 91       	pop	r21
     e02:	4f 91       	pop	r20
     e04:	3f 91       	pop	r19
     e06:	2f 91       	pop	r18
     e08:	0f 90       	pop	r0
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	0f 90       	pop	r0
     e0e:	1f 90       	pop	r1
     e10:	18 95       	reti

00000e12 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     e12:	1f 92       	push	r1
     e14:	0f 92       	push	r0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	0f 92       	push	r0
     e1a:	11 24       	eor	r1, r1
     e1c:	2f 93       	push	r18
     e1e:	3f 93       	push	r19
     e20:	4f 93       	push	r20
     e22:	5f 93       	push	r21
     e24:	6f 93       	push	r22
     e26:	7f 93       	push	r23
     e28:	8f 93       	push	r24
     e2a:	9f 93       	push	r25
     e2c:	af 93       	push	r26
     e2e:	bf 93       	push	r27
     e30:	ef 93       	push	r30
     e32:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     e34:	e0 91 08 20 	lds	r30, 0x2008
     e38:	f0 91 09 20 	lds	r31, 0x2009
     e3c:	30 97       	sbiw	r30, 0x00	; 0
     e3e:	09 f0       	breq	.+2      	; 0xe42 <__vector_52+0x30>
		tc_tce0_ccd_callback();
     e40:	09 95       	icall
	}
}
     e42:	ff 91       	pop	r31
     e44:	ef 91       	pop	r30
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0
     e60:	1f 90       	pop	r1
     e62:	18 95       	reti

00000e64 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
     e64:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     e66:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
     e68:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
     e6a:	28 2f       	mov	r18, r24
     e6c:	39 2f       	mov	r19, r25
     e6e:	21 15       	cp	r18, r1
     e70:	88 e0       	ldi	r24, 0x08	; 8
     e72:	38 07       	cpc	r19, r24
     e74:	39 f4       	brne	.+14     	; 0xe84 <tc_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     e76:	61 e0       	ldi	r22, 0x01	; 1
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	be db       	rcall	.-2180   	; 0x5f8 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     e7c:	64 e0       	ldi	r22, 0x04	; 4
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	bb db       	rcall	.-2186   	; 0x5f8 <sysclk_enable_module>
     e82:	2d c0       	rjmp	.+90     	; 0xede <tc_enable+0x7a>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
     e84:	20 34       	cpi	r18, 0x40	; 64
     e86:	88 e0       	ldi	r24, 0x08	; 8
     e88:	38 07       	cpc	r19, r24
     e8a:	39 f4       	brne	.+14     	; 0xe9a <tc_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     e8c:	62 e0       	ldi	r22, 0x02	; 2
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	b3 db       	rcall	.-2202   	; 0x5f8 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     e92:	64 e0       	ldi	r22, 0x04	; 4
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	b0 db       	rcall	.-2208   	; 0x5f8 <sysclk_enable_module>
     e98:	22 c0       	rjmp	.+68     	; 0xede <tc_enable+0x7a>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
     e9a:	21 15       	cp	r18, r1
     e9c:	89 e0       	ldi	r24, 0x09	; 9
     e9e:	38 07       	cpc	r19, r24
     ea0:	39 f4       	brne	.+14     	; 0xeb0 <tc_enable+0x4c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	84 e0       	ldi	r24, 0x04	; 4
     ea6:	a8 db       	rcall	.-2224   	; 0x5f8 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     ea8:	64 e0       	ldi	r22, 0x04	; 4
     eaa:	84 e0       	ldi	r24, 0x04	; 4
     eac:	a5 db       	rcall	.-2230   	; 0x5f8 <sysclk_enable_module>
     eae:	17 c0       	rjmp	.+46     	; 0xede <tc_enable+0x7a>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
     eb0:	20 34       	cpi	r18, 0x40	; 64
     eb2:	89 e0       	ldi	r24, 0x09	; 9
     eb4:	38 07       	cpc	r19, r24
     eb6:	39 f4       	brne	.+14     	; 0xec6 <tc_enable+0x62>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     eb8:	62 e0       	ldi	r22, 0x02	; 2
     eba:	84 e0       	ldi	r24, 0x04	; 4
     ebc:	9d db       	rcall	.-2246   	; 0x5f8 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     ebe:	64 e0       	ldi	r22, 0x04	; 4
     ec0:	84 e0       	ldi	r24, 0x04	; 4
     ec2:	9a db       	rcall	.-2252   	; 0x5f8 <sysclk_enable_module>
     ec4:	0c c0       	rjmp	.+24     	; 0xede <tc_enable+0x7a>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
     ec6:	21 15       	cp	r18, r1
     ec8:	3a 40       	sbci	r19, 0x0A	; 10
     eca:	39 f4       	brne	.+14     	; 0xeda <tc_enable+0x76>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	85 e0       	ldi	r24, 0x05	; 5
     ed0:	93 db       	rcall	.-2266   	; 0x5f8 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     ed2:	64 e0       	ldi	r22, 0x04	; 4
     ed4:	85 e0       	ldi	r24, 0x05	; 5
     ed6:	90 db       	rcall	.-2272   	; 0x5f8 <sysclk_enable_module>
     ed8:	02 c0       	rjmp	.+4      	; 0xede <tc_enable+0x7a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     eda:	cf bf       	out	0x3f, r28	; 63
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <tc_enable+0x7c>
     ede:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     ee4:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     ee6:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     ee8:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     eea:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     eec:	60 83       	st	Z, r22
	ret                             // Return to caller
     eee:	08 95       	ret

00000ef0 <board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	PORTC.DIR=0B1111;
     ef0:	8f e0       	ldi	r24, 0x0F	; 15
     ef2:	80 93 40 06 	sts	0x0640, r24
	PORTR.DIRSET=PIN0_bm;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	e0 ee       	ldi	r30, 0xE0	; 224
     efa:	f7 e0       	ldi	r31, 0x07	; 7
     efc:	81 83       	std	Z+1, r24	; 0x01
	
		
		PORTD.OUTSET = PIN3_bm; //Let's make PC7 as TX
     efe:	e0 e6       	ldi	r30, 0x60	; 96
     f00:	f6 e0       	ldi	r31, 0x06	; 6
     f02:	88 e0       	ldi	r24, 0x08	; 8
     f04:	85 83       	std	Z+5, r24	; 0x05
		PORTD.DIRSET = PIN3_bm; //TX pin as output
     f06:	81 83       	std	Z+1, r24	; 0x01

		PORTD.OUTCLR = PIN2_bm;
     f08:	84 e0       	ldi	r24, 0x04	; 4
     f0a:	86 83       	std	Z+6, r24	; 0x06
		PORTD.DIRCLR = PIN2_bm; //PC6 as RX
     f0c:	82 83       	std	Z+2, r24	; 0x02
     f0e:	08 95       	ret

00000f10 <__vector_88>:
	

	
}
ISR(USART_RX_Vect)
{
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	2f 93       	push	r18
     f1c:	3f 93       	push	r19
     f1e:	4f 93       	push	r20
     f20:	5f 93       	push	r21
     f22:	6f 93       	push	r22
     f24:	7f 93       	push	r23
     f26:	8f 93       	push	r24
     f28:	9f 93       	push	r25
     f2a:	af 93       	push	r26
     f2c:	bf 93       	push	r27
     f2e:	ef 93       	push	r30
     f30:	ff 93       	push	r31
	
	recibido=usart_getchar(USART_SERIAL_D0);
     f32:	80 ea       	ldi	r24, 0xA0	; 160
     f34:	99 e0       	ldi	r25, 0x09	; 9
     f36:	44 d9       	rcall	.-3448   	; 0x1c0 <usart_getchar>
     f38:	80 93 3c 20 	sts	0x203C, r24
	tc_write_cc(&TCC0, TC_CCA, recibido*62);
     f3c:	9e e3       	ldi	r25, 0x3E	; 62
     f3e:	89 9f       	mul	r24, r25
     f40:	90 01       	movw	r18, r0
     f42:	11 24       	eor	r1, r1
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	if (tc_is_tc0(void *tc)) {
		switch (channel_index) {
		case TC_CCA:
			((TC0_t *)tc)->CCA = value;
     f44:	e0 e0       	ldi	r30, 0x00	; 0
     f46:	f8 e0       	ldi	r31, 0x08	; 8
     f48:	20 a7       	std	Z+40, r18	; 0x28
     f4a:	31 a7       	std	Z+41, r19	; 0x29
	
	usart_putchar(USART_SERIAL_D0,recibido);
     f4c:	68 2f       	mov	r22, r24
     f4e:	80 ea       	ldi	r24, 0xA0	; 160
     f50:	99 e0       	ldi	r25, 0x09	; 9
     f52:	2e d9       	rcall	.-3492   	; 0x1b0 <usart_putchar>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     f54:	e0 ea       	ldi	r30, 0xA0	; 160
     f56:	f9 e0       	ldi	r31, 0x09	; 9
     f58:	81 81       	ldd	r24, Z+1	; 0x01
	while (!usart_tx_is_complete(USART_SERIAL_D0)) {
     f5a:	86 ff       	sbrs	r24, 6
     f5c:	fd cf       	rjmp	.-6      	; 0xf58 <__vector_88+0x48>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     f5e:	80 e4       	ldi	r24, 0x40	; 64
     f60:	e0 ea       	ldi	r30, 0xA0	; 160
     f62:	f9 e0       	ldi	r31, 0x09	; 9
     f64:	81 83       	std	Z+1, r24	; 0x01
	}
	usart_clear_tx_complete(USART_SERIAL_D0);	
	
}
     f66:	ff 91       	pop	r31
     f68:	ef 91       	pop	r30
     f6a:	bf 91       	pop	r27
     f6c:	af 91       	pop	r26
     f6e:	9f 91       	pop	r25
     f70:	8f 91       	pop	r24
     f72:	7f 91       	pop	r23
     f74:	6f 91       	pop	r22
     f76:	5f 91       	pop	r21
     f78:	4f 91       	pop	r20
     f7a:	3f 91       	pop	r19
     f7c:	2f 91       	pop	r18
     f7e:	0f 90       	pop	r0
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	0f 90       	pop	r0
     f84:	1f 90       	pop	r1
     f86:	18 95       	reti

00000f88 <main>:

int main (void)
{
	// Insert system clock initialization code here (sysclk_init()).

	board_init(); //PIN C0,1,2,3 COMO SALIDA YA QUE ES EL OC0A
     f88:	b3 df       	rcall	.-154    	; 0xef0 <board_init>
	sysclk_init();
     f8a:	12 db       	rcall	.-2524   	; 0x5b0 <sysclk_init>
#include <asf.h>
uint8_t recibido;

static void conf_timer (void)
{
	tc_enable(&TCC0);
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	98 e0       	ldi	r25, 0x08	; 8
     f90:	69 df       	rcall	.-302    	; 0xe64 <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
     f92:	e0 e0       	ldi	r30, 0x00	; 0
     f94:	f8 e0       	ldi	r31, 0x08	; 8
     f96:	81 81       	ldd	r24, Z+1	; 0x01
     f98:	88 7f       	andi	r24, 0xF8	; 248
     f9a:	83 60       	ori	r24, 0x03	; 3
     f9c:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
     f9e:	8f e7       	ldi	r24, 0x7F	; 127
     fa0:	9e e3       	ldi	r25, 0x3E	; 62
     fa2:	a0 e0       	ldi	r26, 0x00	; 0
     fa4:	ba e0       	ldi	r27, 0x0A	; 10
     fa6:	96 96       	adiw	r26, 0x26	; 38
     fa8:	8d 93       	st	X+, r24
     faa:	9c 93       	st	X, r25
     fac:	97 97       	sbiw	r26, 0x27	; 39
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	if (tc_is_tc0(void *tc)) {
		switch (channel_index) {
		case TC_CCA:
			((TC0_t *)tc)->CCA = value;
     fae:	88 e9       	ldi	r24, 0x98	; 152
     fb0:	9a e3       	ldi	r25, 0x3A	; 58
     fb2:	80 a7       	std	Z+40, r24	; 0x28
     fb4:	91 a7       	std	Z+41, r25	; 0x29
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCB = value;
     fb6:	80 e1       	ldi	r24, 0x10	; 16
     fb8:	97 e2       	ldi	r25, 0x27	; 39
     fba:	82 a7       	std	Z+42, r24	; 0x2a
     fbc:	93 a7       	std	Z+43, r25	; 0x2b
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCC = value;
     fbe:	80 e4       	ldi	r24, 0x40	; 64
     fc0:	9f e1       	ldi	r25, 0x1F	; 31
     fc2:	84 a7       	std	Z+44, r24	; 0x2c
     fc4:	95 a7       	std	Z+45, r25	; 0x2d
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCD = value;
     fc6:	88 ec       	ldi	r24, 0xC8	; 200
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	86 a7       	std	Z+46, r24	; 0x2e
     fcc:	97 a7       	std	Z+47, r25	; 0x2f
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
		((TC0_t *)tc)->CTRLB |= enablemask;
     fce:	81 81       	ldd	r24, Z+1	; 0x01
     fd0:	80 6f       	ori	r24, 0xF0	; 240
     fd2:	81 83       	std	Z+1, r24	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     fd4:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     fd6:	80 7f       	andi	r24, 0xF0	; 240
     fd8:	81 60       	ori	r24, 0x01	; 1
     fda:	80 83       	st	Z, r24
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
     fdc:	87 e0       	ldi	r24, 0x07	; 7
     fde:	e0 ea       	ldi	r30, 0xA0	; 160
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	82 83       	std	Z+2, r24	; 0x02
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc);
}
static void conf_serial_com(void)
{
	pmic_init();
	sei();
     fe4:	78 94       	sei
		.baudrate = USART_SERIAL_BAUDRATE,
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	sysclk_enable_module(SYSCLK_PORT_D, PR_USART0_bm);
     fe6:	60 e1       	ldi	r22, 0x10	; 16
     fe8:	84 e0       	ldi	r24, 0x04	; 4
     fea:	06 db       	rcall	.-2548   	; 0x5f8 <sysclk_enable_module>
	usart_init_rs232(USART_SERIAL_D0, &USART_SERIAL_OPTIONS);
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e2       	ldi	r23, 0x20	; 32
     ff0:	80 ea       	ldi	r24, 0xA0	; 160
     ff2:	99 e0       	ldi	r25, 0x09	; 9
     ff4:	f1 d9       	rcall	.-3102   	; 0x3d8 <usart_init_rs232>
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
     ff6:	e0 ea       	ldi	r30, 0xA0	; 160
     ff8:	f9 e0       	ldi	r31, 0x09	; 9
     ffa:	83 81       	ldd	r24, Z+3	; 0x03
     ffc:	8f 7c       	andi	r24, 0xCF	; 207
     ffe:	80 61       	ori	r24, 0x10	; 16
    1000:	83 83       	std	Z+3, r24	; 0x03
	bool leer;
	
	while (1)
	{
		
		leer=PORTC.IN & 0b0000001;
    1002:	a0 e4       	ldi	r26, 0x40	; 64
    1004:	b6 e0       	ldi	r27, 0x06	; 6
		leer=leer;
		PORTR.OUT=leer;
    1006:	e0 ee       	ldi	r30, 0xE0	; 224
    1008:	f7 e0       	ldi	r31, 0x07	; 7
	bool leer;
	
	while (1)
	{
		
		leer=PORTC.IN & 0b0000001;
    100a:	18 96       	adiw	r26, 0x08	; 8
    100c:	8c 91       	ld	r24, X
    100e:	18 97       	sbiw	r26, 0x08	; 8
    1010:	81 70       	andi	r24, 0x01	; 1
		leer=leer;
		PORTR.OUT=leer;
    1012:	84 83       	std	Z+4, r24	; 0x04
    1014:	fa cf       	rjmp	.-12     	; 0x100a <main+0x82>

00001016 <__udivmodsi4>:
    1016:	a1 e2       	ldi	r26, 0x21	; 33
    1018:	1a 2e       	mov	r1, r26
    101a:	aa 1b       	sub	r26, r26
    101c:	bb 1b       	sub	r27, r27
    101e:	fd 01       	movw	r30, r26
    1020:	0d c0       	rjmp	.+26     	; 0x103c <__udivmodsi4_ep>

00001022 <__udivmodsi4_loop>:
    1022:	aa 1f       	adc	r26, r26
    1024:	bb 1f       	adc	r27, r27
    1026:	ee 1f       	adc	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	a2 17       	cp	r26, r18
    102c:	b3 07       	cpc	r27, r19
    102e:	e4 07       	cpc	r30, r20
    1030:	f5 07       	cpc	r31, r21
    1032:	20 f0       	brcs	.+8      	; 0x103c <__udivmodsi4_ep>
    1034:	a2 1b       	sub	r26, r18
    1036:	b3 0b       	sbc	r27, r19
    1038:	e4 0b       	sbc	r30, r20
    103a:	f5 0b       	sbc	r31, r21

0000103c <__udivmodsi4_ep>:
    103c:	66 1f       	adc	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	88 1f       	adc	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	1a 94       	dec	r1
    1046:	69 f7       	brne	.-38     	; 0x1022 <__udivmodsi4_loop>
    1048:	60 95       	com	r22
    104a:	70 95       	com	r23
    104c:	80 95       	com	r24
    104e:	90 95       	com	r25
    1050:	9b 01       	movw	r18, r22
    1052:	ac 01       	movw	r20, r24
    1054:	bd 01       	movw	r22, r26
    1056:	cf 01       	movw	r24, r30
    1058:	08 95       	ret

0000105a <_exit>:
    105a:	f8 94       	cli

0000105c <__stop_program>:
    105c:	ff cf       	rjmp	.-2      	; 0x105c <__stop_program>
