
entrada captura_frecuencia.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ff2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  00000ff2  00001086  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00802008  00802008  0000108e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000108e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000270  00000000  00000000  000010c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006d8c  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e5d  00000000  00000000  000080bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003dd9  00000000  00000000  00008f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000bf0  00000000  00000000  0000ccf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002459b  00000000  00000000  0000d8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002a5c  00000000  00000000  00031e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  000348db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008937  00000000  00000000  00034ad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	bb c0       	rjmp	.+374    	; 0x178 <__ctors_end>
   2:	00 00       	nop
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	c2 c0       	rjmp	.+388    	; 0x1ae <__bad_interrupt>
  2a:	00 00       	nop
  2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
  36:	00 00       	nop
  38:	c1 c2       	rjmp	.+1410   	; 0x5bc <__vector_14>
  3a:	00 00       	nop
  3c:	e8 c2       	rjmp	.+1488   	; 0x60e <__vector_15>
  3e:	00 00       	nop
  40:	0f c3       	rjmp	.+1566   	; 0x660 <__vector_16>
  42:	00 00       	nop
  44:	36 c3       	rjmp	.+1644   	; 0x6b2 <__vector_17>
  46:	00 00       	nop
  48:	5d c3       	rjmp	.+1722   	; 0x704 <__vector_18>
  4a:	00 00       	nop
  4c:	84 c3       	rjmp	.+1800   	; 0x756 <__vector_19>
  4e:	00 00       	nop
  50:	ab c3       	rjmp	.+1878   	; 0x7a8 <__vector_20>
  52:	00 00       	nop
  54:	d2 c3       	rjmp	.+1956   	; 0x7fa <__vector_21>
  56:	00 00       	nop
  58:	f9 c3       	rjmp	.+2034   	; 0x84c <__vector_22>
  5a:	00 00       	nop
  5c:	20 c4       	rjmp	.+2112   	; 0x89e <__vector_23>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
  96:	00 00       	nop
  98:	8a c0       	rjmp	.+276    	; 0x1ae <__bad_interrupt>
  9a:	00 00       	nop
  9c:	88 c0       	rjmp	.+272    	; 0x1ae <__bad_interrupt>
  9e:	00 00       	nop
  a0:	86 c0       	rjmp	.+268    	; 0x1ae <__bad_interrupt>
  a2:	00 00       	nop
  a4:	84 c0       	rjmp	.+264    	; 0x1ae <__bad_interrupt>
  a6:	00 00       	nop
  a8:	82 c0       	rjmp	.+260    	; 0x1ae <__bad_interrupt>
  aa:	00 00       	nop
  ac:	80 c0       	rjmp	.+256    	; 0x1ae <__bad_interrupt>
  ae:	00 00       	nop
  b0:	7e c0       	rjmp	.+252    	; 0x1ae <__bad_interrupt>
  b2:	00 00       	nop
  b4:	7c c0       	rjmp	.+248    	; 0x1ae <__bad_interrupt>
  b6:	00 00       	nop
  b8:	7a c0       	rjmp	.+244    	; 0x1ae <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b3 c5       	rjmp	.+2918   	; 0xc24 <__vector_47>
  be:	00 00       	nop
  c0:	da c5       	rjmp	.+2996   	; 0xc76 <__vector_48>
  c2:	00 00       	nop
  c4:	01 c6       	rjmp	.+3074   	; 0xcc8 <__vector_49>
  c6:	00 00       	nop
  c8:	28 c6       	rjmp	.+3152   	; 0xd1a <__vector_50>
  ca:	00 00       	nop
  cc:	4f c6       	rjmp	.+3230   	; 0xd6c <__vector_51>
  ce:	00 00       	nop
  d0:	76 c6       	rjmp	.+3308   	; 0xdbe <__vector_52>
  d2:	00 00       	nop
  d4:	6c c0       	rjmp	.+216    	; 0x1ae <__bad_interrupt>
  d6:	00 00       	nop
  d8:	6a c0       	rjmp	.+212    	; 0x1ae <__bad_interrupt>
  da:	00 00       	nop
  dc:	68 c0       	rjmp	.+208    	; 0x1ae <__bad_interrupt>
  de:	00 00       	nop
  e0:	66 c0       	rjmp	.+204    	; 0x1ae <__bad_interrupt>
  e2:	00 00       	nop
  e4:	64 c0       	rjmp	.+200    	; 0x1ae <__bad_interrupt>
  e6:	00 00       	nop
  e8:	62 c0       	rjmp	.+196    	; 0x1ae <__bad_interrupt>
  ea:	00 00       	nop
  ec:	60 c0       	rjmp	.+192    	; 0x1ae <__bad_interrupt>
  ee:	00 00       	nop
  f0:	5e c0       	rjmp	.+188    	; 0x1ae <__bad_interrupt>
  f2:	00 00       	nop
  f4:	5c c0       	rjmp	.+184    	; 0x1ae <__bad_interrupt>
  f6:	00 00       	nop
  f8:	5a c0       	rjmp	.+180    	; 0x1ae <__bad_interrupt>
  fa:	00 00       	nop
  fc:	58 c0       	rjmp	.+176    	; 0x1ae <__bad_interrupt>
  fe:	00 00       	nop
 100:	56 c0       	rjmp	.+172    	; 0x1ae <__bad_interrupt>
 102:	00 00       	nop
 104:	54 c0       	rjmp	.+168    	; 0x1ae <__bad_interrupt>
 106:	00 00       	nop
 108:	52 c0       	rjmp	.+164    	; 0x1ae <__bad_interrupt>
 10a:	00 00       	nop
 10c:	50 c0       	rjmp	.+160    	; 0x1ae <__bad_interrupt>
 10e:	00 00       	nop
 110:	4e c0       	rjmp	.+156    	; 0x1ae <__bad_interrupt>
 112:	00 00       	nop
 114:	4c c0       	rjmp	.+152    	; 0x1ae <__bad_interrupt>
 116:	00 00       	nop
 118:	4a c0       	rjmp	.+148    	; 0x1ae <__bad_interrupt>
 11a:	00 00       	nop
 11c:	48 c0       	rjmp	.+144    	; 0x1ae <__bad_interrupt>
 11e:	00 00       	nop
 120:	46 c0       	rjmp	.+140    	; 0x1ae <__bad_interrupt>
 122:	00 00       	nop
 124:	44 c0       	rjmp	.+136    	; 0x1ae <__bad_interrupt>
 126:	00 00       	nop
 128:	42 c0       	rjmp	.+132    	; 0x1ae <__bad_interrupt>
 12a:	00 00       	nop
 12c:	40 c0       	rjmp	.+128    	; 0x1ae <__bad_interrupt>
 12e:	00 00       	nop
 130:	3e c0       	rjmp	.+124    	; 0x1ae <__bad_interrupt>
 132:	00 00       	nop
 134:	dd c3       	rjmp	.+1978   	; 0x8f0 <__vector_77>
 136:	00 00       	nop
 138:	04 c4       	rjmp	.+2056   	; 0x942 <__vector_78>
 13a:	00 00       	nop
 13c:	2b c4       	rjmp	.+2134   	; 0x994 <__vector_79>
 13e:	00 00       	nop
 140:	52 c4       	rjmp	.+2212   	; 0x9e6 <__vector_80>
 142:	00 00       	nop
 144:	79 c4       	rjmp	.+2290   	; 0xa38 <__vector_81>
 146:	00 00       	nop
 148:	a0 c4       	rjmp	.+2368   	; 0xa8a <__vector_82>
 14a:	00 00       	nop
 14c:	c7 c4       	rjmp	.+2446   	; 0xadc <__vector_83>
 14e:	00 00       	nop
 150:	ee c4       	rjmp	.+2524   	; 0xb2e <__vector_84>
 152:	00 00       	nop
 154:	15 c5       	rjmp	.+2602   	; 0xb80 <__vector_85>
 156:	00 00       	nop
 158:	3c c5       	rjmp	.+2680   	; 0xbd2 <__vector_86>
 15a:	00 00       	nop
 15c:	28 c0       	rjmp	.+80     	; 0x1ae <__bad_interrupt>
 15e:	00 00       	nop
 160:	26 c0       	rjmp	.+76     	; 0x1ae <__bad_interrupt>
 162:	00 00       	nop
 164:	24 c0       	rjmp	.+72     	; 0x1ae <__bad_interrupt>
 166:	00 00       	nop
 168:	22 c0       	rjmp	.+68     	; 0x1ae <__bad_interrupt>
 16a:	00 00       	nop
 16c:	20 c0       	rjmp	.+64     	; 0x1ae <__bad_interrupt>
 16e:	00 00       	nop
 170:	1e c0       	rjmp	.+60     	; 0x1ae <__bad_interrupt>
 172:	00 00       	nop
 174:	1c c0       	rjmp	.+56     	; 0x1ae <__bad_interrupt>
	...

00000178 <__ctors_end>:
 178:	11 24       	eor	r1, r1
 17a:	1f be       	out	0x3f, r1	; 63
 17c:	cf ef       	ldi	r28, 0xFF	; 255
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	df e2       	ldi	r29, 0x2F	; 47
 182:	de bf       	out	0x3e, r29	; 62

00000184 <__do_copy_data>:
 184:	10 e2       	ldi	r17, 0x20	; 32
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b0 e2       	ldi	r27, 0x20	; 32
 18a:	e2 ef       	ldi	r30, 0xF2	; 242
 18c:	ff e0       	ldi	r31, 0x0F	; 15
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
 190:	05 90       	lpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a8 30       	cpi	r26, 0x08	; 8
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
 19a:	20 e2       	ldi	r18, 0x20	; 32
 19c:	a8 e0       	ldi	r26, 0x08	; 8
 19e:	b0 e2       	ldi	r27, 0x20	; 32
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	ac 33       	cpi	r26, 0x3C	; 60
 1a6:	b2 07       	cpc	r27, r18
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	bc d6       	rcall	.+3448   	; 0xf24 <main>
 1ac:	20 c7       	rjmp	.+3648   	; 0xfee <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
 1b0:	fc 01       	movw	r30, r24
 1b2:	81 81       	ldd	r24, Z+1	; 0x01
 1b4:	85 ff       	sbrs	r24, 5
 1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <usart_putchar+0x2>
 1b8:	60 83       	st	Z, r22
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	08 95       	ret

000001c0 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 1c0:	4f 92       	push	r4
 1c2:	5f 92       	push	r5
 1c4:	6f 92       	push	r6
 1c6:	7f 92       	push	r7
 1c8:	8f 92       	push	r8
 1ca:	9f 92       	push	r9
 1cc:	af 92       	push	r10
 1ce:	bf 92       	push	r11
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	ec 01       	movw	r28, r24
 1e2:	4a 01       	movw	r8, r20
 1e4:	5b 01       	movw	r10, r22
 1e6:	28 01       	movw	r4, r16
 1e8:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
 1ea:	d9 01       	movw	r26, r18
 1ec:	c8 01       	movw	r24, r16
 1ee:	68 94       	set
 1f0:	12 f8       	bld	r1, 2
 1f2:	b6 95       	lsr	r27
 1f4:	a7 95       	ror	r26
 1f6:	97 95       	ror	r25
 1f8:	87 95       	ror	r24
 1fa:	16 94       	lsr	r1
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
 1fe:	b9 01       	movw	r22, r18
 200:	a8 01       	movw	r20, r16
 202:	03 2e       	mov	r0, r19
 204:	36 e1       	ldi	r19, 0x16	; 22
 206:	76 95       	lsr	r23
 208:	67 95       	ror	r22
 20a:	57 95       	ror	r21
 20c:	47 95       	ror	r20
 20e:	3a 95       	dec	r19
 210:	d1 f7       	brne	.-12     	; 0x206 <usart_set_baudrate+0x46>
 212:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 214:	2c 81       	ldd	r18, Y+4	; 0x04
 216:	22 fd       	sbrc	r18, 2
 218:	08 c0       	rjmp	.+16     	; 0x22a <usart_set_baudrate+0x6a>
		max_rate /= 2;
 21a:	b6 95       	lsr	r27
 21c:	a7 95       	ror	r26
 21e:	97 95       	ror	r25
 220:	87 95       	ror	r24
		min_rate /= 2;
 222:	76 95       	lsr	r23
 224:	67 95       	ror	r22
 226:	57 95       	ror	r21
 228:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
 22a:	88 15       	cp	r24, r8
 22c:	99 05       	cpc	r25, r9
 22e:	aa 05       	cpc	r26, r10
 230:	bb 05       	cpc	r27, r11
 232:	08 f4       	brcc	.+2      	; 0x236 <usart_set_baudrate+0x76>
 234:	a2 c0       	rjmp	.+324    	; 0x37a <usart_set_baudrate+0x1ba>
 236:	84 16       	cp	r8, r20
 238:	95 06       	cpc	r9, r21
 23a:	a6 06       	cpc	r10, r22
 23c:	b7 06       	cpc	r11, r23
 23e:	08 f4       	brcc	.+2      	; 0x242 <usart_set_baudrate+0x82>
 240:	9e c0       	rjmp	.+316    	; 0x37e <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 242:	8c 81       	ldd	r24, Y+4	; 0x04
 244:	82 fd       	sbrc	r24, 2
 246:	04 c0       	rjmp	.+8      	; 0x250 <usart_set_baudrate+0x90>
		baud *= 2;
 248:	88 0c       	add	r8, r8
 24a:	99 1c       	adc	r9, r9
 24c:	aa 1c       	adc	r10, r10
 24e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
 250:	c3 01       	movw	r24, r6
 252:	b2 01       	movw	r22, r4
 254:	a5 01       	movw	r20, r10
 256:	94 01       	movw	r18, r8
 258:	a8 d6       	rcall	.+3408   	; 0xfaa <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
 25a:	2f 3f       	cpi	r18, 0xFF	; 255
 25c:	31 05       	cpc	r19, r1
 25e:	41 05       	cpc	r20, r1
 260:	51 05       	cpc	r21, r1
 262:	08 f4       	brcc	.+2      	; 0x266 <usart_set_baudrate+0xa6>
 264:	8e c0       	rjmp	.+284    	; 0x382 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
 266:	c1 2c       	mov	r12, r1
 268:	d1 2c       	mov	r13, r1
 26a:	76 01       	movw	r14, r12
 26c:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 26e:	19 ef       	ldi	r17, 0xF9	; 249
 270:	05 c0       	rjmp	.+10     	; 0x27c <usart_set_baudrate+0xbc>
		if (ratio < limit) {
 272:	2c 15       	cp	r18, r12
 274:	3d 05       	cpc	r19, r13
 276:	4e 05       	cpc	r20, r14
 278:	5f 05       	cpc	r21, r15
 27a:	68 f0       	brcs	.+26     	; 0x296 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
 27c:	cc 0c       	add	r12, r12
 27e:	dd 1c       	adc	r13, r13
 280:	ee 1c       	adc	r14, r14
 282:	ff 1c       	adc	r15, r15

		if (exp < -3) {
 284:	1d 3f       	cpi	r17, 0xFD	; 253
 286:	14 f4       	brge	.+4      	; 0x28c <usart_set_baudrate+0xcc>
			limit |= 1;
 288:	68 94       	set
 28a:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 28c:	1f 5f       	subi	r17, 0xFF	; 255
 28e:	17 30       	cpi	r17, 0x07	; 7
 290:	81 f7       	brne	.-32     	; 0x272 <usart_set_baudrate+0xb2>
 292:	21 2f       	mov	r18, r17
 294:	4e c0       	rjmp	.+156    	; 0x332 <usart_set_baudrate+0x172>
 296:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
 298:	11 23       	and	r17, r17
 29a:	0c f0       	brlt	.+2      	; 0x29e <usart_set_baudrate+0xde>
 29c:	4a c0       	rjmp	.+148    	; 0x332 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 29e:	d5 01       	movw	r26, r10
 2a0:	c4 01       	movw	r24, r8
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	aa 1f       	adc	r26, r26
 2a8:	bb 1f       	adc	r27, r27
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	aa 1f       	adc	r26, r26
 2b0:	bb 1f       	adc	r27, r27
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	aa 1f       	adc	r26, r26
 2b8:	bb 1f       	adc	r27, r27
 2ba:	48 1a       	sub	r4, r24
 2bc:	59 0a       	sbc	r5, r25
 2be:	6a 0a       	sbc	r6, r26
 2c0:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
 2c2:	1e 3f       	cpi	r17, 0xFE	; 254
 2c4:	ec f4       	brge	.+58     	; 0x300 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
 2c6:	6d ef       	ldi	r22, 0xFD	; 253
 2c8:	7f ef       	ldi	r23, 0xFF	; 255
 2ca:	61 1b       	sub	r22, r17
 2cc:	71 09       	sbc	r23, r1
 2ce:	17 fd       	sbrc	r17, 7
 2d0:	73 95       	inc	r23
 2d2:	04 c0       	rjmp	.+8      	; 0x2dc <usart_set_baudrate+0x11c>
 2d4:	44 0c       	add	r4, r4
 2d6:	55 1c       	adc	r5, r5
 2d8:	66 1c       	adc	r6, r6
 2da:	77 1c       	adc	r7, r7
 2dc:	6a 95       	dec	r22
 2de:	d2 f7       	brpl	.-12     	; 0x2d4 <usart_set_baudrate+0x114>
 2e0:	d5 01       	movw	r26, r10
 2e2:	c4 01       	movw	r24, r8
 2e4:	b6 95       	lsr	r27
 2e6:	a7 95       	ror	r26
 2e8:	97 95       	ror	r25
 2ea:	87 95       	ror	r24
 2ec:	bc 01       	movw	r22, r24
 2ee:	cd 01       	movw	r24, r26
 2f0:	64 0d       	add	r22, r4
 2f2:	75 1d       	adc	r23, r5
 2f4:	86 1d       	adc	r24, r6
 2f6:	97 1d       	adc	r25, r7
 2f8:	a5 01       	movw	r20, r10
 2fa:	94 01       	movw	r18, r8
 2fc:	56 d6       	rcall	.+3244   	; 0xfaa <__udivmodsi4>
 2fe:	34 c0       	rjmp	.+104    	; 0x368 <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
 300:	23 e0       	ldi	r18, 0x03	; 3
 302:	21 0f       	add	r18, r17
 304:	d5 01       	movw	r26, r10
 306:	c4 01       	movw	r24, r8
 308:	04 c0       	rjmp	.+8      	; 0x312 <usart_set_baudrate+0x152>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	aa 1f       	adc	r26, r26
 310:	bb 1f       	adc	r27, r27
 312:	2a 95       	dec	r18
 314:	d2 f7       	brpl	.-12     	; 0x30a <usart_set_baudrate+0x14a>
 316:	9c 01       	movw	r18, r24
 318:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
 31a:	b6 95       	lsr	r27
 31c:	a7 95       	ror	r26
 31e:	97 95       	ror	r25
 320:	87 95       	ror	r24
 322:	bc 01       	movw	r22, r24
 324:	cd 01       	movw	r24, r26
 326:	64 0d       	add	r22, r4
 328:	75 1d       	adc	r23, r5
 32a:	86 1d       	adc	r24, r6
 32c:	97 1d       	adc	r25, r7
 32e:	3d d6       	rcall	.+3194   	; 0xfaa <__udivmodsi4>
 330:	1b c0       	rjmp	.+54     	; 0x368 <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
 332:	2d 5f       	subi	r18, 0xFD	; 253
 334:	d5 01       	movw	r26, r10
 336:	c4 01       	movw	r24, r8
 338:	04 c0       	rjmp	.+8      	; 0x342 <usart_set_baudrate+0x182>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	aa 1f       	adc	r26, r26
 340:	bb 1f       	adc	r27, r27
 342:	2a 95       	dec	r18
 344:	d2 f7       	brpl	.-12     	; 0x33a <usart_set_baudrate+0x17a>
 346:	9c 01       	movw	r18, r24
 348:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
 34a:	b6 95       	lsr	r27
 34c:	a7 95       	ror	r26
 34e:	97 95       	ror	r25
 350:	87 95       	ror	r24
 352:	bc 01       	movw	r22, r24
 354:	cd 01       	movw	r24, r26
 356:	64 0d       	add	r22, r4
 358:	75 1d       	adc	r23, r5
 35a:	86 1d       	adc	r24, r6
 35c:	97 1d       	adc	r25, r7
 35e:	25 d6       	rcall	.+3146   	; 0xfaa <__udivmodsi4>
 360:	21 50       	subi	r18, 0x01	; 1
 362:	31 09       	sbc	r19, r1
 364:	41 09       	sbc	r20, r1
 366:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
 368:	83 2f       	mov	r24, r19
 36a:	8f 70       	andi	r24, 0x0F	; 15
 36c:	12 95       	swap	r17
 36e:	10 7f       	andi	r17, 0xF0	; 240
 370:	18 2b       	or	r17, r24
 372:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
 374:	2e 83       	std	Y+6, r18	; 0x06

	return true;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	18 c0       	rjmp	.+48     	; 0x3aa <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	16 c0       	rjmp	.+44     	; 0x3aa <usart_set_baudrate+0x1ea>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	14 c0       	rjmp	.+40     	; 0x3aa <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 382:	d5 01       	movw	r26, r10
 384:	c4 01       	movw	r24, r8
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	aa 1f       	adc	r26, r26
 38c:	bb 1f       	adc	r27, r27
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	aa 1f       	adc	r26, r26
 394:	bb 1f       	adc	r27, r27
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	aa 1f       	adc	r26, r26
 39c:	bb 1f       	adc	r27, r27
 39e:	48 1a       	sub	r4, r24
 3a0:	59 0a       	sbc	r5, r25
 3a2:	6a 0a       	sbc	r6, r26
 3a4:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 3a6:	19 ef       	ldi	r17, 0xF9	; 249
 3a8:	8e cf       	rjmp	.-228    	; 0x2c6 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	bf 90       	pop	r11
 3bc:	af 90       	pop	r10
 3be:	9f 90       	pop	r9
 3c0:	8f 90       	pop	r8
 3c2:	7f 90       	pop	r7
 3c4:	6f 90       	pop	r6
 3c6:	5f 90       	pop	r5
 3c8:	4f 90       	pop	r4
 3ca:	08 95       	ret

000003cc <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	ec 01       	movw	r28, r24
 3d6:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 3d8:	00 97       	sbiw	r24, 0x00	; 0
 3da:	09 f4       	brne	.+2      	; 0x3de <usart_init_rs232+0x12>
 3dc:	be c0       	rjmp	.+380    	; 0x55a <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 3de:	80 3c       	cpi	r24, 0xC0	; 192
 3e0:	91 05       	cpc	r25, r1
 3e2:	21 f4       	brne	.+8      	; 0x3ec <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 3e4:	60 e1       	ldi	r22, 0x10	; 16
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	dd d0       	rcall	.+442    	; 0x5a4 <sysclk_enable_module>
 3ea:	b7 c0       	rjmp	.+366    	; 0x55a <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
 3ec:	c1 15       	cp	r28, r1
 3ee:	84 e0       	ldi	r24, 0x04	; 4
 3f0:	d8 07       	cpc	r29, r24
 3f2:	21 f4       	brne	.+8      	; 0x3fc <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 3f4:	64 e0       	ldi	r22, 0x04	; 4
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	d5 d0       	rcall	.+426    	; 0x5a4 <sysclk_enable_module>
 3fa:	af c0       	rjmp	.+350    	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 3fc:	c0 38       	cpi	r28, 0x80	; 128
 3fe:	e1 e0       	ldi	r30, 0x01	; 1
 400:	de 07       	cpc	r29, r30
 402:	21 f4       	brne	.+8      	; 0x40c <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	cd d0       	rcall	.+410    	; 0x5a4 <sysclk_enable_module>
 40a:	a7 c0       	rjmp	.+334    	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 40c:	c1 15       	cp	r28, r1
 40e:	f1 e0       	ldi	r31, 0x01	; 1
 410:	df 07       	cpc	r29, r31
 412:	21 f4       	brne	.+8      	; 0x41c <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	c5 d0       	rcall	.+394    	; 0x5a4 <sysclk_enable_module>
 41a:	9f c0       	rjmp	.+318    	; 0x55a <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 41c:	c0 38       	cpi	r28, 0x80	; 128
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	d8 07       	cpc	r29, r24
 422:	21 f4       	brne	.+8      	; 0x42c <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	bd d0       	rcall	.+378    	; 0x5a4 <sysclk_enable_module>
 42a:	97 c0       	rjmp	.+302    	; 0x55a <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 42c:	c1 15       	cp	r28, r1
 42e:	e2 e0       	ldi	r30, 0x02	; 2
 430:	de 07       	cpc	r29, r30
 432:	21 f4       	brne	.+8      	; 0x43c <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 434:	62 e0       	ldi	r22, 0x02	; 2
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	b5 d0       	rcall	.+362    	; 0x5a4 <sysclk_enable_module>
 43a:	8f c0       	rjmp	.+286    	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 43c:	c0 32       	cpi	r28, 0x20	; 32
 43e:	f3 e0       	ldi	r31, 0x03	; 3
 440:	df 07       	cpc	r29, r31
 442:	21 f4       	brne	.+8      	; 0x44c <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 444:	64 e0       	ldi	r22, 0x04	; 4
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	ad d0       	rcall	.+346    	; 0x5a4 <sysclk_enable_module>
 44a:	87 c0       	rjmp	.+270    	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 44c:	c1 15       	cp	r28, r1
 44e:	88 e0       	ldi	r24, 0x08	; 8
 450:	d8 07       	cpc	r29, r24
 452:	21 f4       	brne	.+8      	; 0x45c <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	a5 d0       	rcall	.+330    	; 0x5a4 <sysclk_enable_module>
 45a:	7f c0       	rjmp	.+254    	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 45c:	c1 15       	cp	r28, r1
 45e:	e9 e0       	ldi	r30, 0x09	; 9
 460:	de 07       	cpc	r29, r30
 462:	21 f4       	brne	.+8      	; 0x46c <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 464:	61 e0       	ldi	r22, 0x01	; 1
 466:	84 e0       	ldi	r24, 0x04	; 4
 468:	9d d0       	rcall	.+314    	; 0x5a4 <sysclk_enable_module>
 46a:	77 c0       	rjmp	.+238    	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 46c:	c1 15       	cp	r28, r1
 46e:	fa e0       	ldi	r31, 0x0A	; 10
 470:	df 07       	cpc	r29, r31
 472:	21 f4       	brne	.+8      	; 0x47c <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	85 e0       	ldi	r24, 0x05	; 5
 478:	95 d0       	rcall	.+298    	; 0x5a4 <sysclk_enable_module>
 47a:	6f c0       	rjmp	.+222    	; 0x55a <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 47c:	c0 34       	cpi	r28, 0x40	; 64
 47e:	88 e0       	ldi	r24, 0x08	; 8
 480:	d8 07       	cpc	r29, r24
 482:	21 f4       	brne	.+8      	; 0x48c <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	8d d0       	rcall	.+282    	; 0x5a4 <sysclk_enable_module>
 48a:	67 c0       	rjmp	.+206    	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 48c:	c0 34       	cpi	r28, 0x40	; 64
 48e:	e9 e0       	ldi	r30, 0x09	; 9
 490:	de 07       	cpc	r29, r30
 492:	21 f4       	brne	.+8      	; 0x49c <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 494:	62 e0       	ldi	r22, 0x02	; 2
 496:	84 e0       	ldi	r24, 0x04	; 4
 498:	85 d0       	rcall	.+266    	; 0x5a4 <sysclk_enable_module>
 49a:	5f c0       	rjmp	.+190    	; 0x55a <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 49c:	c0 39       	cpi	r28, 0x90	; 144
 49e:	f8 e0       	ldi	r31, 0x08	; 8
 4a0:	df 07       	cpc	r29, r31
 4a2:	21 f4       	brne	.+8      	; 0x4ac <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 4a4:	64 e0       	ldi	r22, 0x04	; 4
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	7d d0       	rcall	.+250    	; 0x5a4 <sysclk_enable_module>
 4aa:	57 c0       	rjmp	.+174    	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 4ac:	c0 39       	cpi	r28, 0x90	; 144
 4ae:	89 e0       	ldi	r24, 0x09	; 9
 4b0:	d8 07       	cpc	r29, r24
 4b2:	21 f4       	brne	.+8      	; 0x4bc <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 4b4:	64 e0       	ldi	r22, 0x04	; 4
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	75 d0       	rcall	.+234    	; 0x5a4 <sysclk_enable_module>
 4ba:	4f c0       	rjmp	.+158    	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 4bc:	c0 39       	cpi	r28, 0x90	; 144
 4be:	ea e0       	ldi	r30, 0x0A	; 10
 4c0:	de 07       	cpc	r29, r30
 4c2:	21 f4       	brne	.+8      	; 0x4cc <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 4c4:	64 e0       	ldi	r22, 0x04	; 4
 4c6:	85 e0       	ldi	r24, 0x05	; 5
 4c8:	6d d0       	rcall	.+218    	; 0x5a4 <sysclk_enable_module>
 4ca:	47 c0       	rjmp	.+142    	; 0x55a <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 4cc:	c0 3c       	cpi	r28, 0xC0	; 192
 4ce:	f8 e0       	ldi	r31, 0x08	; 8
 4d0:	df 07       	cpc	r29, r31
 4d2:	21 f4       	brne	.+8      	; 0x4dc <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 4d4:	68 e0       	ldi	r22, 0x08	; 8
 4d6:	83 e0       	ldi	r24, 0x03	; 3
 4d8:	65 d0       	rcall	.+202    	; 0x5a4 <sysclk_enable_module>
 4da:	3f c0       	rjmp	.+126    	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 4dc:	c0 3c       	cpi	r28, 0xC0	; 192
 4de:	89 e0       	ldi	r24, 0x09	; 9
 4e0:	d8 07       	cpc	r29, r24
 4e2:	21 f4       	brne	.+8      	; 0x4ec <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 4e4:	68 e0       	ldi	r22, 0x08	; 8
 4e6:	84 e0       	ldi	r24, 0x04	; 4
 4e8:	5d d0       	rcall	.+186    	; 0x5a4 <sysclk_enable_module>
 4ea:	37 c0       	rjmp	.+110    	; 0x55a <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 4ec:	c0 3a       	cpi	r28, 0xA0	; 160
 4ee:	e8 e0       	ldi	r30, 0x08	; 8
 4f0:	de 07       	cpc	r29, r30
 4f2:	21 f4       	brne	.+8      	; 0x4fc <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 4f4:	60 e1       	ldi	r22, 0x10	; 16
 4f6:	83 e0       	ldi	r24, 0x03	; 3
 4f8:	55 d0       	rcall	.+170    	; 0x5a4 <sysclk_enable_module>
 4fa:	2f c0       	rjmp	.+94     	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 4fc:	c0 3a       	cpi	r28, 0xA0	; 160
 4fe:	f9 e0       	ldi	r31, 0x09	; 9
 500:	df 07       	cpc	r29, r31
 502:	21 f4       	brne	.+8      	; 0x50c <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 504:	60 e1       	ldi	r22, 0x10	; 16
 506:	84 e0       	ldi	r24, 0x04	; 4
 508:	4d d0       	rcall	.+154    	; 0x5a4 <sysclk_enable_module>
 50a:	27 c0       	rjmp	.+78     	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 50c:	c0 3a       	cpi	r28, 0xA0	; 160
 50e:	8a e0       	ldi	r24, 0x0A	; 10
 510:	d8 07       	cpc	r29, r24
 512:	21 f4       	brne	.+8      	; 0x51c <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 514:	60 e1       	ldi	r22, 0x10	; 16
 516:	85 e0       	ldi	r24, 0x05	; 5
 518:	45 d0       	rcall	.+138    	; 0x5a4 <sysclk_enable_module>
 51a:	1f c0       	rjmp	.+62     	; 0x55a <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 51c:	c0 3b       	cpi	r28, 0xB0	; 176
 51e:	e8 e0       	ldi	r30, 0x08	; 8
 520:	de 07       	cpc	r29, r30
 522:	21 f4       	brne	.+8      	; 0x52c <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 524:	60 e2       	ldi	r22, 0x20	; 32
 526:	83 e0       	ldi	r24, 0x03	; 3
 528:	3d d0       	rcall	.+122    	; 0x5a4 <sysclk_enable_module>
 52a:	17 c0       	rjmp	.+46     	; 0x55a <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 52c:	c0 3b       	cpi	r28, 0xB0	; 176
 52e:	f9 e0       	ldi	r31, 0x09	; 9
 530:	df 07       	cpc	r29, r31
 532:	21 f4       	brne	.+8      	; 0x53c <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 534:	60 e2       	ldi	r22, 0x20	; 32
 536:	84 e0       	ldi	r24, 0x04	; 4
 538:	35 d0       	rcall	.+106    	; 0x5a4 <sysclk_enable_module>
 53a:	0f c0       	rjmp	.+30     	; 0x55a <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 53c:	c0 38       	cpi	r28, 0x80	; 128
 53e:	84 e0       	ldi	r24, 0x04	; 4
 540:	d8 07       	cpc	r29, r24
 542:	21 f4       	brne	.+8      	; 0x54c <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 544:	60 e4       	ldi	r22, 0x40	; 64
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	2d d0       	rcall	.+90     	; 0x5a4 <sysclk_enable_module>
 54a:	07 c0       	rjmp	.+14     	; 0x55a <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 54c:	c0 3a       	cpi	r28, 0xA0	; 160
 54e:	e4 e0       	ldi	r30, 0x04	; 4
 550:	de 07       	cpc	r29, r30
 552:	19 f4       	brne	.+6      	; 0x55a <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 554:	60 e4       	ldi	r22, 0x40	; 64
 556:	85 e0       	ldi	r24, 0x05	; 5
 558:	25 d0       	rcall	.+74     	; 0x5a4 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 55a:	8d 81       	ldd	r24, Y+5	; 0x05
 55c:	8f 73       	andi	r24, 0x3F	; 63
 55e:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
 560:	f8 01       	movw	r30, r16
 562:	94 81       	ldd	r25, Z+4	; 0x04
 564:	85 81       	ldd	r24, Z+5	; 0x05
 566:	89 2b       	or	r24, r25
 568:	96 81       	ldd	r25, Z+6	; 0x06
 56a:	99 23       	and	r25, r25
 56c:	11 f0       	breq	.+4      	; 0x572 <usart_init_rs232+0x1a6>
 56e:	98 e0       	ldi	r25, 0x08	; 8
 570:	01 c0       	rjmp	.+2      	; 0x574 <usart_init_rs232+0x1a8>
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	89 2b       	or	r24, r25
 576:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
 578:	f8 01       	movw	r30, r16
 57a:	40 81       	ld	r20, Z
 57c:	51 81       	ldd	r21, Z+1	; 0x01
 57e:	62 81       	ldd	r22, Z+2	; 0x02
 580:	73 81       	ldd	r23, Z+3	; 0x03
 582:	00 e0       	ldi	r16, 0x00	; 0
 584:	18 e4       	ldi	r17, 0x48	; 72
 586:	28 ee       	ldi	r18, 0xE8	; 232
 588:	31 e0       	ldi	r19, 0x01	; 1
 58a:	ce 01       	movw	r24, r28
 58c:	19 de       	rcall	.-974    	; 0x1c0 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
 58e:	9c 81       	ldd	r25, Y+4	; 0x04
 590:	98 60       	ori	r25, 0x08	; 8
 592:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
 594:	9c 81       	ldd	r25, Y+4	; 0x04
 596:	90 61       	ori	r25, 0x10	; 16
 598:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	08 95       	ret

000005a4 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 5a4:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 5a6:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 5a8:	e8 2f       	mov	r30, r24
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	e0 59       	subi	r30, 0x90	; 144
 5ae:	ff 4f       	sbci	r31, 0xFF	; 255
 5b0:	60 95       	com	r22
 5b2:	80 81       	ld	r24, Z
 5b4:	68 23       	and	r22, r24
 5b6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 5b8:	9f bf       	out	0x3f, r25	; 63
 5ba:	08 95       	ret

000005bc <__vector_14>:
		tc_tcd1_err_callback = callback;
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
		tc_tce0_err_callback = callback;
 5bc:	1f 92       	push	r1
 5be:	0f 92       	push	r0
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	0f 92       	push	r0
 5c4:	11 24       	eor	r1, r1
 5c6:	2f 93       	push	r18
 5c8:	3f 93       	push	r19
 5ca:	4f 93       	push	r20
 5cc:	5f 93       	push	r21
 5ce:	6f 93       	push	r22
 5d0:	7f 93       	push	r23
 5d2:	8f 93       	push	r24
 5d4:	9f 93       	push	r25
 5d6:	af 93       	push	r26
 5d8:	bf 93       	push	r27
 5da:	ef 93       	push	r30
 5dc:	ff 93       	push	r31
 5de:	e0 91 3a 20 	lds	r30, 0x203A
 5e2:	f0 91 3b 20 	lds	r31, 0x203B
 5e6:	30 97       	sbiw	r30, 0x00	; 0
 5e8:	09 f0       	breq	.+2      	; 0x5ec <__vector_14+0x30>
 5ea:	09 95       	icall
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <__vector_15>:
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	2f 93       	push	r18
 61a:	3f 93       	push	r19
 61c:	4f 93       	push	r20
 61e:	5f 93       	push	r21
 620:	6f 93       	push	r22
 622:	7f 93       	push	r23
 624:	8f 93       	push	r24
 626:	9f 93       	push	r25
 628:	af 93       	push	r26
 62a:	bf 93       	push	r27
 62c:	ef 93       	push	r30
 62e:	ff 93       	push	r31
 630:	e0 91 38 20 	lds	r30, 0x2038
 634:	f0 91 39 20 	lds	r31, 0x2039
 638:	30 97       	sbiw	r30, 0x00	; 0
 63a:	09 f0       	breq	.+2      	; 0x63e <__vector_15+0x30>
 63c:	09 95       	icall
 63e:	ff 91       	pop	r31
 640:	ef 91       	pop	r30
 642:	bf 91       	pop	r27
 644:	af 91       	pop	r26
 646:	9f 91       	pop	r25
 648:	8f 91       	pop	r24
 64a:	7f 91       	pop	r23
 64c:	6f 91       	pop	r22
 64e:	5f 91       	pop	r21
 650:	4f 91       	pop	r20
 652:	3f 91       	pop	r19
 654:	2f 91       	pop	r18
 656:	0f 90       	pop	r0
 658:	0f be       	out	0x3f, r0	; 63
 65a:	0f 90       	pop	r0
 65c:	1f 90       	pop	r1
 65e:	18 95       	reti

00000660 <__vector_16>:
 660:	1f 92       	push	r1
 662:	0f 92       	push	r0
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	0f 92       	push	r0
 668:	11 24       	eor	r1, r1
 66a:	2f 93       	push	r18
 66c:	3f 93       	push	r19
 66e:	4f 93       	push	r20
 670:	5f 93       	push	r21
 672:	6f 93       	push	r22
 674:	7f 93       	push	r23
 676:	8f 93       	push	r24
 678:	9f 93       	push	r25
 67a:	af 93       	push	r26
 67c:	bf 93       	push	r27
 67e:	ef 93       	push	r30
 680:	ff 93       	push	r31
 682:	e0 91 36 20 	lds	r30, 0x2036
 686:	f0 91 37 20 	lds	r31, 0x2037
 68a:	30 97       	sbiw	r30, 0x00	; 0
 68c:	09 f0       	breq	.+2      	; 0x690 <__vector_16+0x30>
 68e:	09 95       	icall
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <__vector_17>:
 6b2:	1f 92       	push	r1
 6b4:	0f 92       	push	r0
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	0f 92       	push	r0
 6ba:	11 24       	eor	r1, r1
 6bc:	2f 93       	push	r18
 6be:	3f 93       	push	r19
 6c0:	4f 93       	push	r20
 6c2:	5f 93       	push	r21
 6c4:	6f 93       	push	r22
 6c6:	7f 93       	push	r23
 6c8:	8f 93       	push	r24
 6ca:	9f 93       	push	r25
 6cc:	af 93       	push	r26
 6ce:	bf 93       	push	r27
 6d0:	ef 93       	push	r30
 6d2:	ff 93       	push	r31
 6d4:	e0 91 34 20 	lds	r30, 0x2034
 6d8:	f0 91 35 20 	lds	r31, 0x2035
 6dc:	30 97       	sbiw	r30, 0x00	; 0
 6de:	09 f0       	breq	.+2      	; 0x6e2 <__vector_17+0x30>
 6e0:	09 95       	icall
 6e2:	ff 91       	pop	r31
 6e4:	ef 91       	pop	r30
 6e6:	bf 91       	pop	r27
 6e8:	af 91       	pop	r26
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	7f 91       	pop	r23
 6f0:	6f 91       	pop	r22
 6f2:	5f 91       	pop	r21
 6f4:	4f 91       	pop	r20
 6f6:	3f 91       	pop	r19
 6f8:	2f 91       	pop	r18
 6fa:	0f 90       	pop	r0
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	0f 90       	pop	r0
 700:	1f 90       	pop	r1
 702:	18 95       	reti

00000704 <__vector_18>:
 704:	1f 92       	push	r1
 706:	0f 92       	push	r0
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	0f 92       	push	r0
 70c:	11 24       	eor	r1, r1
 70e:	2f 93       	push	r18
 710:	3f 93       	push	r19
 712:	4f 93       	push	r20
 714:	5f 93       	push	r21
 716:	6f 93       	push	r22
 718:	7f 93       	push	r23
 71a:	8f 93       	push	r24
 71c:	9f 93       	push	r25
 71e:	af 93       	push	r26
 720:	bf 93       	push	r27
 722:	ef 93       	push	r30
 724:	ff 93       	push	r31
 726:	e0 91 32 20 	lds	r30, 0x2032
 72a:	f0 91 33 20 	lds	r31, 0x2033
 72e:	30 97       	sbiw	r30, 0x00	; 0
 730:	09 f0       	breq	.+2      	; 0x734 <__vector_18+0x30>
 732:	09 95       	icall
 734:	ff 91       	pop	r31
 736:	ef 91       	pop	r30
 738:	bf 91       	pop	r27
 73a:	af 91       	pop	r26
 73c:	9f 91       	pop	r25
 73e:	8f 91       	pop	r24
 740:	7f 91       	pop	r23
 742:	6f 91       	pop	r22
 744:	5f 91       	pop	r21
 746:	4f 91       	pop	r20
 748:	3f 91       	pop	r19
 74a:	2f 91       	pop	r18
 74c:	0f 90       	pop	r0
 74e:	0f be       	out	0x3f, r0	; 63
 750:	0f 90       	pop	r0
 752:	1f 90       	pop	r1
 754:	18 95       	reti

00000756 <__vector_19>:
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	2f 93       	push	r18
 762:	3f 93       	push	r19
 764:	4f 93       	push	r20
 766:	5f 93       	push	r21
 768:	6f 93       	push	r22
 76a:	7f 93       	push	r23
 76c:	8f 93       	push	r24
 76e:	9f 93       	push	r25
 770:	af 93       	push	r26
 772:	bf 93       	push	r27
 774:	ef 93       	push	r30
 776:	ff 93       	push	r31
 778:	e0 91 30 20 	lds	r30, 0x2030
 77c:	f0 91 31 20 	lds	r31, 0x2031
 780:	30 97       	sbiw	r30, 0x00	; 0
 782:	09 f0       	breq	.+2      	; 0x786 <__vector_19+0x30>
 784:	09 95       	icall
 786:	ff 91       	pop	r31
 788:	ef 91       	pop	r30
 78a:	bf 91       	pop	r27
 78c:	af 91       	pop	r26
 78e:	9f 91       	pop	r25
 790:	8f 91       	pop	r24
 792:	7f 91       	pop	r23
 794:	6f 91       	pop	r22
 796:	5f 91       	pop	r21
 798:	4f 91       	pop	r20
 79a:	3f 91       	pop	r19
 79c:	2f 91       	pop	r18
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <__vector_20>:
 7a8:	1f 92       	push	r1
 7aa:	0f 92       	push	r0
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	0f 92       	push	r0
 7b0:	11 24       	eor	r1, r1
 7b2:	2f 93       	push	r18
 7b4:	3f 93       	push	r19
 7b6:	4f 93       	push	r20
 7b8:	5f 93       	push	r21
 7ba:	6f 93       	push	r22
 7bc:	7f 93       	push	r23
 7be:	8f 93       	push	r24
 7c0:	9f 93       	push	r25
 7c2:	af 93       	push	r26
 7c4:	bf 93       	push	r27
 7c6:	ef 93       	push	r30
 7c8:	ff 93       	push	r31
 7ca:	e0 91 2e 20 	lds	r30, 0x202E
 7ce:	f0 91 2f 20 	lds	r31, 0x202F
 7d2:	30 97       	sbiw	r30, 0x00	; 0
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <__vector_20+0x30>
 7d6:	09 95       	icall
 7d8:	ff 91       	pop	r31
 7da:	ef 91       	pop	r30
 7dc:	bf 91       	pop	r27
 7de:	af 91       	pop	r26
 7e0:	9f 91       	pop	r25
 7e2:	8f 91       	pop	r24
 7e4:	7f 91       	pop	r23
 7e6:	6f 91       	pop	r22
 7e8:	5f 91       	pop	r21
 7ea:	4f 91       	pop	r20
 7ec:	3f 91       	pop	r19
 7ee:	2f 91       	pop	r18
 7f0:	0f 90       	pop	r0
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	0f 90       	pop	r0
 7f6:	1f 90       	pop	r1
 7f8:	18 95       	reti

000007fa <__vector_21>:
 7fa:	1f 92       	push	r1
 7fc:	0f 92       	push	r0
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	0f 92       	push	r0
 802:	11 24       	eor	r1, r1
 804:	2f 93       	push	r18
 806:	3f 93       	push	r19
 808:	4f 93       	push	r20
 80a:	5f 93       	push	r21
 80c:	6f 93       	push	r22
 80e:	7f 93       	push	r23
 810:	8f 93       	push	r24
 812:	9f 93       	push	r25
 814:	af 93       	push	r26
 816:	bf 93       	push	r27
 818:	ef 93       	push	r30
 81a:	ff 93       	push	r31
 81c:	e0 91 2c 20 	lds	r30, 0x202C
 820:	f0 91 2d 20 	lds	r31, 0x202D
 824:	30 97       	sbiw	r30, 0x00	; 0
 826:	09 f0       	breq	.+2      	; 0x82a <__vector_21+0x30>
 828:	09 95       	icall
 82a:	ff 91       	pop	r31
 82c:	ef 91       	pop	r30
 82e:	bf 91       	pop	r27
 830:	af 91       	pop	r26
 832:	9f 91       	pop	r25
 834:	8f 91       	pop	r24
 836:	7f 91       	pop	r23
 838:	6f 91       	pop	r22
 83a:	5f 91       	pop	r21
 83c:	4f 91       	pop	r20
 83e:	3f 91       	pop	r19
 840:	2f 91       	pop	r18
 842:	0f 90       	pop	r0
 844:	0f be       	out	0x3f, r0	; 63
 846:	0f 90       	pop	r0
 848:	1f 90       	pop	r1
 84a:	18 95       	reti

0000084c <__vector_22>:
 84c:	1f 92       	push	r1
 84e:	0f 92       	push	r0
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	0f 92       	push	r0
 854:	11 24       	eor	r1, r1
 856:	2f 93       	push	r18
 858:	3f 93       	push	r19
 85a:	4f 93       	push	r20
 85c:	5f 93       	push	r21
 85e:	6f 93       	push	r22
 860:	7f 93       	push	r23
 862:	8f 93       	push	r24
 864:	9f 93       	push	r25
 866:	af 93       	push	r26
 868:	bf 93       	push	r27
 86a:	ef 93       	push	r30
 86c:	ff 93       	push	r31
 86e:	e0 91 2a 20 	lds	r30, 0x202A
 872:	f0 91 2b 20 	lds	r31, 0x202B
 876:	30 97       	sbiw	r30, 0x00	; 0
 878:	09 f0       	breq	.+2      	; 0x87c <__vector_22+0x30>
 87a:	09 95       	icall
 87c:	ff 91       	pop	r31
 87e:	ef 91       	pop	r30
 880:	bf 91       	pop	r27
 882:	af 91       	pop	r26
 884:	9f 91       	pop	r25
 886:	8f 91       	pop	r24
 888:	7f 91       	pop	r23
 88a:	6f 91       	pop	r22
 88c:	5f 91       	pop	r21
 88e:	4f 91       	pop	r20
 890:	3f 91       	pop	r19
 892:	2f 91       	pop	r18
 894:	0f 90       	pop	r0
 896:	0f be       	out	0x3f, r0	; 63
 898:	0f 90       	pop	r0
 89a:	1f 90       	pop	r1
 89c:	18 95       	reti

0000089e <__vector_23>:
 89e:	1f 92       	push	r1
 8a0:	0f 92       	push	r0
 8a2:	0f b6       	in	r0, 0x3f	; 63
 8a4:	0f 92       	push	r0
 8a6:	11 24       	eor	r1, r1
 8a8:	2f 93       	push	r18
 8aa:	3f 93       	push	r19
 8ac:	4f 93       	push	r20
 8ae:	5f 93       	push	r21
 8b0:	6f 93       	push	r22
 8b2:	7f 93       	push	r23
 8b4:	8f 93       	push	r24
 8b6:	9f 93       	push	r25
 8b8:	af 93       	push	r26
 8ba:	bf 93       	push	r27
 8bc:	ef 93       	push	r30
 8be:	ff 93       	push	r31
 8c0:	e0 91 28 20 	lds	r30, 0x2028
 8c4:	f0 91 29 20 	lds	r31, 0x2029
 8c8:	30 97       	sbiw	r30, 0x00	; 0
 8ca:	09 f0       	breq	.+2      	; 0x8ce <__vector_23+0x30>
 8cc:	09 95       	icall
 8ce:	ff 91       	pop	r31
 8d0:	ef 91       	pop	r30
 8d2:	bf 91       	pop	r27
 8d4:	af 91       	pop	r26
 8d6:	9f 91       	pop	r25
 8d8:	8f 91       	pop	r24
 8da:	7f 91       	pop	r23
 8dc:	6f 91       	pop	r22
 8de:	5f 91       	pop	r21
 8e0:	4f 91       	pop	r20
 8e2:	3f 91       	pop	r19
 8e4:	2f 91       	pop	r18
 8e6:	0f 90       	pop	r0
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	0f 90       	pop	r0
 8ec:	1f 90       	pop	r1
 8ee:	18 95       	reti

000008f0 <__vector_77>:
 8f0:	1f 92       	push	r1
 8f2:	0f 92       	push	r0
 8f4:	0f b6       	in	r0, 0x3f	; 63
 8f6:	0f 92       	push	r0
 8f8:	11 24       	eor	r1, r1
 8fa:	2f 93       	push	r18
 8fc:	3f 93       	push	r19
 8fe:	4f 93       	push	r20
 900:	5f 93       	push	r21
 902:	6f 93       	push	r22
 904:	7f 93       	push	r23
 906:	8f 93       	push	r24
 908:	9f 93       	push	r25
 90a:	af 93       	push	r26
 90c:	bf 93       	push	r27
 90e:	ef 93       	push	r30
 910:	ff 93       	push	r31
 912:	e0 91 26 20 	lds	r30, 0x2026
 916:	f0 91 27 20 	lds	r31, 0x2027
 91a:	30 97       	sbiw	r30, 0x00	; 0
 91c:	09 f0       	breq	.+2      	; 0x920 <__vector_77+0x30>
 91e:	09 95       	icall
 920:	ff 91       	pop	r31
 922:	ef 91       	pop	r30
 924:	bf 91       	pop	r27
 926:	af 91       	pop	r26
 928:	9f 91       	pop	r25
 92a:	8f 91       	pop	r24
 92c:	7f 91       	pop	r23
 92e:	6f 91       	pop	r22
 930:	5f 91       	pop	r21
 932:	4f 91       	pop	r20
 934:	3f 91       	pop	r19
 936:	2f 91       	pop	r18
 938:	0f 90       	pop	r0
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	0f 90       	pop	r0
 93e:	1f 90       	pop	r1
 940:	18 95       	reti

00000942 <__vector_78>:
 942:	1f 92       	push	r1
 944:	0f 92       	push	r0
 946:	0f b6       	in	r0, 0x3f	; 63
 948:	0f 92       	push	r0
 94a:	11 24       	eor	r1, r1
 94c:	2f 93       	push	r18
 94e:	3f 93       	push	r19
 950:	4f 93       	push	r20
 952:	5f 93       	push	r21
 954:	6f 93       	push	r22
 956:	7f 93       	push	r23
 958:	8f 93       	push	r24
 95a:	9f 93       	push	r25
 95c:	af 93       	push	r26
 95e:	bf 93       	push	r27
 960:	ef 93       	push	r30
 962:	ff 93       	push	r31
 964:	e0 91 24 20 	lds	r30, 0x2024
 968:	f0 91 25 20 	lds	r31, 0x2025
 96c:	30 97       	sbiw	r30, 0x00	; 0
 96e:	09 f0       	breq	.+2      	; 0x972 <__vector_78+0x30>
 970:	09 95       	icall
 972:	ff 91       	pop	r31
 974:	ef 91       	pop	r30
 976:	bf 91       	pop	r27
 978:	af 91       	pop	r26
 97a:	9f 91       	pop	r25
 97c:	8f 91       	pop	r24
 97e:	7f 91       	pop	r23
 980:	6f 91       	pop	r22
 982:	5f 91       	pop	r21
 984:	4f 91       	pop	r20
 986:	3f 91       	pop	r19
 988:	2f 91       	pop	r18
 98a:	0f 90       	pop	r0
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	0f 90       	pop	r0
 990:	1f 90       	pop	r1
 992:	18 95       	reti

00000994 <__vector_79>:
 994:	1f 92       	push	r1
 996:	0f 92       	push	r0
 998:	0f b6       	in	r0, 0x3f	; 63
 99a:	0f 92       	push	r0
 99c:	11 24       	eor	r1, r1
 99e:	2f 93       	push	r18
 9a0:	3f 93       	push	r19
 9a2:	4f 93       	push	r20
 9a4:	5f 93       	push	r21
 9a6:	6f 93       	push	r22
 9a8:	7f 93       	push	r23
 9aa:	8f 93       	push	r24
 9ac:	9f 93       	push	r25
 9ae:	af 93       	push	r26
 9b0:	bf 93       	push	r27
 9b2:	ef 93       	push	r30
 9b4:	ff 93       	push	r31
 9b6:	e0 91 22 20 	lds	r30, 0x2022
 9ba:	f0 91 23 20 	lds	r31, 0x2023
 9be:	30 97       	sbiw	r30, 0x00	; 0
 9c0:	09 f0       	breq	.+2      	; 0x9c4 <__vector_79+0x30>
 9c2:	09 95       	icall
 9c4:	ff 91       	pop	r31
 9c6:	ef 91       	pop	r30
 9c8:	bf 91       	pop	r27
 9ca:	af 91       	pop	r26
 9cc:	9f 91       	pop	r25
 9ce:	8f 91       	pop	r24
 9d0:	7f 91       	pop	r23
 9d2:	6f 91       	pop	r22
 9d4:	5f 91       	pop	r21
 9d6:	4f 91       	pop	r20
 9d8:	3f 91       	pop	r19
 9da:	2f 91       	pop	r18
 9dc:	0f 90       	pop	r0
 9de:	0f be       	out	0x3f, r0	; 63
 9e0:	0f 90       	pop	r0
 9e2:	1f 90       	pop	r1
 9e4:	18 95       	reti

000009e6 <__vector_80>:
 9e6:	1f 92       	push	r1
 9e8:	0f 92       	push	r0
 9ea:	0f b6       	in	r0, 0x3f	; 63
 9ec:	0f 92       	push	r0
 9ee:	11 24       	eor	r1, r1
 9f0:	2f 93       	push	r18
 9f2:	3f 93       	push	r19
 9f4:	4f 93       	push	r20
 9f6:	5f 93       	push	r21
 9f8:	6f 93       	push	r22
 9fa:	7f 93       	push	r23
 9fc:	8f 93       	push	r24
 9fe:	9f 93       	push	r25
 a00:	af 93       	push	r26
 a02:	bf 93       	push	r27
 a04:	ef 93       	push	r30
 a06:	ff 93       	push	r31
 a08:	e0 91 20 20 	lds	r30, 0x2020
 a0c:	f0 91 21 20 	lds	r31, 0x2021
 a10:	30 97       	sbiw	r30, 0x00	; 0
 a12:	09 f0       	breq	.+2      	; 0xa16 <__vector_80+0x30>
 a14:	09 95       	icall
 a16:	ff 91       	pop	r31
 a18:	ef 91       	pop	r30
 a1a:	bf 91       	pop	r27
 a1c:	af 91       	pop	r26
 a1e:	9f 91       	pop	r25
 a20:	8f 91       	pop	r24
 a22:	7f 91       	pop	r23
 a24:	6f 91       	pop	r22
 a26:	5f 91       	pop	r21
 a28:	4f 91       	pop	r20
 a2a:	3f 91       	pop	r19
 a2c:	2f 91       	pop	r18
 a2e:	0f 90       	pop	r0
 a30:	0f be       	out	0x3f, r0	; 63
 a32:	0f 90       	pop	r0
 a34:	1f 90       	pop	r1
 a36:	18 95       	reti

00000a38 <__vector_81>:
 a38:	1f 92       	push	r1
 a3a:	0f 92       	push	r0
 a3c:	0f b6       	in	r0, 0x3f	; 63
 a3e:	0f 92       	push	r0
 a40:	11 24       	eor	r1, r1
 a42:	2f 93       	push	r18
 a44:	3f 93       	push	r19
 a46:	4f 93       	push	r20
 a48:	5f 93       	push	r21
 a4a:	6f 93       	push	r22
 a4c:	7f 93       	push	r23
 a4e:	8f 93       	push	r24
 a50:	9f 93       	push	r25
 a52:	af 93       	push	r26
 a54:	bf 93       	push	r27
 a56:	ef 93       	push	r30
 a58:	ff 93       	push	r31
 a5a:	e0 91 1e 20 	lds	r30, 0x201E
 a5e:	f0 91 1f 20 	lds	r31, 0x201F
 a62:	30 97       	sbiw	r30, 0x00	; 0
 a64:	09 f0       	breq	.+2      	; 0xa68 <__vector_81+0x30>
 a66:	09 95       	icall
 a68:	ff 91       	pop	r31
 a6a:	ef 91       	pop	r30
 a6c:	bf 91       	pop	r27
 a6e:	af 91       	pop	r26
 a70:	9f 91       	pop	r25
 a72:	8f 91       	pop	r24
 a74:	7f 91       	pop	r23
 a76:	6f 91       	pop	r22
 a78:	5f 91       	pop	r21
 a7a:	4f 91       	pop	r20
 a7c:	3f 91       	pop	r19
 a7e:	2f 91       	pop	r18
 a80:	0f 90       	pop	r0
 a82:	0f be       	out	0x3f, r0	; 63
 a84:	0f 90       	pop	r0
 a86:	1f 90       	pop	r1
 a88:	18 95       	reti

00000a8a <__vector_82>:
 a8a:	1f 92       	push	r1
 a8c:	0f 92       	push	r0
 a8e:	0f b6       	in	r0, 0x3f	; 63
 a90:	0f 92       	push	r0
 a92:	11 24       	eor	r1, r1
 a94:	2f 93       	push	r18
 a96:	3f 93       	push	r19
 a98:	4f 93       	push	r20
 a9a:	5f 93       	push	r21
 a9c:	6f 93       	push	r22
 a9e:	7f 93       	push	r23
 aa0:	8f 93       	push	r24
 aa2:	9f 93       	push	r25
 aa4:	af 93       	push	r26
 aa6:	bf 93       	push	r27
 aa8:	ef 93       	push	r30
 aaa:	ff 93       	push	r31
 aac:	e0 91 1c 20 	lds	r30, 0x201C
 ab0:	f0 91 1d 20 	lds	r31, 0x201D
 ab4:	30 97       	sbiw	r30, 0x00	; 0
 ab6:	09 f0       	breq	.+2      	; 0xaba <__vector_82+0x30>
 ab8:	09 95       	icall
 aba:	ff 91       	pop	r31
 abc:	ef 91       	pop	r30
 abe:	bf 91       	pop	r27
 ac0:	af 91       	pop	r26
 ac2:	9f 91       	pop	r25
 ac4:	8f 91       	pop	r24
 ac6:	7f 91       	pop	r23
 ac8:	6f 91       	pop	r22
 aca:	5f 91       	pop	r21
 acc:	4f 91       	pop	r20
 ace:	3f 91       	pop	r19
 ad0:	2f 91       	pop	r18
 ad2:	0f 90       	pop	r0
 ad4:	0f be       	out	0x3f, r0	; 63
 ad6:	0f 90       	pop	r0
 ad8:	1f 90       	pop	r1
 ada:	18 95       	reti

00000adc <__vector_83>:
 adc:	1f 92       	push	r1
 ade:	0f 92       	push	r0
 ae0:	0f b6       	in	r0, 0x3f	; 63
 ae2:	0f 92       	push	r0
 ae4:	11 24       	eor	r1, r1
 ae6:	2f 93       	push	r18
 ae8:	3f 93       	push	r19
 aea:	4f 93       	push	r20
 aec:	5f 93       	push	r21
 aee:	6f 93       	push	r22
 af0:	7f 93       	push	r23
 af2:	8f 93       	push	r24
 af4:	9f 93       	push	r25
 af6:	af 93       	push	r26
 af8:	bf 93       	push	r27
 afa:	ef 93       	push	r30
 afc:	ff 93       	push	r31
 afe:	e0 91 1a 20 	lds	r30, 0x201A
 b02:	f0 91 1b 20 	lds	r31, 0x201B
 b06:	30 97       	sbiw	r30, 0x00	; 0
 b08:	09 f0       	breq	.+2      	; 0xb0c <__vector_83+0x30>
 b0a:	09 95       	icall
 b0c:	ff 91       	pop	r31
 b0e:	ef 91       	pop	r30
 b10:	bf 91       	pop	r27
 b12:	af 91       	pop	r26
 b14:	9f 91       	pop	r25
 b16:	8f 91       	pop	r24
 b18:	7f 91       	pop	r23
 b1a:	6f 91       	pop	r22
 b1c:	5f 91       	pop	r21
 b1e:	4f 91       	pop	r20
 b20:	3f 91       	pop	r19
 b22:	2f 91       	pop	r18
 b24:	0f 90       	pop	r0
 b26:	0f be       	out	0x3f, r0	; 63
 b28:	0f 90       	pop	r0
 b2a:	1f 90       	pop	r1
 b2c:	18 95       	reti

00000b2e <__vector_84>:
 b2e:	1f 92       	push	r1
 b30:	0f 92       	push	r0
 b32:	0f b6       	in	r0, 0x3f	; 63
 b34:	0f 92       	push	r0
 b36:	11 24       	eor	r1, r1
 b38:	2f 93       	push	r18
 b3a:	3f 93       	push	r19
 b3c:	4f 93       	push	r20
 b3e:	5f 93       	push	r21
 b40:	6f 93       	push	r22
 b42:	7f 93       	push	r23
 b44:	8f 93       	push	r24
 b46:	9f 93       	push	r25
 b48:	af 93       	push	r26
 b4a:	bf 93       	push	r27
 b4c:	ef 93       	push	r30
 b4e:	ff 93       	push	r31
 b50:	e0 91 18 20 	lds	r30, 0x2018
 b54:	f0 91 19 20 	lds	r31, 0x2019
 b58:	30 97       	sbiw	r30, 0x00	; 0
 b5a:	09 f0       	breq	.+2      	; 0xb5e <__vector_84+0x30>
 b5c:	09 95       	icall
 b5e:	ff 91       	pop	r31
 b60:	ef 91       	pop	r30
 b62:	bf 91       	pop	r27
 b64:	af 91       	pop	r26
 b66:	9f 91       	pop	r25
 b68:	8f 91       	pop	r24
 b6a:	7f 91       	pop	r23
 b6c:	6f 91       	pop	r22
 b6e:	5f 91       	pop	r21
 b70:	4f 91       	pop	r20
 b72:	3f 91       	pop	r19
 b74:	2f 91       	pop	r18
 b76:	0f 90       	pop	r0
 b78:	0f be       	out	0x3f, r0	; 63
 b7a:	0f 90       	pop	r0
 b7c:	1f 90       	pop	r1
 b7e:	18 95       	reti

00000b80 <__vector_85>:
 b80:	1f 92       	push	r1
 b82:	0f 92       	push	r0
 b84:	0f b6       	in	r0, 0x3f	; 63
 b86:	0f 92       	push	r0
 b88:	11 24       	eor	r1, r1
 b8a:	2f 93       	push	r18
 b8c:	3f 93       	push	r19
 b8e:	4f 93       	push	r20
 b90:	5f 93       	push	r21
 b92:	6f 93       	push	r22
 b94:	7f 93       	push	r23
 b96:	8f 93       	push	r24
 b98:	9f 93       	push	r25
 b9a:	af 93       	push	r26
 b9c:	bf 93       	push	r27
 b9e:	ef 93       	push	r30
 ba0:	ff 93       	push	r31
 ba2:	e0 91 16 20 	lds	r30, 0x2016
 ba6:	f0 91 17 20 	lds	r31, 0x2017
 baa:	30 97       	sbiw	r30, 0x00	; 0
 bac:	09 f0       	breq	.+2      	; 0xbb0 <__vector_85+0x30>
 bae:	09 95       	icall
 bb0:	ff 91       	pop	r31
 bb2:	ef 91       	pop	r30
 bb4:	bf 91       	pop	r27
 bb6:	af 91       	pop	r26
 bb8:	9f 91       	pop	r25
 bba:	8f 91       	pop	r24
 bbc:	7f 91       	pop	r23
 bbe:	6f 91       	pop	r22
 bc0:	5f 91       	pop	r21
 bc2:	4f 91       	pop	r20
 bc4:	3f 91       	pop	r19
 bc6:	2f 91       	pop	r18
 bc8:	0f 90       	pop	r0
 bca:	0f be       	out	0x3f, r0	; 63
 bcc:	0f 90       	pop	r0
 bce:	1f 90       	pop	r1
 bd0:	18 95       	reti

00000bd2 <__vector_86>:
 bd2:	1f 92       	push	r1
 bd4:	0f 92       	push	r0
 bd6:	0f b6       	in	r0, 0x3f	; 63
 bd8:	0f 92       	push	r0
 bda:	11 24       	eor	r1, r1
 bdc:	2f 93       	push	r18
 bde:	3f 93       	push	r19
 be0:	4f 93       	push	r20
 be2:	5f 93       	push	r21
 be4:	6f 93       	push	r22
 be6:	7f 93       	push	r23
 be8:	8f 93       	push	r24
 bea:	9f 93       	push	r25
 bec:	af 93       	push	r26
 bee:	bf 93       	push	r27
 bf0:	ef 93       	push	r30
 bf2:	ff 93       	push	r31
 bf4:	e0 91 14 20 	lds	r30, 0x2014
 bf8:	f0 91 15 20 	lds	r31, 0x2015
 bfc:	30 97       	sbiw	r30, 0x00	; 0
 bfe:	09 f0       	breq	.+2      	; 0xc02 <__vector_86+0x30>
 c00:	09 95       	icall
 c02:	ff 91       	pop	r31
 c04:	ef 91       	pop	r30
 c06:	bf 91       	pop	r27
 c08:	af 91       	pop	r26
 c0a:	9f 91       	pop	r25
 c0c:	8f 91       	pop	r24
 c0e:	7f 91       	pop	r23
 c10:	6f 91       	pop	r22
 c12:	5f 91       	pop	r21
 c14:	4f 91       	pop	r20
 c16:	3f 91       	pop	r19
 c18:	2f 91       	pop	r18
 c1a:	0f 90       	pop	r0
 c1c:	0f be       	out	0x3f, r0	; 63
 c1e:	0f 90       	pop	r0
 c20:	1f 90       	pop	r1
 c22:	18 95       	reti

00000c24 <__vector_47>:
 c24:	1f 92       	push	r1
 c26:	0f 92       	push	r0
 c28:	0f b6       	in	r0, 0x3f	; 63
 c2a:	0f 92       	push	r0
 c2c:	11 24       	eor	r1, r1
 c2e:	2f 93       	push	r18
 c30:	3f 93       	push	r19
 c32:	4f 93       	push	r20
 c34:	5f 93       	push	r21
 c36:	6f 93       	push	r22
 c38:	7f 93       	push	r23
 c3a:	8f 93       	push	r24
 c3c:	9f 93       	push	r25
 c3e:	af 93       	push	r26
 c40:	bf 93       	push	r27
 c42:	ef 93       	push	r30
 c44:	ff 93       	push	r31
 c46:	e0 91 12 20 	lds	r30, 0x2012
 c4a:	f0 91 13 20 	lds	r31, 0x2013
 c4e:	30 97       	sbiw	r30, 0x00	; 0
 c50:	09 f0       	breq	.+2      	; 0xc54 <__vector_47+0x30>
 c52:	09 95       	icall
 c54:	ff 91       	pop	r31
 c56:	ef 91       	pop	r30
 c58:	bf 91       	pop	r27
 c5a:	af 91       	pop	r26
 c5c:	9f 91       	pop	r25
 c5e:	8f 91       	pop	r24
 c60:	7f 91       	pop	r23
 c62:	6f 91       	pop	r22
 c64:	5f 91       	pop	r21
 c66:	4f 91       	pop	r20
 c68:	3f 91       	pop	r19
 c6a:	2f 91       	pop	r18
 c6c:	0f 90       	pop	r0
 c6e:	0f be       	out	0x3f, r0	; 63
 c70:	0f 90       	pop	r0
 c72:	1f 90       	pop	r1
 c74:	18 95       	reti

00000c76 <__vector_48>:
 c76:	1f 92       	push	r1
 c78:	0f 92       	push	r0
 c7a:	0f b6       	in	r0, 0x3f	; 63
 c7c:	0f 92       	push	r0
 c7e:	11 24       	eor	r1, r1
 c80:	2f 93       	push	r18
 c82:	3f 93       	push	r19
 c84:	4f 93       	push	r20
 c86:	5f 93       	push	r21
 c88:	6f 93       	push	r22
 c8a:	7f 93       	push	r23
 c8c:	8f 93       	push	r24
 c8e:	9f 93       	push	r25
 c90:	af 93       	push	r26
 c92:	bf 93       	push	r27
 c94:	ef 93       	push	r30
 c96:	ff 93       	push	r31
 c98:	e0 91 10 20 	lds	r30, 0x2010
 c9c:	f0 91 11 20 	lds	r31, 0x2011
 ca0:	30 97       	sbiw	r30, 0x00	; 0
 ca2:	09 f0       	breq	.+2      	; 0xca6 <__vector_48+0x30>
 ca4:	09 95       	icall
 ca6:	ff 91       	pop	r31
 ca8:	ef 91       	pop	r30
 caa:	bf 91       	pop	r27
 cac:	af 91       	pop	r26
 cae:	9f 91       	pop	r25
 cb0:	8f 91       	pop	r24
 cb2:	7f 91       	pop	r23
 cb4:	6f 91       	pop	r22
 cb6:	5f 91       	pop	r21
 cb8:	4f 91       	pop	r20
 cba:	3f 91       	pop	r19
 cbc:	2f 91       	pop	r18
 cbe:	0f 90       	pop	r0
 cc0:	0f be       	out	0x3f, r0	; 63
 cc2:	0f 90       	pop	r0
 cc4:	1f 90       	pop	r1
 cc6:	18 95       	reti

00000cc8 <__vector_49>:
 cc8:	1f 92       	push	r1
 cca:	0f 92       	push	r0
 ccc:	0f b6       	in	r0, 0x3f	; 63
 cce:	0f 92       	push	r0
 cd0:	11 24       	eor	r1, r1
 cd2:	2f 93       	push	r18
 cd4:	3f 93       	push	r19
 cd6:	4f 93       	push	r20
 cd8:	5f 93       	push	r21
 cda:	6f 93       	push	r22
 cdc:	7f 93       	push	r23
 cde:	8f 93       	push	r24
 ce0:	9f 93       	push	r25
 ce2:	af 93       	push	r26
 ce4:	bf 93       	push	r27
 ce6:	ef 93       	push	r30
 ce8:	ff 93       	push	r31
 cea:	e0 91 0e 20 	lds	r30, 0x200E
 cee:	f0 91 0f 20 	lds	r31, 0x200F
 cf2:	30 97       	sbiw	r30, 0x00	; 0
 cf4:	09 f0       	breq	.+2      	; 0xcf8 <__vector_49+0x30>
 cf6:	09 95       	icall
 cf8:	ff 91       	pop	r31
 cfa:	ef 91       	pop	r30
 cfc:	bf 91       	pop	r27
 cfe:	af 91       	pop	r26
 d00:	9f 91       	pop	r25
 d02:	8f 91       	pop	r24
 d04:	7f 91       	pop	r23
 d06:	6f 91       	pop	r22
 d08:	5f 91       	pop	r21
 d0a:	4f 91       	pop	r20
 d0c:	3f 91       	pop	r19
 d0e:	2f 91       	pop	r18
 d10:	0f 90       	pop	r0
 d12:	0f be       	out	0x3f, r0	; 63
 d14:	0f 90       	pop	r0
 d16:	1f 90       	pop	r1
 d18:	18 95       	reti

00000d1a <__vector_50>:
 d1a:	1f 92       	push	r1
 d1c:	0f 92       	push	r0
 d1e:	0f b6       	in	r0, 0x3f	; 63
 d20:	0f 92       	push	r0
 d22:	11 24       	eor	r1, r1
 d24:	2f 93       	push	r18
 d26:	3f 93       	push	r19
 d28:	4f 93       	push	r20
 d2a:	5f 93       	push	r21
 d2c:	6f 93       	push	r22
 d2e:	7f 93       	push	r23
 d30:	8f 93       	push	r24
 d32:	9f 93       	push	r25
 d34:	af 93       	push	r26
 d36:	bf 93       	push	r27
 d38:	ef 93       	push	r30
 d3a:	ff 93       	push	r31
 d3c:	e0 91 0c 20 	lds	r30, 0x200C
 d40:	f0 91 0d 20 	lds	r31, 0x200D
 d44:	30 97       	sbiw	r30, 0x00	; 0
 d46:	09 f0       	breq	.+2      	; 0xd4a <__vector_50+0x30>
 d48:	09 95       	icall
 d4a:	ff 91       	pop	r31
 d4c:	ef 91       	pop	r30
 d4e:	bf 91       	pop	r27
 d50:	af 91       	pop	r26
 d52:	9f 91       	pop	r25
 d54:	8f 91       	pop	r24
 d56:	7f 91       	pop	r23
 d58:	6f 91       	pop	r22
 d5a:	5f 91       	pop	r21
 d5c:	4f 91       	pop	r20
 d5e:	3f 91       	pop	r19
 d60:	2f 91       	pop	r18
 d62:	0f 90       	pop	r0
 d64:	0f be       	out	0x3f, r0	; 63
 d66:	0f 90       	pop	r0
 d68:	1f 90       	pop	r1
 d6a:	18 95       	reti

00000d6c <__vector_51>:
 d6c:	1f 92       	push	r1
 d6e:	0f 92       	push	r0
 d70:	0f b6       	in	r0, 0x3f	; 63
 d72:	0f 92       	push	r0
 d74:	11 24       	eor	r1, r1
 d76:	2f 93       	push	r18
 d78:	3f 93       	push	r19
 d7a:	4f 93       	push	r20
 d7c:	5f 93       	push	r21
 d7e:	6f 93       	push	r22
 d80:	7f 93       	push	r23
 d82:	8f 93       	push	r24
 d84:	9f 93       	push	r25
 d86:	af 93       	push	r26
 d88:	bf 93       	push	r27
 d8a:	ef 93       	push	r30
 d8c:	ff 93       	push	r31
 d8e:	e0 91 0a 20 	lds	r30, 0x200A
 d92:	f0 91 0b 20 	lds	r31, 0x200B
 d96:	30 97       	sbiw	r30, 0x00	; 0
 d98:	09 f0       	breq	.+2      	; 0xd9c <__vector_51+0x30>
 d9a:	09 95       	icall
 d9c:	ff 91       	pop	r31
 d9e:	ef 91       	pop	r30
 da0:	bf 91       	pop	r27
 da2:	af 91       	pop	r26
 da4:	9f 91       	pop	r25
 da6:	8f 91       	pop	r24
 da8:	7f 91       	pop	r23
 daa:	6f 91       	pop	r22
 dac:	5f 91       	pop	r21
 dae:	4f 91       	pop	r20
 db0:	3f 91       	pop	r19
 db2:	2f 91       	pop	r18
 db4:	0f 90       	pop	r0
 db6:	0f be       	out	0x3f, r0	; 63
 db8:	0f 90       	pop	r0
 dba:	1f 90       	pop	r1
 dbc:	18 95       	reti

00000dbe <__vector_52>:
 dbe:	1f 92       	push	r1
 dc0:	0f 92       	push	r0
 dc2:	0f b6       	in	r0, 0x3f	; 63
 dc4:	0f 92       	push	r0
 dc6:	11 24       	eor	r1, r1
 dc8:	2f 93       	push	r18
 dca:	3f 93       	push	r19
 dcc:	4f 93       	push	r20
 dce:	5f 93       	push	r21
 dd0:	6f 93       	push	r22
 dd2:	7f 93       	push	r23
 dd4:	8f 93       	push	r24
 dd6:	9f 93       	push	r25
 dd8:	af 93       	push	r26
 dda:	bf 93       	push	r27
 ddc:	ef 93       	push	r30
 dde:	ff 93       	push	r31
 de0:	e0 91 08 20 	lds	r30, 0x2008
 de4:	f0 91 09 20 	lds	r31, 0x2009
 de8:	30 97       	sbiw	r30, 0x00	; 0
 dea:	09 f0       	breq	.+2      	; 0xdee <__vector_52+0x30>
 dec:	09 95       	icall
 dee:	ff 91       	pop	r31
 df0:	ef 91       	pop	r30
 df2:	bf 91       	pop	r27
 df4:	af 91       	pop	r26
 df6:	9f 91       	pop	r25
 df8:	8f 91       	pop	r24
 dfa:	7f 91       	pop	r23
 dfc:	6f 91       	pop	r22
 dfe:	5f 91       	pop	r21
 e00:	4f 91       	pop	r20
 e02:	3f 91       	pop	r19
 e04:	2f 91       	pop	r18
 e06:	0f 90       	pop	r0
 e08:	0f be       	out	0x3f, r0	; 63
 e0a:	0f 90       	pop	r0
 e0c:	1f 90       	pop	r1
 e0e:	18 95       	reti

00000e10 <tc_enable>:
 e10:	cf 93       	push	r28
 e12:	cf b7       	in	r28, 0x3f	; 63
 e14:	f8 94       	cli
 e16:	28 2f       	mov	r18, r24
 e18:	39 2f       	mov	r19, r25
 e1a:	21 15       	cp	r18, r1
 e1c:	88 e0       	ldi	r24, 0x08	; 8
 e1e:	38 07       	cpc	r19, r24
 e20:	39 f4       	brne	.+14     	; 0xe30 <tc_enable+0x20>
 e22:	61 e0       	ldi	r22, 0x01	; 1
 e24:	83 e0       	ldi	r24, 0x03	; 3
 e26:	be db       	rcall	.-2180   	; 0x5a4 <sysclk_enable_module>
 e28:	64 e0       	ldi	r22, 0x04	; 4
 e2a:	83 e0       	ldi	r24, 0x03	; 3
 e2c:	bb db       	rcall	.-2186   	; 0x5a4 <sysclk_enable_module>
 e2e:	2d c0       	rjmp	.+90     	; 0xe8a <tc_enable+0x7a>
 e30:	20 34       	cpi	r18, 0x40	; 64
 e32:	88 e0       	ldi	r24, 0x08	; 8
 e34:	38 07       	cpc	r19, r24
 e36:	39 f4       	brne	.+14     	; 0xe46 <tc_enable+0x36>
 e38:	62 e0       	ldi	r22, 0x02	; 2
 e3a:	83 e0       	ldi	r24, 0x03	; 3
 e3c:	b3 db       	rcall	.-2202   	; 0x5a4 <sysclk_enable_module>
 e3e:	64 e0       	ldi	r22, 0x04	; 4
 e40:	83 e0       	ldi	r24, 0x03	; 3
 e42:	b0 db       	rcall	.-2208   	; 0x5a4 <sysclk_enable_module>
 e44:	22 c0       	rjmp	.+68     	; 0xe8a <tc_enable+0x7a>
 e46:	21 15       	cp	r18, r1
 e48:	89 e0       	ldi	r24, 0x09	; 9
 e4a:	38 07       	cpc	r19, r24
 e4c:	39 f4       	brne	.+14     	; 0xe5c <tc_enable+0x4c>
 e4e:	61 e0       	ldi	r22, 0x01	; 1
 e50:	84 e0       	ldi	r24, 0x04	; 4
 e52:	a8 db       	rcall	.-2224   	; 0x5a4 <sysclk_enable_module>
 e54:	64 e0       	ldi	r22, 0x04	; 4
 e56:	84 e0       	ldi	r24, 0x04	; 4
 e58:	a5 db       	rcall	.-2230   	; 0x5a4 <sysclk_enable_module>
 e5a:	17 c0       	rjmp	.+46     	; 0xe8a <tc_enable+0x7a>
 e5c:	20 34       	cpi	r18, 0x40	; 64
 e5e:	89 e0       	ldi	r24, 0x09	; 9
 e60:	38 07       	cpc	r19, r24
 e62:	39 f4       	brne	.+14     	; 0xe72 <tc_enable+0x62>
 e64:	62 e0       	ldi	r22, 0x02	; 2
 e66:	84 e0       	ldi	r24, 0x04	; 4
 e68:	9d db       	rcall	.-2246   	; 0x5a4 <sysclk_enable_module>
 e6a:	64 e0       	ldi	r22, 0x04	; 4
 e6c:	84 e0       	ldi	r24, 0x04	; 4
 e6e:	9a db       	rcall	.-2252   	; 0x5a4 <sysclk_enable_module>
 e70:	0c c0       	rjmp	.+24     	; 0xe8a <tc_enable+0x7a>
 e72:	21 15       	cp	r18, r1
 e74:	3a 40       	sbci	r19, 0x0A	; 10
 e76:	39 f4       	brne	.+14     	; 0xe86 <tc_enable+0x76>
 e78:	61 e0       	ldi	r22, 0x01	; 1
 e7a:	85 e0       	ldi	r24, 0x05	; 5
 e7c:	93 db       	rcall	.-2266   	; 0x5a4 <sysclk_enable_module>
 e7e:	64 e0       	ldi	r22, 0x04	; 4
 e80:	85 e0       	ldi	r24, 0x05	; 5
 e82:	90 db       	rcall	.-2272   	; 0x5a4 <sysclk_enable_module>
 e84:	02 c0       	rjmp	.+4      	; 0xe8a <tc_enable+0x7a>
 e86:	cf bf       	out	0x3f, r28	; 63
 e88:	01 c0       	rjmp	.+2      	; 0xe8c <tc_enable+0x7c>
 e8a:	cf bf       	out	0x3f, r28	; 63
 e8c:	cf 91       	pop	r28
 e8e:	08 95       	ret

00000e90 <tc_set_cca_interrupt_callback>:
}

void tc_set_cca_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
 e90:	81 15       	cp	r24, r1
 e92:	28 e0       	ldi	r18, 0x08	; 8
 e94:	92 07       	cpc	r25, r18
 e96:	29 f4       	brne	.+10     	; 0xea2 <tc_set_cca_interrupt_callback+0x12>
		tc_tcc0_cca_callback = callback;
 e98:	60 93 36 20 	sts	0x2036, r22
 e9c:	70 93 37 20 	sts	0x2037, r23
 ea0:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
 ea2:	80 34       	cpi	r24, 0x40	; 64
 ea4:	28 e0       	ldi	r18, 0x08	; 8
 ea6:	92 07       	cpc	r25, r18
 ea8:	29 f4       	brne	.+10     	; 0xeb4 <tc_set_cca_interrupt_callback+0x24>
		tc_tcc1_cca_callback = callback;
 eaa:	60 93 2a 20 	sts	0x202A, r22
 eae:	70 93 2b 20 	sts	0x202B, r23
 eb2:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
 eb4:	81 15       	cp	r24, r1
 eb6:	29 e0       	ldi	r18, 0x09	; 9
 eb8:	92 07       	cpc	r25, r18
 eba:	29 f4       	brne	.+10     	; 0xec6 <tc_set_cca_interrupt_callback+0x36>
		tc_tcd0_cca_callback = callback;
 ebc:	60 93 22 20 	sts	0x2022, r22
 ec0:	70 93 23 20 	sts	0x2023, r23
 ec4:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
 ec6:	80 34       	cpi	r24, 0x40	; 64
 ec8:	29 e0       	ldi	r18, 0x09	; 9
 eca:	92 07       	cpc	r25, r18
 ecc:	29 f4       	brne	.+10     	; 0xed8 <tc_set_cca_interrupt_callback+0x48>
		tc_tcd1_cca_callback = callback;
 ece:	60 93 16 20 	sts	0x2016, r22
 ed2:	70 93 17 20 	sts	0x2017, r23
 ed6:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
 ed8:	81 15       	cp	r24, r1
 eda:	9a 40       	sbci	r25, 0x0A	; 10
 edc:	21 f4       	brne	.+8      	; 0xee6 <tc_set_cca_interrupt_callback+0x56>
		tc_tce0_cca_callback = callback;
 ede:	60 93 0e 20 	sts	0x200E, r22
 ee2:	70 93 0f 20 	sts	0x200F, r23
 ee6:	08 95       	ret

00000ee8 <board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
		PORTD.DIRSET = PIN3_bm; //TX pin as output
 ee8:	e0 e6       	ldi	r30, 0x60	; 96
 eea:	f6 e0       	ldi	r31, 0x06	; 6
 eec:	88 e0       	ldi	r24, 0x08	; 8
 eee:	81 83       	std	Z+1, r24	; 0x01
		PORTD.OUTSET = PIN3_bm; //Let's make Pde as TX
 ef0:	85 83       	std	Z+5, r24	; 0x05
		

		PORTD.DIRCLR = PIN2_bm; //PC6 as RX entrada
 ef2:	84 e0       	ldi	r24, 0x04	; 4
 ef4:	82 83       	std	Z+2, r24	; 0x02
		PORTD.OUTCLR = PIN2_bm; //en cero
 ef6:	86 83       	std	Z+6, r24	; 0x06
 ef8:	08 95       	ret

00000efa <cca_callback>:
#define TIMER_PORT_LED           TCE0



static void cca_callback(void) 
{
 efa:	cf 93       	push	r28
 efc:	df 93       	push	r29
		enum tc_cc_channel_t channel_index)
{
	if (tc_is_tc0(void *tc)) {
		switch (channel_index) {
		case TC_CCA:
			return (((TC0_t *)tc)->CCA);
 efe:	e0 e0       	ldi	r30, 0x00	; 0
 f00:	f8 e0       	ldi	r31, 0x08	; 8
 f02:	c0 a5       	ldd	r28, Z+40	; 0x28
 f04:	d1 a5       	ldd	r29, Z+41	; 0x29
	uint16_t cca_capture = tc_read_cc(&EXAMPLE_TC, TC_CCA);
	usart_putchar(USART_SERIAL_D0, 'V');
 f06:	66 e5       	ldi	r22, 0x56	; 86
 f08:	80 ea       	ldi	r24, 0xA0	; 160
 f0a:	99 e0       	ldi	r25, 0x09	; 9
 f0c:	51 d9       	rcall	.-3422   	; 0x1b0 <usart_putchar>
	usart_putchar(USART_SERIAL_D0, cca_capture);
 f0e:	6c 2f       	mov	r22, r28
 f10:	80 ea       	ldi	r24, 0xA0	; 160
 f12:	99 e0       	ldi	r25, 0x09	; 9
 f14:	4d d9       	rcall	.-3430   	; 0x1b0 <usart_putchar>
	PORTR.OUTTGL=PIN0_bm;
 f16:	81 e0       	ldi	r24, 0x01	; 1
 f18:	e0 ee       	ldi	r30, 0xE0	; 224
 f1a:	f7 e0       	ldi	r31, 0x07	; 7
 f1c:	87 83       	std	Z+7, r24	; 0x07
}
 f1e:	df 91       	pop	r29
 f20:	cf 91       	pop	r28
 f22:	08 95       	ret

00000f24 <main>:

int main (void)
{

	// Insert system clock initialization code here (sysclk_init()).
	LEDPORT.DIRSET=PIN0_bm;
 f24:	81 e0       	ldi	r24, 0x01	; 1
 f26:	e0 ee       	ldi	r30, 0xE0	; 224
 f28:	f7 e0       	ldi	r31, 0x07	; 7
 f2a:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRCLR=PIN0_bm;
 f2c:	e0 e0       	ldi	r30, 0x00	; 0
 f2e:	f6 e0       	ldi	r31, 0x06	; 6
 f30:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN0CTRL=PORT_ISC_BOTHEDGES_gc | PORT_OPC_TOTEM_gc;
 f32:	10 8a       	std	Z+16, r1	; 0x10
	board_init();
 f34:	d9 df       	rcall	.-78     	; 0xee8 <board_init>
		.baudrate = USART_SERIAL_BAUDRATE,
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	sysclk_enable_module(SYSCLK_PORT_D, PR_USART0_bm);
 f36:	60 e1       	ldi	r22, 0x10	; 16
 f38:	84 e0       	ldi	r24, 0x04	; 4
 f3a:	34 db       	rcall	.-2456   	; 0x5a4 <sysclk_enable_module>
	usart_init_rs232(USART_SERIAL_D0, &USART_SERIAL_OPTIONS);
 f3c:	60 e0       	ldi	r22, 0x00	; 0
 f3e:	70 e2       	ldi	r23, 0x20	; 32
 f40:	80 ea       	ldi	r24, 0xA0	; 160
 f42:	99 e0       	ldi	r25, 0x09	; 9
 f44:	43 da       	rcall	.-2938   	; 0x3cc <usart_init_rs232>
	board_init();
	
	conf_serial_com();
	
	/* Setup pin0 (sw0) as input to event system channel 0 */
	EVSYS_CH0MUX = CANAL_EVENTO_PIN0;	
 f46:	80 e5       	ldi	r24, 0x50	; 80
 f48:	80 93 80 01 	sts	0x0180, r24
	/* Enable clock to event sys */
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);	
 f4c:	62 e0       	ldi	r22, 0x02	; 2
 f4e:	80 e0       	ldi	r24, 0x00	; 0
 f50:	29 db       	rcall	.-2478   	; 0x5a4 <sysclk_enable_module>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
 f52:	c0 e0       	ldi	r28, 0x00	; 0
 f54:	d8 e0       	ldi	r29, 0x08	; 8
 f56:	88 81       	ld	r24, Y
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
 f58:	80 7f       	andi	r24, 0xF0	; 240
 f5a:	87 60       	ori	r24, 0x07	; 7
 f5c:	88 83       	st	Y, r24
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
 f5e:	8f ef       	ldi	r24, 0xFF	; 255
 f60:	9f e7       	ldi	r25, 0x7F	; 127
 f62:	8e a3       	std	Y+38, r24	; 0x26
 f64:	9f a3       	std	Y+39, r25	; 0x27
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
		((TC0_t *)tc)->CTRLB |= enablemask;
 f66:	89 81       	ldd	r24, Y+1	; 0x01
 f68:	80 61       	ori	r24, 0x10	; 16
 f6a:	89 83       	std	Y+1, r24	; 0x01
		enum tc_cc_channel_t channel_index)
{
	if (tc_is_tc0(void *tc)) {
		switch (channel_index) {
		case TC_CCA:
			((TC0_t *)tc)->INTFLAGS = TC0_CCAIF_bm;
 f6c:	80 e1       	ldi	r24, 0x10	; 16
 f6e:	8c 87       	std	Y+12, r24	; 0x0c
 * \param eventaction Event action capture type
 */
static inline void tc_set_input_capture(volatile void *tc,
		TC_EVSEL_t eventsource, TC_EVACT_t eventaction)
{
	((TC0_t *)tc)->CTRLD &= ~(TC0_EVSEL_gm | TC0_EVACT_gm);
 f70:	8b 81       	ldd	r24, Y+3	; 0x03
 f72:	80 71       	andi	r24, 0x10	; 16
 f74:	8b 83       	std	Y+3, r24	; 0x03
	((TC0_t *)tc)->CTRLD |= ((uint8_t)eventsource | (uint8_t)eventaction);
 f76:	8b 81       	ldd	r24, Y+3	; 0x03
 f78:	88 6a       	ori	r24, 0xA8	; 168
 f7a:	8b 83       	std	Y+3, r24	; 0x03
	/* Clear timer interrupts */
	tc_clear_cc_interrupt(&EXAMPLE_TC, TC_CCA);	
	/* Do capture on event channel 0 (sw0) */
	tc_set_input_capture(&EXAMPLE_TC, TC_EVSEL_CH0_gc, TC_EVACT_FRW_gc);
	/* Register callback for interrupt */
	tc_set_cca_interrupt_callback(&EXAMPLE_TC, &cca_callback);
 f7c:	6d e7       	ldi	r22, 0x7D	; 125
 f7e:	77 e0       	ldi	r23, 0x07	; 7
 f80:	80 e0       	ldi	r24, 0x00	; 0
 f82:	98 e0       	ldi	r25, 0x08	; 8
 f84:	85 df       	rcall	.-246    	; 0xe90 <tc_set_cca_interrupt_callback>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
 f86:	e0 ea       	ldi	r30, 0xA0	; 160
 f88:	f0 e0       	ldi	r31, 0x00	; 0
 f8a:	87 e0       	ldi	r24, 0x07	; 7
 f8c:	82 83       	std	Z+2, r24	; 0x02
 * \note Configures CCAINTLVL in INTCTRLB
 */
static inline void tc_set_cca_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLB = ((TC0_t *)tc)->INTCTRLB & ~TC0_CCAINTLVL_gm;
 f8e:	8f 81       	ldd	r24, Y+7	; 0x07
 f90:	8c 7f       	andi	r24, 0xFC	; 252
 f92:	8f 83       	std	Y+7, r24	; 0x07
	((TC0_t *)tc)->INTCTRLB =
			((TC0_t *)tc)->INTCTRLB | (level << TC0_CCAINTLVL_gp);
 f94:	8f 81       	ldd	r24, Y+7	; 0x07
 */
static inline void tc_set_cca_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLB = ((TC0_t *)tc)->INTCTRLB & ~TC0_CCAINTLVL_gm;
	((TC0_t *)tc)->INTCTRLB =
 f96:	81 60       	ori	r24, 0x01	; 1
 f98:	8f 83       	std	Y+7, r24	; 0x07
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
 f9a:	82 81       	ldd	r24, Z+2	; 0x02
 f9c:	81 60       	ori	r24, 0x01	; 1
 f9e:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();		
	/* Enable CCA interrupt at level low */
	tc_set_cca_interrupt_level(&EXAMPLE_TC, TC_CCAINTLVL_LO_gc);
	pmic_enable_level(PMIC_LOLVLEN_bm);
	/* Enable clock to timer */
	tc_enable(&EXAMPLE_TC);
 fa0:	80 e0       	ldi	r24, 0x00	; 0
 fa2:	98 e0       	ldi	r25, 0x08	; 8
 fa4:	35 df       	rcall	.-406    	; 0xe10 <tc_enable>
	/* Enable global interrupts */
	sei();	
 fa6:	78 94       	sei
 fa8:	ff cf       	rjmp	.-2      	; 0xfa8 <main+0x84>

00000faa <__udivmodsi4>:
 faa:	a1 e2       	ldi	r26, 0x21	; 33
 fac:	1a 2e       	mov	r1, r26
 fae:	aa 1b       	sub	r26, r26
 fb0:	bb 1b       	sub	r27, r27
 fb2:	fd 01       	movw	r30, r26
 fb4:	0d c0       	rjmp	.+26     	; 0xfd0 <__udivmodsi4_ep>

00000fb6 <__udivmodsi4_loop>:
 fb6:	aa 1f       	adc	r26, r26
 fb8:	bb 1f       	adc	r27, r27
 fba:	ee 1f       	adc	r30, r30
 fbc:	ff 1f       	adc	r31, r31
 fbe:	a2 17       	cp	r26, r18
 fc0:	b3 07       	cpc	r27, r19
 fc2:	e4 07       	cpc	r30, r20
 fc4:	f5 07       	cpc	r31, r21
 fc6:	20 f0       	brcs	.+8      	; 0xfd0 <__udivmodsi4_ep>
 fc8:	a2 1b       	sub	r26, r18
 fca:	b3 0b       	sbc	r27, r19
 fcc:	e4 0b       	sbc	r30, r20
 fce:	f5 0b       	sbc	r31, r21

00000fd0 <__udivmodsi4_ep>:
 fd0:	66 1f       	adc	r22, r22
 fd2:	77 1f       	adc	r23, r23
 fd4:	88 1f       	adc	r24, r24
 fd6:	99 1f       	adc	r25, r25
 fd8:	1a 94       	dec	r1
 fda:	69 f7       	brne	.-38     	; 0xfb6 <__udivmodsi4_loop>
 fdc:	60 95       	com	r22
 fde:	70 95       	com	r23
 fe0:	80 95       	com	r24
 fe2:	90 95       	com	r25
 fe4:	9b 01       	movw	r18, r22
 fe6:	ac 01       	movw	r20, r24
 fe8:	bd 01       	movw	r22, r26
 fea:	cf 01       	movw	r24, r30
 fec:	08 95       	ret

00000fee <_exit>:
 fee:	f8 94       	cli

00000ff0 <__stop_program>:
 ff0:	ff cf       	rjmp	.-2      	; 0xff0 <__stop_program>
