
serial com_rx_int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000076c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00802000  0000076c  00000800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080203a  0080203a  0000083a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000870  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000044c1  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b53  00000000  00000000  00004e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002f1b  00000000  00000000  000059cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000298  00000000  00000000  000088e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00022db9  00000000  00000000  00008b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015b0  00000000  00000000  0002b939  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  0002cee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000861c  00000000  00000000  0002cfe1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	bb c0       	rjmp	.+374    	; 0x178 <__ctors_end>
   2:	00 00       	nop
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	c2 c0       	rjmp	.+388    	; 0x1ae <__bad_interrupt>
  2a:	00 00       	nop
  2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
  36:	00 00       	nop
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
  54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
  96:	00 00       	nop
  98:	8a c0       	rjmp	.+276    	; 0x1ae <__bad_interrupt>
  9a:	00 00       	nop
  9c:	88 c0       	rjmp	.+272    	; 0x1ae <__bad_interrupt>
  9e:	00 00       	nop
  a0:	86 c0       	rjmp	.+268    	; 0x1ae <__bad_interrupt>
  a2:	00 00       	nop
  a4:	84 c0       	rjmp	.+264    	; 0x1ae <__bad_interrupt>
  a6:	00 00       	nop
  a8:	82 c0       	rjmp	.+260    	; 0x1ae <__bad_interrupt>
  aa:	00 00       	nop
  ac:	80 c0       	rjmp	.+256    	; 0x1ae <__bad_interrupt>
  ae:	00 00       	nop
  b0:	7e c0       	rjmp	.+252    	; 0x1ae <__bad_interrupt>
  b2:	00 00       	nop
  b4:	7c c0       	rjmp	.+248    	; 0x1ae <__bad_interrupt>
  b6:	00 00       	nop
  b8:	7a c0       	rjmp	.+244    	; 0x1ae <__bad_interrupt>
  ba:	00 00       	nop
  bc:	78 c0       	rjmp	.+240    	; 0x1ae <__bad_interrupt>
  be:	00 00       	nop
  c0:	76 c0       	rjmp	.+236    	; 0x1ae <__bad_interrupt>
  c2:	00 00       	nop
  c4:	74 c0       	rjmp	.+232    	; 0x1ae <__bad_interrupt>
  c6:	00 00       	nop
  c8:	72 c0       	rjmp	.+228    	; 0x1ae <__bad_interrupt>
  ca:	00 00       	nop
  cc:	70 c0       	rjmp	.+224    	; 0x1ae <__bad_interrupt>
  ce:	00 00       	nop
  d0:	6e c0       	rjmp	.+220    	; 0x1ae <__bad_interrupt>
  d2:	00 00       	nop
  d4:	6c c0       	rjmp	.+216    	; 0x1ae <__bad_interrupt>
  d6:	00 00       	nop
  d8:	6a c0       	rjmp	.+212    	; 0x1ae <__bad_interrupt>
  da:	00 00       	nop
  dc:	68 c0       	rjmp	.+208    	; 0x1ae <__bad_interrupt>
  de:	00 00       	nop
  e0:	66 c0       	rjmp	.+204    	; 0x1ae <__bad_interrupt>
  e2:	00 00       	nop
  e4:	64 c0       	rjmp	.+200    	; 0x1ae <__bad_interrupt>
  e6:	00 00       	nop
  e8:	62 c0       	rjmp	.+196    	; 0x1ae <__bad_interrupt>
  ea:	00 00       	nop
  ec:	60 c0       	rjmp	.+192    	; 0x1ae <__bad_interrupt>
  ee:	00 00       	nop
  f0:	5e c0       	rjmp	.+188    	; 0x1ae <__bad_interrupt>
  f2:	00 00       	nop
  f4:	5c c0       	rjmp	.+184    	; 0x1ae <__bad_interrupt>
  f6:	00 00       	nop
  f8:	5a c0       	rjmp	.+180    	; 0x1ae <__bad_interrupt>
  fa:	00 00       	nop
  fc:	58 c0       	rjmp	.+176    	; 0x1ae <__bad_interrupt>
  fe:	00 00       	nop
 100:	56 c0       	rjmp	.+172    	; 0x1ae <__bad_interrupt>
 102:	00 00       	nop
 104:	54 c0       	rjmp	.+168    	; 0x1ae <__bad_interrupt>
 106:	00 00       	nop
 108:	52 c0       	rjmp	.+164    	; 0x1ae <__bad_interrupt>
 10a:	00 00       	nop
 10c:	50 c0       	rjmp	.+160    	; 0x1ae <__bad_interrupt>
 10e:	00 00       	nop
 110:	4e c0       	rjmp	.+156    	; 0x1ae <__bad_interrupt>
 112:	00 00       	nop
 114:	4c c0       	rjmp	.+152    	; 0x1ae <__bad_interrupt>
 116:	00 00       	nop
 118:	4a c0       	rjmp	.+148    	; 0x1ae <__bad_interrupt>
 11a:	00 00       	nop
 11c:	48 c0       	rjmp	.+144    	; 0x1ae <__bad_interrupt>
 11e:	00 00       	nop
 120:	46 c0       	rjmp	.+140    	; 0x1ae <__bad_interrupt>
 122:	00 00       	nop
 124:	44 c0       	rjmp	.+136    	; 0x1ae <__bad_interrupt>
 126:	00 00       	nop
 128:	42 c0       	rjmp	.+132    	; 0x1ae <__bad_interrupt>
 12a:	00 00       	nop
 12c:	40 c0       	rjmp	.+128    	; 0x1ae <__bad_interrupt>
 12e:	00 00       	nop
 130:	3e c0       	rjmp	.+124    	; 0x1ae <__bad_interrupt>
 132:	00 00       	nop
 134:	3c c0       	rjmp	.+120    	; 0x1ae <__bad_interrupt>
 136:	00 00       	nop
 138:	3a c0       	rjmp	.+116    	; 0x1ae <__bad_interrupt>
 13a:	00 00       	nop
 13c:	38 c0       	rjmp	.+112    	; 0x1ae <__bad_interrupt>
 13e:	00 00       	nop
 140:	36 c0       	rjmp	.+108    	; 0x1ae <__bad_interrupt>
 142:	00 00       	nop
 144:	34 c0       	rjmp	.+104    	; 0x1ae <__bad_interrupt>
 146:	00 00       	nop
 148:	32 c0       	rjmp	.+100    	; 0x1ae <__bad_interrupt>
 14a:	00 00       	nop
 14c:	30 c0       	rjmp	.+96     	; 0x1ae <__bad_interrupt>
 14e:	00 00       	nop
 150:	2e c0       	rjmp	.+92     	; 0x1ae <__bad_interrupt>
 152:	00 00       	nop
 154:	2c c0       	rjmp	.+88     	; 0x1ae <__bad_interrupt>
 156:	00 00       	nop
 158:	2a c0       	rjmp	.+84     	; 0x1ae <__bad_interrupt>
 15a:	00 00       	nop
 15c:	28 c0       	rjmp	.+80     	; 0x1ae <__bad_interrupt>
 15e:	00 00       	nop
 160:	81 c2       	rjmp	.+1282   	; 0x664 <__vector_88>
 162:	00 00       	nop
 164:	24 c0       	rjmp	.+72     	; 0x1ae <__bad_interrupt>
 166:	00 00       	nop
 168:	22 c0       	rjmp	.+68     	; 0x1ae <__bad_interrupt>
 16a:	00 00       	nop
 16c:	20 c0       	rjmp	.+64     	; 0x1ae <__bad_interrupt>
 16e:	00 00       	nop
 170:	1e c0       	rjmp	.+60     	; 0x1ae <__bad_interrupt>
 172:	00 00       	nop
 174:	1c c0       	rjmp	.+56     	; 0x1ae <__bad_interrupt>
	...

00000178 <__ctors_end>:
 178:	11 24       	eor	r1, r1
 17a:	1f be       	out	0x3f, r1	; 63
 17c:	cf ef       	ldi	r28, 0xFF	; 255
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	df e2       	ldi	r29, 0x2F	; 47
 182:	de bf       	out	0x3e, r29	; 62

00000184 <__do_copy_data>:
 184:	10 e2       	ldi	r17, 0x20	; 32
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b0 e2       	ldi	r27, 0x20	; 32
 18a:	ec e6       	ldi	r30, 0x6C	; 108
 18c:	f7 e0       	ldi	r31, 0x07	; 7
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
 190:	05 90       	lpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	aa 33       	cpi	r26, 0x3A	; 58
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
 19a:	20 e2       	ldi	r18, 0x20	; 32
 19c:	aa e3       	ldi	r26, 0x3A	; 58
 19e:	b0 e2       	ldi	r27, 0x20	; 32
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	ac 33       	cpi	r26, 0x3C	; 60
 1a6:	b2 07       	cpc	r27, r18
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	8e d2       	rcall	.+1308   	; 0x6c8 <main>
 1ac:	dd c2       	rjmp	.+1466   	; 0x768 <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <board_init>:
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	PORTD.OUTSET = PIN3_bm; //Let's make PC7 as TX
 1b0:	e0 e6       	ldi	r30, 0x60	; 96
 1b2:	f6 e0       	ldi	r31, 0x06	; 6
 1b4:	88 e0       	ldi	r24, 0x08	; 8
 1b6:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN3_bm; //TX pin as output
 1b8:	81 83       	std	Z+1, r24	; 0x01

	PORTD.OUTCLR = PIN2_bm;
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRCLR = PIN2_bm; //PC6 as RX
 1be:	82 83       	std	Z+2, r24	; 0x02

	PORTR.DIRSET=PIN0_bm;
 1c0:	e0 ee       	ldi	r30, 0xE0	; 224
 1c2:	f7 e0       	ldi	r31, 0x07	; 7
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	81 83       	std	Z+1, r24	; 0x01
	PORTR.OUTSET=PIN0_bm;
 1c8:	85 83       	std	Z+5, r24	; 0x05
 1ca:	08 95       	ret

000001cc <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	80 93 70 00 	sts	0x0070, r24
 1d2:	80 93 71 00 	sts	0x0071, r24
 1d6:	80 93 72 00 	sts	0x0072, r24
 1da:	80 93 73 00 	sts	0x0073, r24
 1de:	80 93 74 00 	sts	0x0074, r24
 1e2:	80 93 75 00 	sts	0x0075, r24
 1e6:	80 93 76 00 	sts	0x0076, r24

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
 1ea:	e0 e5       	ldi	r30, 0x50	; 80
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	81 81       	ldd	r24, Z+1	; 0x01

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
 1f0:	84 fd       	sbrc	r24, 4
 1f2:	19 c0       	rjmp	.+50     	; 0x226 <sysclk_init+0x5a>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
	switch (src) {
	case PLL_SRC_RC2MHZ:
		break;

	case PLL_SRC_RC32MHZ:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
 1f6:	81 fd       	sbrc	r24, 1
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <sysclk_init+0x40>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 1fa:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 1fc:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 1fe:	90 81       	ld	r25, Z
 200:	92 60       	ori	r25, 0x02	; 2
 202:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 204:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 206:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
 208:	81 ff       	sbrs	r24, 1
 20a:	fd cf       	rjmp	.-6      	; 0x206 <sysclk_init+0x3a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 20c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 20e:	f8 94       	cli
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
 210:	e0 e5       	ldi	r30, 0x50	; 80
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	93 e8       	ldi	r25, 0x83	; 131
 216:	95 83       	std	Z+5, r25	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
 218:	90 81       	ld	r25, Z
 21a:	90 61       	ori	r25, 0x10	; 16
 21c:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 21e:	8f bf       	out	0x3f, r24	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
 220:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
 222:	84 ff       	sbrs	r24, 4
 224:	fd cf       	rjmp	.-6      	; 0x220 <sysclk_init+0x54>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 226:	64 e0       	ldi	r22, 0x04	; 4
 228:	80 e4       	ldi	r24, 0x40	; 64
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	15 d0       	rcall	.+42     	; 0x258 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 22e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 230:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
 232:	e0 e5       	ldi	r30, 0x50	; 80
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	90 81       	ld	r25, Z
 238:	9e 7f       	andi	r25, 0xFE	; 254
 23a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 23c:	8f bf       	out	0x3f, r24	; 63
 23e:	08 95       	ret

00000240 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 240:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 242:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 244:	e8 2f       	mov	r30, r24
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	e0 59       	subi	r30, 0x90	; 144
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	60 95       	com	r22
 24e:	80 81       	ld	r24, Z
 250:	68 23       	and	r22, r24
 252:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 254:	9f bf       	out	0x3f, r25	; 63
 256:	08 95       	ret

00000258 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 258:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 25a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 25c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 25e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 260:	60 83       	st	Z, r22
	ret                             // Return to caller
 262:	08 95       	ret

00000264 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
 264:	fc 01       	movw	r30, r24
 266:	81 81       	ldd	r24, Z+1	; 0x01
 268:	85 ff       	sbrs	r24, 5
 26a:	fd cf       	rjmp	.-6      	; 0x266 <usart_putchar+0x2>
 26c:	60 83       	st	Z, r22
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	08 95       	ret

00000274 <usart_getchar>:
 274:	fc 01       	movw	r30, r24
 276:	81 81       	ldd	r24, Z+1	; 0x01
 278:	88 23       	and	r24, r24
 27a:	ec f7       	brge	.-6      	; 0x276 <usart_getchar+0x2>
 27c:	80 81       	ld	r24, Z
 27e:	08 95       	ret

00000280 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 280:	4f 92       	push	r4
 282:	5f 92       	push	r5
 284:	6f 92       	push	r6
 286:	7f 92       	push	r7
 288:	8f 92       	push	r8
 28a:	9f 92       	push	r9
 28c:	af 92       	push	r10
 28e:	bf 92       	push	r11
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ec 01       	movw	r28, r24
 2a2:	4a 01       	movw	r8, r20
 2a4:	5b 01       	movw	r10, r22
 2a6:	28 01       	movw	r4, r16
 2a8:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
 2aa:	d9 01       	movw	r26, r18
 2ac:	c8 01       	movw	r24, r16
 2ae:	68 94       	set
 2b0:	12 f8       	bld	r1, 2
 2b2:	b6 95       	lsr	r27
 2b4:	a7 95       	ror	r26
 2b6:	97 95       	ror	r25
 2b8:	87 95       	ror	r24
 2ba:	16 94       	lsr	r1
 2bc:	d1 f7       	brne	.-12     	; 0x2b2 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
 2be:	b9 01       	movw	r22, r18
 2c0:	a8 01       	movw	r20, r16
 2c2:	03 2e       	mov	r0, r19
 2c4:	36 e1       	ldi	r19, 0x16	; 22
 2c6:	76 95       	lsr	r23
 2c8:	67 95       	ror	r22
 2ca:	57 95       	ror	r21
 2cc:	47 95       	ror	r20
 2ce:	3a 95       	dec	r19
 2d0:	d1 f7       	brne	.-12     	; 0x2c6 <usart_set_baudrate+0x46>
 2d2:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 2d4:	2c 81       	ldd	r18, Y+4	; 0x04
 2d6:	22 fd       	sbrc	r18, 2
 2d8:	08 c0       	rjmp	.+16     	; 0x2ea <usart_set_baudrate+0x6a>
		max_rate /= 2;
 2da:	b6 95       	lsr	r27
 2dc:	a7 95       	ror	r26
 2de:	97 95       	ror	r25
 2e0:	87 95       	ror	r24
		min_rate /= 2;
 2e2:	76 95       	lsr	r23
 2e4:	67 95       	ror	r22
 2e6:	57 95       	ror	r21
 2e8:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
 2ea:	88 15       	cp	r24, r8
 2ec:	99 05       	cpc	r25, r9
 2ee:	aa 05       	cpc	r26, r10
 2f0:	bb 05       	cpc	r27, r11
 2f2:	08 f4       	brcc	.+2      	; 0x2f6 <usart_set_baudrate+0x76>
 2f4:	a2 c0       	rjmp	.+324    	; 0x43a <usart_set_baudrate+0x1ba>
 2f6:	84 16       	cp	r8, r20
 2f8:	95 06       	cpc	r9, r21
 2fa:	a6 06       	cpc	r10, r22
 2fc:	b7 06       	cpc	r11, r23
 2fe:	08 f4       	brcc	.+2      	; 0x302 <usart_set_baudrate+0x82>
 300:	9e c0       	rjmp	.+316    	; 0x43e <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 302:	8c 81       	ldd	r24, Y+4	; 0x04
 304:	82 fd       	sbrc	r24, 2
 306:	04 c0       	rjmp	.+8      	; 0x310 <usart_set_baudrate+0x90>
		baud *= 2;
 308:	88 0c       	add	r8, r8
 30a:	99 1c       	adc	r9, r9
 30c:	aa 1c       	adc	r10, r10
 30e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
 310:	c3 01       	movw	r24, r6
 312:	b2 01       	movw	r22, r4
 314:	a5 01       	movw	r20, r10
 316:	94 01       	movw	r18, r8
 318:	05 d2       	rcall	.+1034   	; 0x724 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
 31a:	2f 3f       	cpi	r18, 0xFF	; 255
 31c:	31 05       	cpc	r19, r1
 31e:	41 05       	cpc	r20, r1
 320:	51 05       	cpc	r21, r1
 322:	08 f4       	brcc	.+2      	; 0x326 <usart_set_baudrate+0xa6>
 324:	8e c0       	rjmp	.+284    	; 0x442 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
 326:	c1 2c       	mov	r12, r1
 328:	d1 2c       	mov	r13, r1
 32a:	76 01       	movw	r14, r12
 32c:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 32e:	19 ef       	ldi	r17, 0xF9	; 249
 330:	05 c0       	rjmp	.+10     	; 0x33c <usart_set_baudrate+0xbc>
		if (ratio < limit) {
 332:	2c 15       	cp	r18, r12
 334:	3d 05       	cpc	r19, r13
 336:	4e 05       	cpc	r20, r14
 338:	5f 05       	cpc	r21, r15
 33a:	68 f0       	brcs	.+26     	; 0x356 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
 33c:	cc 0c       	add	r12, r12
 33e:	dd 1c       	adc	r13, r13
 340:	ee 1c       	adc	r14, r14
 342:	ff 1c       	adc	r15, r15

		if (exp < -3) {
 344:	1d 3f       	cpi	r17, 0xFD	; 253
 346:	14 f4       	brge	.+4      	; 0x34c <usart_set_baudrate+0xcc>
			limit |= 1;
 348:	68 94       	set
 34a:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 34c:	1f 5f       	subi	r17, 0xFF	; 255
 34e:	17 30       	cpi	r17, 0x07	; 7
 350:	81 f7       	brne	.-32     	; 0x332 <usart_set_baudrate+0xb2>
 352:	21 2f       	mov	r18, r17
 354:	4e c0       	rjmp	.+156    	; 0x3f2 <usart_set_baudrate+0x172>
 356:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
 358:	11 23       	and	r17, r17
 35a:	0c f0       	brlt	.+2      	; 0x35e <usart_set_baudrate+0xde>
 35c:	4a c0       	rjmp	.+148    	; 0x3f2 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 35e:	d5 01       	movw	r26, r10
 360:	c4 01       	movw	r24, r8
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	aa 1f       	adc	r26, r26
 368:	bb 1f       	adc	r27, r27
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	aa 1f       	adc	r26, r26
 370:	bb 1f       	adc	r27, r27
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	aa 1f       	adc	r26, r26
 378:	bb 1f       	adc	r27, r27
 37a:	48 1a       	sub	r4, r24
 37c:	59 0a       	sbc	r5, r25
 37e:	6a 0a       	sbc	r6, r26
 380:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
 382:	1e 3f       	cpi	r17, 0xFE	; 254
 384:	ec f4       	brge	.+58     	; 0x3c0 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
 386:	6d ef       	ldi	r22, 0xFD	; 253
 388:	7f ef       	ldi	r23, 0xFF	; 255
 38a:	61 1b       	sub	r22, r17
 38c:	71 09       	sbc	r23, r1
 38e:	17 fd       	sbrc	r17, 7
 390:	73 95       	inc	r23
 392:	04 c0       	rjmp	.+8      	; 0x39c <usart_set_baudrate+0x11c>
 394:	44 0c       	add	r4, r4
 396:	55 1c       	adc	r5, r5
 398:	66 1c       	adc	r6, r6
 39a:	77 1c       	adc	r7, r7
 39c:	6a 95       	dec	r22
 39e:	d2 f7       	brpl	.-12     	; 0x394 <usart_set_baudrate+0x114>
 3a0:	d5 01       	movw	r26, r10
 3a2:	c4 01       	movw	r24, r8
 3a4:	b6 95       	lsr	r27
 3a6:	a7 95       	ror	r26
 3a8:	97 95       	ror	r25
 3aa:	87 95       	ror	r24
 3ac:	bc 01       	movw	r22, r24
 3ae:	cd 01       	movw	r24, r26
 3b0:	64 0d       	add	r22, r4
 3b2:	75 1d       	adc	r23, r5
 3b4:	86 1d       	adc	r24, r6
 3b6:	97 1d       	adc	r25, r7
 3b8:	a5 01       	movw	r20, r10
 3ba:	94 01       	movw	r18, r8
 3bc:	b3 d1       	rcall	.+870    	; 0x724 <__udivmodsi4>
 3be:	34 c0       	rjmp	.+104    	; 0x428 <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
 3c0:	23 e0       	ldi	r18, 0x03	; 3
 3c2:	21 0f       	add	r18, r17
 3c4:	d5 01       	movw	r26, r10
 3c6:	c4 01       	movw	r24, r8
 3c8:	04 c0       	rjmp	.+8      	; 0x3d2 <usart_set_baudrate+0x152>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	aa 1f       	adc	r26, r26
 3d0:	bb 1f       	adc	r27, r27
 3d2:	2a 95       	dec	r18
 3d4:	d2 f7       	brpl	.-12     	; 0x3ca <usart_set_baudrate+0x14a>
 3d6:	9c 01       	movw	r18, r24
 3d8:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
 3da:	b6 95       	lsr	r27
 3dc:	a7 95       	ror	r26
 3de:	97 95       	ror	r25
 3e0:	87 95       	ror	r24
 3e2:	bc 01       	movw	r22, r24
 3e4:	cd 01       	movw	r24, r26
 3e6:	64 0d       	add	r22, r4
 3e8:	75 1d       	adc	r23, r5
 3ea:	86 1d       	adc	r24, r6
 3ec:	97 1d       	adc	r25, r7
 3ee:	9a d1       	rcall	.+820    	; 0x724 <__udivmodsi4>
 3f0:	1b c0       	rjmp	.+54     	; 0x428 <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
 3f2:	2d 5f       	subi	r18, 0xFD	; 253
 3f4:	d5 01       	movw	r26, r10
 3f6:	c4 01       	movw	r24, r8
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <usart_set_baudrate+0x182>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	aa 1f       	adc	r26, r26
 400:	bb 1f       	adc	r27, r27
 402:	2a 95       	dec	r18
 404:	d2 f7       	brpl	.-12     	; 0x3fa <usart_set_baudrate+0x17a>
 406:	9c 01       	movw	r18, r24
 408:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
 40a:	b6 95       	lsr	r27
 40c:	a7 95       	ror	r26
 40e:	97 95       	ror	r25
 410:	87 95       	ror	r24
 412:	bc 01       	movw	r22, r24
 414:	cd 01       	movw	r24, r26
 416:	64 0d       	add	r22, r4
 418:	75 1d       	adc	r23, r5
 41a:	86 1d       	adc	r24, r6
 41c:	97 1d       	adc	r25, r7
 41e:	82 d1       	rcall	.+772    	; 0x724 <__udivmodsi4>
 420:	21 50       	subi	r18, 0x01	; 1
 422:	31 09       	sbc	r19, r1
 424:	41 09       	sbc	r20, r1
 426:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
 428:	83 2f       	mov	r24, r19
 42a:	8f 70       	andi	r24, 0x0F	; 15
 42c:	12 95       	swap	r17
 42e:	10 7f       	andi	r17, 0xF0	; 240
 430:	18 2b       	or	r17, r24
 432:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
 434:	2e 83       	std	Y+6, r18	; 0x06

	return true;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	18 c0       	rjmp	.+48     	; 0x46a <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	16 c0       	rjmp	.+44     	; 0x46a <usart_set_baudrate+0x1ea>
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	14 c0       	rjmp	.+40     	; 0x46a <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 442:	d5 01       	movw	r26, r10
 444:	c4 01       	movw	r24, r8
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	aa 1f       	adc	r26, r26
 44c:	bb 1f       	adc	r27, r27
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	aa 1f       	adc	r26, r26
 454:	bb 1f       	adc	r27, r27
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	aa 1f       	adc	r26, r26
 45c:	bb 1f       	adc	r27, r27
 45e:	48 1a       	sub	r4, r24
 460:	59 0a       	sbc	r5, r25
 462:	6a 0a       	sbc	r6, r26
 464:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 466:	19 ef       	ldi	r17, 0xF9	; 249
 468:	8e cf       	rjmp	.-228    	; 0x386 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	1f 91       	pop	r17
 470:	0f 91       	pop	r16
 472:	ff 90       	pop	r15
 474:	ef 90       	pop	r14
 476:	df 90       	pop	r13
 478:	cf 90       	pop	r12
 47a:	bf 90       	pop	r11
 47c:	af 90       	pop	r10
 47e:	9f 90       	pop	r9
 480:	8f 90       	pop	r8
 482:	7f 90       	pop	r7
 484:	6f 90       	pop	r6
 486:	5f 90       	pop	r5
 488:	4f 90       	pop	r4
 48a:	08 95       	ret

0000048c <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	ec 01       	movw	r28, r24
 496:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	09 f4       	brne	.+2      	; 0x49e <usart_init_rs232+0x12>
 49c:	be c0       	rjmp	.+380    	; 0x61a <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 49e:	80 3c       	cpi	r24, 0xC0	; 192
 4a0:	91 05       	cpc	r25, r1
 4a2:	21 f4       	brne	.+8      	; 0x4ac <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 4a4:	60 e1       	ldi	r22, 0x10	; 16
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	cb de       	rcall	.-618    	; 0x240 <sysclk_enable_module>
 4aa:	b7 c0       	rjmp	.+366    	; 0x61a <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
 4ac:	c1 15       	cp	r28, r1
 4ae:	84 e0       	ldi	r24, 0x04	; 4
 4b0:	d8 07       	cpc	r29, r24
 4b2:	21 f4       	brne	.+8      	; 0x4bc <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 4b4:	64 e0       	ldi	r22, 0x04	; 4
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	c3 de       	rcall	.-634    	; 0x240 <sysclk_enable_module>
 4ba:	af c0       	rjmp	.+350    	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 4bc:	c0 38       	cpi	r28, 0x80	; 128
 4be:	e1 e0       	ldi	r30, 0x01	; 1
 4c0:	de 07       	cpc	r29, r30
 4c2:	21 f4       	brne	.+8      	; 0x4cc <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 4c4:	62 e0       	ldi	r22, 0x02	; 2
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	bb de       	rcall	.-650    	; 0x240 <sysclk_enable_module>
 4ca:	a7 c0       	rjmp	.+334    	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 4cc:	c1 15       	cp	r28, r1
 4ce:	f1 e0       	ldi	r31, 0x01	; 1
 4d0:	df 07       	cpc	r29, r31
 4d2:	21 f4       	brne	.+8      	; 0x4dc <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	b3 de       	rcall	.-666    	; 0x240 <sysclk_enable_module>
 4da:	9f c0       	rjmp	.+318    	; 0x61a <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 4dc:	c0 38       	cpi	r28, 0x80	; 128
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	d8 07       	cpc	r29, r24
 4e2:	21 f4       	brne	.+8      	; 0x4ec <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	ab de       	rcall	.-682    	; 0x240 <sysclk_enable_module>
 4ea:	97 c0       	rjmp	.+302    	; 0x61a <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 4ec:	c1 15       	cp	r28, r1
 4ee:	e2 e0       	ldi	r30, 0x02	; 2
 4f0:	de 07       	cpc	r29, r30
 4f2:	21 f4       	brne	.+8      	; 0x4fc <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 4f4:	62 e0       	ldi	r22, 0x02	; 2
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	a3 de       	rcall	.-698    	; 0x240 <sysclk_enable_module>
 4fa:	8f c0       	rjmp	.+286    	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 4fc:	c0 32       	cpi	r28, 0x20	; 32
 4fe:	f3 e0       	ldi	r31, 0x03	; 3
 500:	df 07       	cpc	r29, r31
 502:	21 f4       	brne	.+8      	; 0x50c <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 504:	64 e0       	ldi	r22, 0x04	; 4
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	9b de       	rcall	.-714    	; 0x240 <sysclk_enable_module>
 50a:	87 c0       	rjmp	.+270    	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 50c:	c1 15       	cp	r28, r1
 50e:	88 e0       	ldi	r24, 0x08	; 8
 510:	d8 07       	cpc	r29, r24
 512:	21 f4       	brne	.+8      	; 0x51c <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	93 de       	rcall	.-730    	; 0x240 <sysclk_enable_module>
 51a:	7f c0       	rjmp	.+254    	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 51c:	c1 15       	cp	r28, r1
 51e:	e9 e0       	ldi	r30, 0x09	; 9
 520:	de 07       	cpc	r29, r30
 522:	21 f4       	brne	.+8      	; 0x52c <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	84 e0       	ldi	r24, 0x04	; 4
 528:	8b de       	rcall	.-746    	; 0x240 <sysclk_enable_module>
 52a:	77 c0       	rjmp	.+238    	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 52c:	c1 15       	cp	r28, r1
 52e:	fa e0       	ldi	r31, 0x0A	; 10
 530:	df 07       	cpc	r29, r31
 532:	21 f4       	brne	.+8      	; 0x53c <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	85 e0       	ldi	r24, 0x05	; 5
 538:	83 de       	rcall	.-762    	; 0x240 <sysclk_enable_module>
 53a:	6f c0       	rjmp	.+222    	; 0x61a <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 53c:	c0 34       	cpi	r28, 0x40	; 64
 53e:	88 e0       	ldi	r24, 0x08	; 8
 540:	d8 07       	cpc	r29, r24
 542:	21 f4       	brne	.+8      	; 0x54c <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 544:	62 e0       	ldi	r22, 0x02	; 2
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	7b de       	rcall	.-778    	; 0x240 <sysclk_enable_module>
 54a:	67 c0       	rjmp	.+206    	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 54c:	c0 34       	cpi	r28, 0x40	; 64
 54e:	e9 e0       	ldi	r30, 0x09	; 9
 550:	de 07       	cpc	r29, r30
 552:	21 f4       	brne	.+8      	; 0x55c <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 554:	62 e0       	ldi	r22, 0x02	; 2
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	73 de       	rcall	.-794    	; 0x240 <sysclk_enable_module>
 55a:	5f c0       	rjmp	.+190    	; 0x61a <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 55c:	c0 39       	cpi	r28, 0x90	; 144
 55e:	f8 e0       	ldi	r31, 0x08	; 8
 560:	df 07       	cpc	r29, r31
 562:	21 f4       	brne	.+8      	; 0x56c <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 564:	64 e0       	ldi	r22, 0x04	; 4
 566:	83 e0       	ldi	r24, 0x03	; 3
 568:	6b de       	rcall	.-810    	; 0x240 <sysclk_enable_module>
 56a:	57 c0       	rjmp	.+174    	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 56c:	c0 39       	cpi	r28, 0x90	; 144
 56e:	89 e0       	ldi	r24, 0x09	; 9
 570:	d8 07       	cpc	r29, r24
 572:	21 f4       	brne	.+8      	; 0x57c <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 574:	64 e0       	ldi	r22, 0x04	; 4
 576:	84 e0       	ldi	r24, 0x04	; 4
 578:	63 de       	rcall	.-826    	; 0x240 <sysclk_enable_module>
 57a:	4f c0       	rjmp	.+158    	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 57c:	c0 39       	cpi	r28, 0x90	; 144
 57e:	ea e0       	ldi	r30, 0x0A	; 10
 580:	de 07       	cpc	r29, r30
 582:	21 f4       	brne	.+8      	; 0x58c <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 584:	64 e0       	ldi	r22, 0x04	; 4
 586:	85 e0       	ldi	r24, 0x05	; 5
 588:	5b de       	rcall	.-842    	; 0x240 <sysclk_enable_module>
 58a:	47 c0       	rjmp	.+142    	; 0x61a <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 58c:	c0 3c       	cpi	r28, 0xC0	; 192
 58e:	f8 e0       	ldi	r31, 0x08	; 8
 590:	df 07       	cpc	r29, r31
 592:	21 f4       	brne	.+8      	; 0x59c <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 594:	68 e0       	ldi	r22, 0x08	; 8
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	53 de       	rcall	.-858    	; 0x240 <sysclk_enable_module>
 59a:	3f c0       	rjmp	.+126    	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 59c:	c0 3c       	cpi	r28, 0xC0	; 192
 59e:	89 e0       	ldi	r24, 0x09	; 9
 5a0:	d8 07       	cpc	r29, r24
 5a2:	21 f4       	brne	.+8      	; 0x5ac <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 5a4:	68 e0       	ldi	r22, 0x08	; 8
 5a6:	84 e0       	ldi	r24, 0x04	; 4
 5a8:	4b de       	rcall	.-874    	; 0x240 <sysclk_enable_module>
 5aa:	37 c0       	rjmp	.+110    	; 0x61a <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 5ac:	c0 3a       	cpi	r28, 0xA0	; 160
 5ae:	e8 e0       	ldi	r30, 0x08	; 8
 5b0:	de 07       	cpc	r29, r30
 5b2:	21 f4       	brne	.+8      	; 0x5bc <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 5b4:	60 e1       	ldi	r22, 0x10	; 16
 5b6:	83 e0       	ldi	r24, 0x03	; 3
 5b8:	43 de       	rcall	.-890    	; 0x240 <sysclk_enable_module>
 5ba:	2f c0       	rjmp	.+94     	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 5bc:	c0 3a       	cpi	r28, 0xA0	; 160
 5be:	f9 e0       	ldi	r31, 0x09	; 9
 5c0:	df 07       	cpc	r29, r31
 5c2:	21 f4       	brne	.+8      	; 0x5cc <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 5c4:	60 e1       	ldi	r22, 0x10	; 16
 5c6:	84 e0       	ldi	r24, 0x04	; 4
 5c8:	3b de       	rcall	.-906    	; 0x240 <sysclk_enable_module>
 5ca:	27 c0       	rjmp	.+78     	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 5cc:	c0 3a       	cpi	r28, 0xA0	; 160
 5ce:	8a e0       	ldi	r24, 0x0A	; 10
 5d0:	d8 07       	cpc	r29, r24
 5d2:	21 f4       	brne	.+8      	; 0x5dc <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 5d4:	60 e1       	ldi	r22, 0x10	; 16
 5d6:	85 e0       	ldi	r24, 0x05	; 5
 5d8:	33 de       	rcall	.-922    	; 0x240 <sysclk_enable_module>
 5da:	1f c0       	rjmp	.+62     	; 0x61a <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 5dc:	c0 3b       	cpi	r28, 0xB0	; 176
 5de:	e8 e0       	ldi	r30, 0x08	; 8
 5e0:	de 07       	cpc	r29, r30
 5e2:	21 f4       	brne	.+8      	; 0x5ec <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 5e4:	60 e2       	ldi	r22, 0x20	; 32
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	2b de       	rcall	.-938    	; 0x240 <sysclk_enable_module>
 5ea:	17 c0       	rjmp	.+46     	; 0x61a <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 5ec:	c0 3b       	cpi	r28, 0xB0	; 176
 5ee:	f9 e0       	ldi	r31, 0x09	; 9
 5f0:	df 07       	cpc	r29, r31
 5f2:	21 f4       	brne	.+8      	; 0x5fc <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 5f4:	60 e2       	ldi	r22, 0x20	; 32
 5f6:	84 e0       	ldi	r24, 0x04	; 4
 5f8:	23 de       	rcall	.-954    	; 0x240 <sysclk_enable_module>
 5fa:	0f c0       	rjmp	.+30     	; 0x61a <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 5fc:	c0 38       	cpi	r28, 0x80	; 128
 5fe:	84 e0       	ldi	r24, 0x04	; 4
 600:	d8 07       	cpc	r29, r24
 602:	21 f4       	brne	.+8      	; 0x60c <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 604:	60 e4       	ldi	r22, 0x40	; 64
 606:	83 e0       	ldi	r24, 0x03	; 3
 608:	1b de       	rcall	.-970    	; 0x240 <sysclk_enable_module>
 60a:	07 c0       	rjmp	.+14     	; 0x61a <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 60c:	c0 3a       	cpi	r28, 0xA0	; 160
 60e:	e4 e0       	ldi	r30, 0x04	; 4
 610:	de 07       	cpc	r29, r30
 612:	19 f4       	brne	.+6      	; 0x61a <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 614:	60 e4       	ldi	r22, 0x40	; 64
 616:	85 e0       	ldi	r24, 0x05	; 5
 618:	13 de       	rcall	.-986    	; 0x240 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 61a:	8d 81       	ldd	r24, Y+5	; 0x05
 61c:	8f 73       	andi	r24, 0x3F	; 63
 61e:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
 620:	f8 01       	movw	r30, r16
 622:	94 81       	ldd	r25, Z+4	; 0x04
 624:	85 81       	ldd	r24, Z+5	; 0x05
 626:	89 2b       	or	r24, r25
 628:	96 81       	ldd	r25, Z+6	; 0x06
 62a:	99 23       	and	r25, r25
 62c:	11 f0       	breq	.+4      	; 0x632 <usart_init_rs232+0x1a6>
 62e:	98 e0       	ldi	r25, 0x08	; 8
 630:	01 c0       	rjmp	.+2      	; 0x634 <usart_init_rs232+0x1a8>
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	89 2b       	or	r24, r25
 636:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
 638:	f8 01       	movw	r30, r16
 63a:	40 81       	ld	r20, Z
 63c:	51 81       	ldd	r21, Z+1	; 0x01
 63e:	62 81       	ldd	r22, Z+2	; 0x02
 640:	73 81       	ldd	r23, Z+3	; 0x03
 642:	00 e0       	ldi	r16, 0x00	; 0
 644:	16 e3       	ldi	r17, 0x36	; 54
 646:	2e e6       	ldi	r18, 0x6E	; 110
 648:	31 e0       	ldi	r19, 0x01	; 1
 64a:	ce 01       	movw	r24, r28
 64c:	19 de       	rcall	.-974    	; 0x280 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
 64e:	9c 81       	ldd	r25, Y+4	; 0x04
 650:	98 60       	ori	r25, 0x08	; 8
 652:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
 654:	9c 81       	ldd	r25, Y+4	; 0x04
 656:	90 61       	ori	r25, 0x10	; 16
 658:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	0f 91       	pop	r16
 662:	08 95       	ret

00000664 <__vector_88>:
uint8_t i;
uint8_t tx_buf[] = "\n\rHello AVR Jonathan ! : ";
uint8_t tx_length = 25;

ISR(USART_RX_Vect)
{
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
	usart_putchar(USART_SERIAL_E0,
 686:	80 ea       	ldi	r24, 0xA0	; 160
 688:	99 e0       	ldi	r25, 0x09	; 9
 68a:	f4 dd       	rcall	.-1048   	; 0x274 <usart_getchar>
 68c:	68 2f       	mov	r22, r24
 68e:	80 ea       	ldi	r24, 0xA0	; 160
 690:	99 e0       	ldi	r25, 0x09	; 9
 692:	e8 dd       	rcall	.-1072   	; 0x264 <usart_putchar>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 694:	e0 ea       	ldi	r30, 0xA0	; 160
 696:	f9 e0       	ldi	r31, 0x09	; 9
 698:	81 81       	ldd	r24, Z+1	; 0x01
	usart_getchar(USART_SERIAL_E0));
	while (!usart_tx_is_complete(USART_SERIAL_E0)) {
 69a:	86 ff       	sbrs	r24, 6
 69c:	fd cf       	rjmp	.-6      	; 0x698 <__vector_88+0x34>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 69e:	80 e4       	ldi	r24, 0x40	; 64
 6a0:	e0 ea       	ldi	r30, 0xA0	; 160
 6a2:	f9 e0       	ldi	r31, 0x09	; 9
 6a4:	81 83       	std	Z+1, r24	; 0x01
	}
	usart_clear_tx_complete(USART_SERIAL_E0);
}
 6a6:	ff 91       	pop	r31
 6a8:	ef 91       	pop	r30
 6aa:	bf 91       	pop	r27
 6ac:	af 91       	pop	r26
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	7f 91       	pop	r23
 6b4:	6f 91       	pop	r22
 6b6:	5f 91       	pop	r21
 6b8:	4f 91       	pop	r20
 6ba:	3f 91       	pop	r19
 6bc:	2f 91       	pop	r18
 6be:	0f 90       	pop	r0
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	0f 90       	pop	r0
 6c4:	1f 90       	pop	r1
 6c6:	18 95       	reti

000006c8 <main>:
int main (void)
{
	
	
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
 6c8:	81 dd       	rcall	.-1278   	; 0x1cc <sysclk_init>
	board_init();
 6ca:	72 dd       	rcall	.-1308   	; 0x1b0 <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
 6cc:	87 e0       	ldi	r24, 0x07	; 7
 6ce:	e0 ea       	ldi	r30, 0xA0	; 160
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	sei();
 6d4:	78 94       	sei
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	
	sysclk_enable_module(SYSCLK_PORT_D, PR_USART0_bm);
 6d6:	60 e1       	ldi	r22, 0x10	; 16
 6d8:	84 e0       	ldi	r24, 0x04	; 4
 6da:	b2 dd       	rcall	.-1180   	; 0x240 <sysclk_enable_module>
	usart_init_rs232(USART_SERIAL_E0, &USART_SERIAL_OPTIONS);
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	70 e2       	ldi	r23, 0x20	; 32
 6e0:	80 ea       	ldi	r24, 0xA0	; 160
 6e2:	99 e0       	ldi	r25, 0x09	; 9
 6e4:	d3 de       	rcall	.-602    	; 0x48c <usart_init_rs232>
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
 6e6:	e0 ea       	ldi	r30, 0xA0	; 160
 6e8:	f9 e0       	ldi	r31, 0x09	; 9
 6ea:	83 81       	ldd	r24, Z+3	; 0x03
 6ec:	8f 7c       	andi	r24, 0xCF	; 207
 6ee:	80 61       	ori	r24, 0x10	; 16
 6f0:	83 83       	std	Z+3, r24	; 0x03
	usart_set_rx_interrupt_level(USART_SERIAL_E0, USART_INT_LVL_LO);


	/* Send "message header" */
	for (i = 0; i < sizeof(encoded_message); i++) {
 6f2:	10 92 3b 20 	sts	0x203B, r1
 6f6:	80 e0       	ldi	r24, 0x00	; 0
		usart_putchar(USART_SERIAL_E0, encoded_message[i]);
 6f8:	c0 ea       	ldi	r28, 0xA0	; 160
 6fa:	d9 e0       	ldi	r29, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 6fc:	10 e4       	ldi	r17, 0x40	; 64
 6fe:	e8 2f       	mov	r30, r24
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	e9 5f       	subi	r30, 0xF9	; 249
 704:	ff 4d       	sbci	r31, 0xDF	; 223
 706:	60 81       	ld	r22, Z
 708:	ce 01       	movw	r24, r28
 70a:	ac dd       	rcall	.-1192   	; 0x264 <usart_putchar>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 70c:	89 81       	ldd	r24, Y+1	; 0x01
		while (!usart_tx_is_complete(USART_SERIAL_E0)) {
 70e:	86 ff       	sbrs	r24, 6
 710:	fd cf       	rjmp	.-6      	; 0x70c <main+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 712:	19 83       	std	Y+1, r17	; 0x01
	usart_init_rs232(USART_SERIAL_E0, &USART_SERIAL_OPTIONS);
	usart_set_rx_interrupt_level(USART_SERIAL_E0, USART_INT_LVL_LO);


	/* Send "message header" */
	for (i = 0; i < sizeof(encoded_message); i++) {
 714:	80 91 3b 20 	lds	r24, 0x203B
 718:	8f 5f       	subi	r24, 0xFF	; 255
 71a:	80 93 3b 20 	sts	0x203B, r24
 71e:	83 33       	cpi	r24, 0x33	; 51
 720:	70 f3       	brcs	.-36     	; 0x6fe <main+0x36>
 722:	ff cf       	rjmp	.-2      	; 0x722 <main+0x5a>

00000724 <__udivmodsi4>:
 724:	a1 e2       	ldi	r26, 0x21	; 33
 726:	1a 2e       	mov	r1, r26
 728:	aa 1b       	sub	r26, r26
 72a:	bb 1b       	sub	r27, r27
 72c:	fd 01       	movw	r30, r26
 72e:	0d c0       	rjmp	.+26     	; 0x74a <__udivmodsi4_ep>

00000730 <__udivmodsi4_loop>:
 730:	aa 1f       	adc	r26, r26
 732:	bb 1f       	adc	r27, r27
 734:	ee 1f       	adc	r30, r30
 736:	ff 1f       	adc	r31, r31
 738:	a2 17       	cp	r26, r18
 73a:	b3 07       	cpc	r27, r19
 73c:	e4 07       	cpc	r30, r20
 73e:	f5 07       	cpc	r31, r21
 740:	20 f0       	brcs	.+8      	; 0x74a <__udivmodsi4_ep>
 742:	a2 1b       	sub	r26, r18
 744:	b3 0b       	sbc	r27, r19
 746:	e4 0b       	sbc	r30, r20
 748:	f5 0b       	sbc	r31, r21

0000074a <__udivmodsi4_ep>:
 74a:	66 1f       	adc	r22, r22
 74c:	77 1f       	adc	r23, r23
 74e:	88 1f       	adc	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	1a 94       	dec	r1
 754:	69 f7       	brne	.-38     	; 0x730 <__udivmodsi4_loop>
 756:	60 95       	com	r22
 758:	70 95       	com	r23
 75a:	80 95       	com	r24
 75c:	90 95       	com	r25
 75e:	9b 01       	movw	r18, r22
 760:	ac 01       	movw	r20, r24
 762:	bd 01       	movw	r22, r26
 764:	cf 01       	movw	r24, r30
 766:	08 95       	ret

00000768 <_exit>:
 768:	f8 94       	cli

0000076a <__stop_program>:
 76a:	ff cf       	rjmp	.-2      	; 0x76a <__stop_program>
