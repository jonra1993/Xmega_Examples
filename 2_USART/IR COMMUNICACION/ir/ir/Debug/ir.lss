
ir.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00000240  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802000  00802000  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b70  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000449  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011a6  00000000  00000000  00001395  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  0000253c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000210a3  00000000  00000000  0000268c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000483  00000000  00000000  0002372f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00023bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00007b11  00000000  00000000  00023c4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	bb c0       	rjmp	.+374    	; 0x178 <__ctors_end>
   2:	00 00       	nop
   4:	c9 c0       	rjmp	.+402    	; 0x198 <__bad_interrupt>
   6:	00 00       	nop
   8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
   a:	00 00       	nop
   c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
   e:	00 00       	nop
  10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
  12:	00 00       	nop
  14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
  16:	00 00       	nop
  18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
  1e:	00 00       	nop
  20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
  22:	00 00       	nop
  24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
  26:	00 00       	nop
  28:	b7 c0       	rjmp	.+366    	; 0x198 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b5 c0       	rjmp	.+362    	; 0x198 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
  32:	00 00       	nop
  34:	b1 c0       	rjmp	.+354    	; 0x198 <__bad_interrupt>
  36:	00 00       	nop
  38:	af c0       	rjmp	.+350    	; 0x198 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
  42:	00 00       	nop
  44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
  46:	00 00       	nop
  48:	a7 c0       	rjmp	.+334    	; 0x198 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a5 c0       	rjmp	.+330    	; 0x198 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
  52:	00 00       	nop
  54:	a1 c0       	rjmp	.+322    	; 0x198 <__bad_interrupt>
  56:	00 00       	nop
  58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
  5e:	00 00       	nop
  60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
  62:	00 00       	nop
  64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
  66:	00 00       	nop
  68:	97 c0       	rjmp	.+302    	; 0x198 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	95 c0       	rjmp	.+298    	; 0x198 <__bad_interrupt>
  6e:	00 00       	nop
  70:	93 c0       	rjmp	.+294    	; 0x198 <__bad_interrupt>
  72:	00 00       	nop
  74:	91 c0       	rjmp	.+290    	; 0x198 <__bad_interrupt>
  76:	00 00       	nop
  78:	8f c0       	rjmp	.+286    	; 0x198 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8d c0       	rjmp	.+282    	; 0x198 <__bad_interrupt>
  7e:	00 00       	nop
  80:	8b c0       	rjmp	.+278    	; 0x198 <__bad_interrupt>
  82:	00 00       	nop
  84:	89 c0       	rjmp	.+274    	; 0x198 <__bad_interrupt>
  86:	00 00       	nop
  88:	87 c0       	rjmp	.+270    	; 0x198 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	85 c0       	rjmp	.+266    	; 0x198 <__bad_interrupt>
  8e:	00 00       	nop
  90:	83 c0       	rjmp	.+262    	; 0x198 <__bad_interrupt>
  92:	00 00       	nop
  94:	81 c0       	rjmp	.+258    	; 0x198 <__bad_interrupt>
  96:	00 00       	nop
  98:	7f c0       	rjmp	.+254    	; 0x198 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	7d c0       	rjmp	.+250    	; 0x198 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	7b c0       	rjmp	.+246    	; 0x198 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	79 c0       	rjmp	.+242    	; 0x198 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	77 c0       	rjmp	.+238    	; 0x198 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	75 c0       	rjmp	.+234    	; 0x198 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	73 c0       	rjmp	.+230    	; 0x198 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	71 c0       	rjmp	.+226    	; 0x198 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	6f c0       	rjmp	.+222    	; 0x198 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	6d c0       	rjmp	.+218    	; 0x198 <__bad_interrupt>
  be:	00 00       	nop
  c0:	6b c0       	rjmp	.+214    	; 0x198 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	69 c0       	rjmp	.+210    	; 0x198 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	67 c0       	rjmp	.+206    	; 0x198 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	65 c0       	rjmp	.+202    	; 0x198 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	63 c0       	rjmp	.+198    	; 0x198 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	61 c0       	rjmp	.+194    	; 0x198 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	5f c0       	rjmp	.+190    	; 0x198 <__bad_interrupt>
  da:	00 00       	nop
  dc:	5d c0       	rjmp	.+186    	; 0x198 <__bad_interrupt>
  de:	00 00       	nop
  e0:	5b c0       	rjmp	.+182    	; 0x198 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	59 c0       	rjmp	.+178    	; 0x198 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	57 c0       	rjmp	.+174    	; 0x198 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	55 c0       	rjmp	.+170    	; 0x198 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	53 c0       	rjmp	.+166    	; 0x198 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	51 c0       	rjmp	.+162    	; 0x198 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	4f c0       	rjmp	.+158    	; 0x198 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	4d c0       	rjmp	.+154    	; 0x198 <__bad_interrupt>
  fe:	00 00       	nop
 100:	4b c0       	rjmp	.+150    	; 0x198 <__bad_interrupt>
 102:	00 00       	nop
 104:	49 c0       	rjmp	.+146    	; 0x198 <__bad_interrupt>
 106:	00 00       	nop
 108:	47 c0       	rjmp	.+142    	; 0x198 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	45 c0       	rjmp	.+138    	; 0x198 <__bad_interrupt>
 10e:	00 00       	nop
 110:	43 c0       	rjmp	.+134    	; 0x198 <__bad_interrupt>
 112:	00 00       	nop
 114:	41 c0       	rjmp	.+130    	; 0x198 <__bad_interrupt>
 116:	00 00       	nop
 118:	3f c0       	rjmp	.+126    	; 0x198 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	3d c0       	rjmp	.+122    	; 0x198 <__bad_interrupt>
 11e:	00 00       	nop
 120:	3b c0       	rjmp	.+118    	; 0x198 <__bad_interrupt>
 122:	00 00       	nop
 124:	39 c0       	rjmp	.+114    	; 0x198 <__bad_interrupt>
 126:	00 00       	nop
 128:	37 c0       	rjmp	.+110    	; 0x198 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	35 c0       	rjmp	.+106    	; 0x198 <__bad_interrupt>
 12e:	00 00       	nop
 130:	33 c0       	rjmp	.+102    	; 0x198 <__bad_interrupt>
 132:	00 00       	nop
 134:	31 c0       	rjmp	.+98     	; 0x198 <__bad_interrupt>
 136:	00 00       	nop
 138:	2f c0       	rjmp	.+94     	; 0x198 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	2d c0       	rjmp	.+90     	; 0x198 <__bad_interrupt>
 13e:	00 00       	nop
 140:	2b c0       	rjmp	.+86     	; 0x198 <__bad_interrupt>
 142:	00 00       	nop
 144:	29 c0       	rjmp	.+82     	; 0x198 <__bad_interrupt>
 146:	00 00       	nop
 148:	27 c0       	rjmp	.+78     	; 0x198 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	25 c0       	rjmp	.+74     	; 0x198 <__bad_interrupt>
 14e:	00 00       	nop
 150:	23 c0       	rjmp	.+70     	; 0x198 <__bad_interrupt>
 152:	00 00       	nop
 154:	21 c0       	rjmp	.+66     	; 0x198 <__bad_interrupt>
 156:	00 00       	nop
 158:	1f c0       	rjmp	.+62     	; 0x198 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	1d c0       	rjmp	.+58     	; 0x198 <__bad_interrupt>
 15e:	00 00       	nop
 160:	1b c0       	rjmp	.+54     	; 0x198 <__bad_interrupt>
 162:	00 00       	nop
 164:	19 c0       	rjmp	.+50     	; 0x198 <__bad_interrupt>
 166:	00 00       	nop
 168:	17 c0       	rjmp	.+46     	; 0x198 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	15 c0       	rjmp	.+42     	; 0x198 <__bad_interrupt>
 16e:	00 00       	nop
 170:	13 c0       	rjmp	.+38     	; 0x198 <__bad_interrupt>
 172:	00 00       	nop
 174:	11 c0       	rjmp	.+34     	; 0x198 <__bad_interrupt>
	...

00000178 <__ctors_end>:
 178:	11 24       	eor	r1, r1
 17a:	1f be       	out	0x3f, r1	; 63
 17c:	cf ef       	ldi	r28, 0xFF	; 255
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	df e2       	ldi	r29, 0x2F	; 47
 182:	de bf       	out	0x3e, r29	; 62

00000184 <__do_clear_bss>:
 184:	20 e2       	ldi	r18, 0x20	; 32
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b0 e2       	ldi	r27, 0x20	; 32
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	a1 30       	cpi	r26, 0x01	; 1
 190:	b2 07       	cpc	r27, r18
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	02 d0       	rcall	.+4      	; 0x19a <main>
 196:	52 c0       	rjmp	.+164    	; 0x23c <_exit>

00000198 <__bad_interrupt>:
 198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <main>:
	uint8_t receivedData;

	/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins are used. */
	/* PIN3 (TXD0) as output. */
	PORTD.DIRSET   = PIN3_bm;
 19a:	e0 e6       	ldi	r30, 0x60	; 96
 19c:	f6 e0       	ldi	r31, 0x06	; 6
 19e:	88 e0       	ldi	r24, 0x08	; 8
 1a0:	81 83       	std	Z+1, r24	; 0x01
	/* PC2 (RXD0) as input. */
	PORTD.DIRCLR   = PIN2_bm;
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	82 83       	std	Z+2, r24	; 0x02
	
	//led
	PORTR.DIRSET= PIN0_bm;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	e0 ee       	ldi	r30, 0xE0	; 224
 1aa:	f7 e0       	ldi	r31, 0x07	; 7
 1ac:	81 83       	std	Z+1, r24	; 0x01

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&Objeto_IR, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 1ae:	e0 ea       	ldi	r30, 0xA0	; 160
 1b0:	f9 e0       	ldi	r31, 0x09	; 9
 1b2:	93 e0       	ldi	r25, 0x03	; 3
 1b4:	95 83       	std	Z+5, r25	; 0x05
	 * Do not use the baud rate scale factor
	 *
	 * Baud rate select = (1/(16*(((I/O clock frequency)/Baud rate)-1)
	 *                 = 12
	 */
	USART_Baudrate_Set(&Objeto_IR, 12 , 0);
 1b6:	9c e0       	ldi	r25, 0x0C	; 12
 1b8:	96 83       	std	Z+6, r25	; 0x06
 1ba:	17 82       	std	Z+7, r1	; 0x07

	/* Set USARTD0 in IrDA mode.*/
	USART_SetMode(&Objeto_IR, USART_CMODE_IRDA_gc);
 1bc:	95 81       	ldd	r25, Z+5	; 0x05
 1be:	9f 73       	andi	r25, 0x3F	; 63
 1c0:	90 68       	ori	r25, 0x80	; 128
 1c2:	95 83       	std	Z+5, r25	; 0x05
	IRCOM_TXSetPulseLength(254);
	IRCOM_RXSetPulseLength(254);
	*/

	/* Enable both RX and TX. */
	USART_Rx_Enable(&Objeto_IR);
 1c4:	94 81       	ldd	r25, Z+4	; 0x04
 1c6:	90 61       	ori	r25, 0x10	; 16
 1c8:	94 83       	std	Z+4, r25	; 0x04
	USART_Tx_Enable(&Objeto_IR);
 1ca:	94 81       	ldd	r25, Z+4	; 0x04
 1cc:	98 60       	ori	r25, 0x08	; 8
 1ce:	94 83       	std	Z+4, r25	; 0x04


	/* Assume that everything is OK. */
	success = true;
 1d0:	80 93 00 20 	sts	0x2000, r24
 1d4:	3f ef       	ldi	r19, 0xFF	; 255
	    /* Send one char. */
		do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
		}while(!USART_IsTXDataRegisterEmpty(&Objeto_IR));
		USART_PutChar(&Objeto_IR, sendData);
 1d6:	58 ee       	ldi	r21, 0xE8	; 232
 1d8:	43 e0       	ldi	r20, 0x03	; 3
	while(sendData) {
	    /* Send one char. */
		do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
		}while(!USART_IsTXDataRegisterEmpty(&Objeto_IR));
 1da:	81 81       	ldd	r24, Z+1	; 0x01
 1dc:	85 ff       	sbrs	r24, 5
 1de:	fd cf       	rjmp	.-6      	; 0x1da <main+0x40>
		USART_PutChar(&Objeto_IR, sendData);
 1e0:	30 83       	st	Z, r19
 1e2:	85 2f       	mov	r24, r21
 1e4:	94 2f       	mov	r25, r20
		uint16_t timeout = 1000;
		/* Receive one char. */
		do{
		/* Wait until data received or a timeout.*/
		timeout--;
		}while(!USART_IsRXComplete(&Objeto_IR) && timeout!=0);
 1e6:	21 81       	ldd	r18, Z+1	; 0x01
 1e8:	22 23       	and	r18, r18
 1ea:	1c f0       	brlt	.+6      	; 0x1f2 <main+0x58>
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	00 97       	sbiw	r24, 0x00	; 0
 1f0:	d1 f7       	brne	.-12     	; 0x1e6 <main+0x4c>
		receivedData = USART_GetChar(&Objeto_IR);
 1f2:	80 81       	ld	r24, Z

		/* Check the received data. */
		if (receivedData != sendData){
 1f4:	38 13       	cpse	r19, r24
			success = false;
 1f6:	10 92 00 20 	sts	0x2000, r1
 1fa:	31 50       	subi	r19, 0x01	; 1

	/* Assume that everything is OK. */
	success = true;
	/* Send data from 255 down to 0*/
	sendData = 255;
	while(sendData) {
 1fc:	71 f7       	brne	.-36     	; 0x1da <main+0x40>
		}
		sendData--;
	}

	/* Disable both RX and TX. */
	USART_Rx_Disable(&Objeto_IR);
 1fe:	e0 ea       	ldi	r30, 0xA0	; 160
 200:	f9 e0       	ldi	r31, 0x09	; 9
 202:	84 81       	ldd	r24, Z+4	; 0x04
 204:	8f 7e       	andi	r24, 0xEF	; 239
 206:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Disable(&Objeto_IR);
 208:	84 81       	ldd	r24, Z+4	; 0x04
 20a:	87 7f       	andi	r24, 0xF7	; 247
 20c:	84 83       	std	Z+4, r24	; 0x04

	/* If success the program ends up inside the if statement.*/
	if(success){
 20e:	80 91 00 20 	lds	r24, 0x2000
 212:	88 23       	and	r24, r24
 214:	29 f0       	breq	.+10     	; 0x220 <main+0x86>
		PORTR.OUTSET=PIN0_bm;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	e0 ee       	ldi	r30, 0xE0	; 224
 21a:	f7 e0       	ldi	r31, 0x07	; 7
 21c:	85 83       	std	Z+5, r24	; 0x05
 21e:	ff cf       	rjmp	.-2      	; 0x21e <main+0x84>
		while(true);
	}
	else{
	  	while(true){
			  PORTR.OUTTGL=PIN0_bm;
 220:	e0 ee       	ldi	r30, 0xE0	; 224
 222:	f7 e0       	ldi	r31, 0x07	; 7
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	87 83       	std	Z+7, r24	; 0x07
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	2f e7       	ldi	r18, 0x7F	; 127
 22a:	38 e3       	ldi	r19, 0x38	; 56
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	30 40       	sbci	r19, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x94>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x9e>
 238:	00 00       	nop
 23a:	f5 cf       	rjmp	.-22     	; 0x226 <main+0x8c>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
