
enviar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000682  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  00000682  000006f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000128  00000000  00000000  00000730  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00004079  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a59  00000000  00000000  000048d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000027e3  00000000  00000000  0000532a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000240  00000000  00000000  00007b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0002252a  00000000  00000000  00007d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001475  00000000  00000000  0002a27a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  0002b6ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00008220  00000000  00000000  0002b7c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	bb c0       	rjmp	.+374    	; 0x178 <__ctors_end>
   2:	00 00       	nop
   4:	cc c0       	rjmp	.+408    	; 0x19e <__bad_interrupt>
   6:	00 00       	nop
   8:	ca c0       	rjmp	.+404    	; 0x19e <__bad_interrupt>
   a:	00 00       	nop
   c:	c8 c0       	rjmp	.+400    	; 0x19e <__bad_interrupt>
   e:	00 00       	nop
  10:	c6 c0       	rjmp	.+396    	; 0x19e <__bad_interrupt>
  12:	00 00       	nop
  14:	c4 c0       	rjmp	.+392    	; 0x19e <__bad_interrupt>
  16:	00 00       	nop
  18:	c2 c0       	rjmp	.+388    	; 0x19e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c0 c0       	rjmp	.+384    	; 0x19e <__bad_interrupt>
  1e:	00 00       	nop
  20:	be c0       	rjmp	.+380    	; 0x19e <__bad_interrupt>
  22:	00 00       	nop
  24:	bc c0       	rjmp	.+376    	; 0x19e <__bad_interrupt>
  26:	00 00       	nop
  28:	ba c0       	rjmp	.+372    	; 0x19e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b8 c0       	rjmp	.+368    	; 0x19e <__bad_interrupt>
  2e:	00 00       	nop
  30:	b6 c0       	rjmp	.+364    	; 0x19e <__bad_interrupt>
  32:	00 00       	nop
  34:	b4 c0       	rjmp	.+360    	; 0x19e <__bad_interrupt>
  36:	00 00       	nop
  38:	b2 c0       	rjmp	.+356    	; 0x19e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b0 c0       	rjmp	.+352    	; 0x19e <__bad_interrupt>
  3e:	00 00       	nop
  40:	ae c0       	rjmp	.+348    	; 0x19e <__bad_interrupt>
  42:	00 00       	nop
  44:	ac c0       	rjmp	.+344    	; 0x19e <__bad_interrupt>
  46:	00 00       	nop
  48:	aa c0       	rjmp	.+340    	; 0x19e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a8 c0       	rjmp	.+336    	; 0x19e <__bad_interrupt>
  4e:	00 00       	nop
  50:	a6 c0       	rjmp	.+332    	; 0x19e <__bad_interrupt>
  52:	00 00       	nop
  54:	a4 c0       	rjmp	.+328    	; 0x19e <__bad_interrupt>
  56:	00 00       	nop
  58:	a2 c0       	rjmp	.+324    	; 0x19e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a0 c0       	rjmp	.+320    	; 0x19e <__bad_interrupt>
  5e:	00 00       	nop
  60:	9e c0       	rjmp	.+316    	; 0x19e <__bad_interrupt>
  62:	00 00       	nop
  64:	9c c0       	rjmp	.+312    	; 0x19e <__bad_interrupt>
  66:	00 00       	nop
  68:	9a c0       	rjmp	.+308    	; 0x19e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	98 c0       	rjmp	.+304    	; 0x19e <__bad_interrupt>
  6e:	00 00       	nop
  70:	96 c0       	rjmp	.+300    	; 0x19e <__bad_interrupt>
  72:	00 00       	nop
  74:	94 c0       	rjmp	.+296    	; 0x19e <__bad_interrupt>
  76:	00 00       	nop
  78:	92 c0       	rjmp	.+292    	; 0x19e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	90 c0       	rjmp	.+288    	; 0x19e <__bad_interrupt>
  7e:	00 00       	nop
  80:	8e c0       	rjmp	.+284    	; 0x19e <__bad_interrupt>
  82:	00 00       	nop
  84:	8c c0       	rjmp	.+280    	; 0x19e <__bad_interrupt>
  86:	00 00       	nop
  88:	8a c0       	rjmp	.+276    	; 0x19e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	88 c0       	rjmp	.+272    	; 0x19e <__bad_interrupt>
  8e:	00 00       	nop
  90:	86 c0       	rjmp	.+268    	; 0x19e <__bad_interrupt>
  92:	00 00       	nop
  94:	84 c0       	rjmp	.+264    	; 0x19e <__bad_interrupt>
  96:	00 00       	nop
  98:	82 c0       	rjmp	.+260    	; 0x19e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	80 c0       	rjmp	.+256    	; 0x19e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	7e c0       	rjmp	.+252    	; 0x19e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	7c c0       	rjmp	.+248    	; 0x19e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	7a c0       	rjmp	.+244    	; 0x19e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	78 c0       	rjmp	.+240    	; 0x19e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	76 c0       	rjmp	.+236    	; 0x19e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	74 c0       	rjmp	.+232    	; 0x19e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	72 c0       	rjmp	.+228    	; 0x19e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	70 c0       	rjmp	.+224    	; 0x19e <__bad_interrupt>
  be:	00 00       	nop
  c0:	6e c0       	rjmp	.+220    	; 0x19e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	6c c0       	rjmp	.+216    	; 0x19e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	6a c0       	rjmp	.+212    	; 0x19e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	68 c0       	rjmp	.+208    	; 0x19e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	66 c0       	rjmp	.+204    	; 0x19e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	64 c0       	rjmp	.+200    	; 0x19e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	62 c0       	rjmp	.+196    	; 0x19e <__bad_interrupt>
  da:	00 00       	nop
  dc:	60 c0       	rjmp	.+192    	; 0x19e <__bad_interrupt>
  de:	00 00       	nop
  e0:	5e c0       	rjmp	.+188    	; 0x19e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	5c c0       	rjmp	.+184    	; 0x19e <__bad_interrupt>
  e6:	00 00       	nop
  e8:	5a c0       	rjmp	.+180    	; 0x19e <__bad_interrupt>
  ea:	00 00       	nop
  ec:	58 c0       	rjmp	.+176    	; 0x19e <__bad_interrupt>
  ee:	00 00       	nop
  f0:	56 c0       	rjmp	.+172    	; 0x19e <__bad_interrupt>
  f2:	00 00       	nop
  f4:	54 c0       	rjmp	.+168    	; 0x19e <__bad_interrupt>
  f6:	00 00       	nop
  f8:	52 c0       	rjmp	.+164    	; 0x19e <__bad_interrupt>
  fa:	00 00       	nop
  fc:	50 c0       	rjmp	.+160    	; 0x19e <__bad_interrupt>
  fe:	00 00       	nop
 100:	4e c0       	rjmp	.+156    	; 0x19e <__bad_interrupt>
 102:	00 00       	nop
 104:	4c c0       	rjmp	.+152    	; 0x19e <__bad_interrupt>
 106:	00 00       	nop
 108:	4a c0       	rjmp	.+148    	; 0x19e <__bad_interrupt>
 10a:	00 00       	nop
 10c:	48 c0       	rjmp	.+144    	; 0x19e <__bad_interrupt>
 10e:	00 00       	nop
 110:	46 c0       	rjmp	.+140    	; 0x19e <__bad_interrupt>
 112:	00 00       	nop
 114:	44 c0       	rjmp	.+136    	; 0x19e <__bad_interrupt>
 116:	00 00       	nop
 118:	42 c0       	rjmp	.+132    	; 0x19e <__bad_interrupt>
 11a:	00 00       	nop
 11c:	40 c0       	rjmp	.+128    	; 0x19e <__bad_interrupt>
 11e:	00 00       	nop
 120:	3e c0       	rjmp	.+124    	; 0x19e <__bad_interrupt>
 122:	00 00       	nop
 124:	3c c0       	rjmp	.+120    	; 0x19e <__bad_interrupt>
 126:	00 00       	nop
 128:	3a c0       	rjmp	.+116    	; 0x19e <__bad_interrupt>
 12a:	00 00       	nop
 12c:	38 c0       	rjmp	.+112    	; 0x19e <__bad_interrupt>
 12e:	00 00       	nop
 130:	36 c0       	rjmp	.+108    	; 0x19e <__bad_interrupt>
 132:	00 00       	nop
 134:	34 c0       	rjmp	.+104    	; 0x19e <__bad_interrupt>
 136:	00 00       	nop
 138:	32 c0       	rjmp	.+100    	; 0x19e <__bad_interrupt>
 13a:	00 00       	nop
 13c:	30 c0       	rjmp	.+96     	; 0x19e <__bad_interrupt>
 13e:	00 00       	nop
 140:	2e c0       	rjmp	.+92     	; 0x19e <__bad_interrupt>
 142:	00 00       	nop
 144:	2c c0       	rjmp	.+88     	; 0x19e <__bad_interrupt>
 146:	00 00       	nop
 148:	2a c0       	rjmp	.+84     	; 0x19e <__bad_interrupt>
 14a:	00 00       	nop
 14c:	28 c0       	rjmp	.+80     	; 0x19e <__bad_interrupt>
 14e:	00 00       	nop
 150:	26 c0       	rjmp	.+76     	; 0x19e <__bad_interrupt>
 152:	00 00       	nop
 154:	24 c0       	rjmp	.+72     	; 0x19e <__bad_interrupt>
 156:	00 00       	nop
 158:	22 c0       	rjmp	.+68     	; 0x19e <__bad_interrupt>
 15a:	00 00       	nop
 15c:	20 c0       	rjmp	.+64     	; 0x19e <__bad_interrupt>
 15e:	00 00       	nop
 160:	1e c0       	rjmp	.+60     	; 0x19e <__bad_interrupt>
 162:	00 00       	nop
 164:	1c c0       	rjmp	.+56     	; 0x19e <__bad_interrupt>
 166:	00 00       	nop
 168:	1a c0       	rjmp	.+52     	; 0x19e <__bad_interrupt>
 16a:	00 00       	nop
 16c:	18 c0       	rjmp	.+48     	; 0x19e <__bad_interrupt>
 16e:	00 00       	nop
 170:	16 c0       	rjmp	.+44     	; 0x19e <__bad_interrupt>
 172:	00 00       	nop
 174:	14 c0       	rjmp	.+40     	; 0x19e <__bad_interrupt>
	...

00000178 <__ctors_end>:
 178:	11 24       	eor	r1, r1
 17a:	1f be       	out	0x3f, r1	; 63
 17c:	cf ef       	ldi	r28, 0xFF	; 255
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	df e2       	ldi	r29, 0x2F	; 47
 182:	de bf       	out	0x3e, r29	; 62

00000184 <__do_copy_data>:
 184:	10 e2       	ldi	r17, 0x20	; 32
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b0 e2       	ldi	r27, 0x20	; 32
 18a:	e2 e8       	ldi	r30, 0x82	; 130
 18c:	f6 e0       	ldi	r31, 0x06	; 6
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
 190:	05 90       	lpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a8 30       	cpi	r26, 0x08	; 8
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>
 19a:	40 d2       	rcall	.+1152   	; 0x61c <main>
 19c:	70 c2       	rjmp	.+1248   	; 0x67e <_exit>

0000019e <__bad_interrupt>:
 19e:	30 cf       	rjmp	.-416    	; 0x0 <__vectors>

000001a0 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
 1a0:	fc 01       	movw	r30, r24
 1a2:	81 81       	ldd	r24, Z+1	; 0x01
 1a4:	85 ff       	sbrs	r24, 5
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <usart_putchar+0x2>
 1a8:	60 83       	st	Z, r22
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	08 95       	ret

000001b0 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 1b0:	4f 92       	push	r4
 1b2:	5f 92       	push	r5
 1b4:	6f 92       	push	r6
 1b6:	7f 92       	push	r7
 1b8:	8f 92       	push	r8
 1ba:	9f 92       	push	r9
 1bc:	af 92       	push	r10
 1be:	bf 92       	push	r11
 1c0:	cf 92       	push	r12
 1c2:	df 92       	push	r13
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
 1d2:	4a 01       	movw	r8, r20
 1d4:	5b 01       	movw	r10, r22
 1d6:	28 01       	movw	r4, r16
 1d8:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
 1da:	d9 01       	movw	r26, r18
 1dc:	c8 01       	movw	r24, r16
 1de:	68 94       	set
 1e0:	12 f8       	bld	r1, 2
 1e2:	b6 95       	lsr	r27
 1e4:	a7 95       	ror	r26
 1e6:	97 95       	ror	r25
 1e8:	87 95       	ror	r24
 1ea:	16 94       	lsr	r1
 1ec:	d1 f7       	brne	.-12     	; 0x1e2 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
 1ee:	b9 01       	movw	r22, r18
 1f0:	a8 01       	movw	r20, r16
 1f2:	03 2e       	mov	r0, r19
 1f4:	36 e1       	ldi	r19, 0x16	; 22
 1f6:	76 95       	lsr	r23
 1f8:	67 95       	ror	r22
 1fa:	57 95       	ror	r21
 1fc:	47 95       	ror	r20
 1fe:	3a 95       	dec	r19
 200:	d1 f7       	brne	.-12     	; 0x1f6 <usart_set_baudrate+0x46>
 202:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 204:	2c 81       	ldd	r18, Y+4	; 0x04
 206:	22 fd       	sbrc	r18, 2
 208:	08 c0       	rjmp	.+16     	; 0x21a <usart_set_baudrate+0x6a>
		max_rate /= 2;
 20a:	b6 95       	lsr	r27
 20c:	a7 95       	ror	r26
 20e:	97 95       	ror	r25
 210:	87 95       	ror	r24
		min_rate /= 2;
 212:	76 95       	lsr	r23
 214:	67 95       	ror	r22
 216:	57 95       	ror	r21
 218:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
 21a:	88 15       	cp	r24, r8
 21c:	99 05       	cpc	r25, r9
 21e:	aa 05       	cpc	r26, r10
 220:	bb 05       	cpc	r27, r11
 222:	08 f4       	brcc	.+2      	; 0x226 <usart_set_baudrate+0x76>
 224:	a2 c0       	rjmp	.+324    	; 0x36a <usart_set_baudrate+0x1ba>
 226:	84 16       	cp	r8, r20
 228:	95 06       	cpc	r9, r21
 22a:	a6 06       	cpc	r10, r22
 22c:	b7 06       	cpc	r11, r23
 22e:	08 f4       	brcc	.+2      	; 0x232 <usart_set_baudrate+0x82>
 230:	9e c0       	rjmp	.+316    	; 0x36e <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 232:	8c 81       	ldd	r24, Y+4	; 0x04
 234:	82 fd       	sbrc	r24, 2
 236:	04 c0       	rjmp	.+8      	; 0x240 <usart_set_baudrate+0x90>
		baud *= 2;
 238:	88 0c       	add	r8, r8
 23a:	99 1c       	adc	r9, r9
 23c:	aa 1c       	adc	r10, r10
 23e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
 240:	c3 01       	movw	r24, r6
 242:	b2 01       	movw	r22, r4
 244:	a5 01       	movw	r20, r10
 246:	94 01       	movw	r18, r8
 248:	f8 d1       	rcall	.+1008   	; 0x63a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
 24a:	2f 3f       	cpi	r18, 0xFF	; 255
 24c:	31 05       	cpc	r19, r1
 24e:	41 05       	cpc	r20, r1
 250:	51 05       	cpc	r21, r1
 252:	08 f4       	brcc	.+2      	; 0x256 <usart_set_baudrate+0xa6>
 254:	8e c0       	rjmp	.+284    	; 0x372 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
 256:	c1 2c       	mov	r12, r1
 258:	d1 2c       	mov	r13, r1
 25a:	76 01       	movw	r14, r12
 25c:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 25e:	19 ef       	ldi	r17, 0xF9	; 249
 260:	05 c0       	rjmp	.+10     	; 0x26c <usart_set_baudrate+0xbc>
		if (ratio < limit) {
 262:	2c 15       	cp	r18, r12
 264:	3d 05       	cpc	r19, r13
 266:	4e 05       	cpc	r20, r14
 268:	5f 05       	cpc	r21, r15
 26a:	68 f0       	brcs	.+26     	; 0x286 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
 26c:	cc 0c       	add	r12, r12
 26e:	dd 1c       	adc	r13, r13
 270:	ee 1c       	adc	r14, r14
 272:	ff 1c       	adc	r15, r15

		if (exp < -3) {
 274:	1d 3f       	cpi	r17, 0xFD	; 253
 276:	14 f4       	brge	.+4      	; 0x27c <usart_set_baudrate+0xcc>
			limit |= 1;
 278:	68 94       	set
 27a:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 27c:	1f 5f       	subi	r17, 0xFF	; 255
 27e:	17 30       	cpi	r17, 0x07	; 7
 280:	81 f7       	brne	.-32     	; 0x262 <usart_set_baudrate+0xb2>
 282:	21 2f       	mov	r18, r17
 284:	4e c0       	rjmp	.+156    	; 0x322 <usart_set_baudrate+0x172>
 286:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
 288:	11 23       	and	r17, r17
 28a:	0c f0       	brlt	.+2      	; 0x28e <usart_set_baudrate+0xde>
 28c:	4a c0       	rjmp	.+148    	; 0x322 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 28e:	d5 01       	movw	r26, r10
 290:	c4 01       	movw	r24, r8
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	aa 1f       	adc	r26, r26
 298:	bb 1f       	adc	r27, r27
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	aa 1f       	adc	r26, r26
 2a0:	bb 1f       	adc	r27, r27
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	aa 1f       	adc	r26, r26
 2a8:	bb 1f       	adc	r27, r27
 2aa:	48 1a       	sub	r4, r24
 2ac:	59 0a       	sbc	r5, r25
 2ae:	6a 0a       	sbc	r6, r26
 2b0:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
 2b2:	1e 3f       	cpi	r17, 0xFE	; 254
 2b4:	ec f4       	brge	.+58     	; 0x2f0 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
 2b6:	6d ef       	ldi	r22, 0xFD	; 253
 2b8:	7f ef       	ldi	r23, 0xFF	; 255
 2ba:	61 1b       	sub	r22, r17
 2bc:	71 09       	sbc	r23, r1
 2be:	17 fd       	sbrc	r17, 7
 2c0:	73 95       	inc	r23
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <usart_set_baudrate+0x11c>
 2c4:	44 0c       	add	r4, r4
 2c6:	55 1c       	adc	r5, r5
 2c8:	66 1c       	adc	r6, r6
 2ca:	77 1c       	adc	r7, r7
 2cc:	6a 95       	dec	r22
 2ce:	d2 f7       	brpl	.-12     	; 0x2c4 <usart_set_baudrate+0x114>
 2d0:	d5 01       	movw	r26, r10
 2d2:	c4 01       	movw	r24, r8
 2d4:	b6 95       	lsr	r27
 2d6:	a7 95       	ror	r26
 2d8:	97 95       	ror	r25
 2da:	87 95       	ror	r24
 2dc:	bc 01       	movw	r22, r24
 2de:	cd 01       	movw	r24, r26
 2e0:	64 0d       	add	r22, r4
 2e2:	75 1d       	adc	r23, r5
 2e4:	86 1d       	adc	r24, r6
 2e6:	97 1d       	adc	r25, r7
 2e8:	a5 01       	movw	r20, r10
 2ea:	94 01       	movw	r18, r8
 2ec:	a6 d1       	rcall	.+844    	; 0x63a <__udivmodsi4>
 2ee:	34 c0       	rjmp	.+104    	; 0x358 <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
 2f0:	23 e0       	ldi	r18, 0x03	; 3
 2f2:	21 0f       	add	r18, r17
 2f4:	d5 01       	movw	r26, r10
 2f6:	c4 01       	movw	r24, r8
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <usart_set_baudrate+0x152>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	aa 1f       	adc	r26, r26
 300:	bb 1f       	adc	r27, r27
 302:	2a 95       	dec	r18
 304:	d2 f7       	brpl	.-12     	; 0x2fa <usart_set_baudrate+0x14a>
 306:	9c 01       	movw	r18, r24
 308:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
 30a:	b6 95       	lsr	r27
 30c:	a7 95       	ror	r26
 30e:	97 95       	ror	r25
 310:	87 95       	ror	r24
 312:	bc 01       	movw	r22, r24
 314:	cd 01       	movw	r24, r26
 316:	64 0d       	add	r22, r4
 318:	75 1d       	adc	r23, r5
 31a:	86 1d       	adc	r24, r6
 31c:	97 1d       	adc	r25, r7
 31e:	8d d1       	rcall	.+794    	; 0x63a <__udivmodsi4>
 320:	1b c0       	rjmp	.+54     	; 0x358 <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
 322:	2d 5f       	subi	r18, 0xFD	; 253
 324:	d5 01       	movw	r26, r10
 326:	c4 01       	movw	r24, r8
 328:	04 c0       	rjmp	.+8      	; 0x332 <usart_set_baudrate+0x182>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	aa 1f       	adc	r26, r26
 330:	bb 1f       	adc	r27, r27
 332:	2a 95       	dec	r18
 334:	d2 f7       	brpl	.-12     	; 0x32a <usart_set_baudrate+0x17a>
 336:	9c 01       	movw	r18, r24
 338:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
 33a:	b6 95       	lsr	r27
 33c:	a7 95       	ror	r26
 33e:	97 95       	ror	r25
 340:	87 95       	ror	r24
 342:	bc 01       	movw	r22, r24
 344:	cd 01       	movw	r24, r26
 346:	64 0d       	add	r22, r4
 348:	75 1d       	adc	r23, r5
 34a:	86 1d       	adc	r24, r6
 34c:	97 1d       	adc	r25, r7
 34e:	75 d1       	rcall	.+746    	; 0x63a <__udivmodsi4>
 350:	21 50       	subi	r18, 0x01	; 1
 352:	31 09       	sbc	r19, r1
 354:	41 09       	sbc	r20, r1
 356:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
 358:	83 2f       	mov	r24, r19
 35a:	8f 70       	andi	r24, 0x0F	; 15
 35c:	12 95       	swap	r17
 35e:	10 7f       	andi	r17, 0xF0	; 240
 360:	18 2b       	or	r17, r24
 362:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
 364:	2e 83       	std	Y+6, r18	; 0x06

	return true;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	18 c0       	rjmp	.+48     	; 0x39a <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	16 c0       	rjmp	.+44     	; 0x39a <usart_set_baudrate+0x1ea>
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	14 c0       	rjmp	.+40     	; 0x39a <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 372:	d5 01       	movw	r26, r10
 374:	c4 01       	movw	r24, r8
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	aa 1f       	adc	r26, r26
 37c:	bb 1f       	adc	r27, r27
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	aa 1f       	adc	r26, r26
 384:	bb 1f       	adc	r27, r27
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	aa 1f       	adc	r26, r26
 38c:	bb 1f       	adc	r27, r27
 38e:	48 1a       	sub	r4, r24
 390:	59 0a       	sbc	r5, r25
 392:	6a 0a       	sbc	r6, r26
 394:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 396:	19 ef       	ldi	r17, 0xF9	; 249
 398:	8e cf       	rjmp	.-228    	; 0x2b6 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	df 90       	pop	r13
 3a8:	cf 90       	pop	r12
 3aa:	bf 90       	pop	r11
 3ac:	af 90       	pop	r10
 3ae:	9f 90       	pop	r9
 3b0:	8f 90       	pop	r8
 3b2:	7f 90       	pop	r7
 3b4:	6f 90       	pop	r6
 3b6:	5f 90       	pop	r5
 3b8:	4f 90       	pop	r4
 3ba:	08 95       	ret

000003bc <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	ec 01       	movw	r28, r24
 3c6:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	09 f4       	brne	.+2      	; 0x3ce <usart_init_rs232+0x12>
 3cc:	be c0       	rjmp	.+380    	; 0x54a <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 3ce:	80 3c       	cpi	r24, 0xC0	; 192
 3d0:	91 05       	cpc	r25, r1
 3d2:	21 f4       	brne	.+8      	; 0x3dc <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 3d4:	60 e1       	ldi	r22, 0x10	; 16
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	01 d1       	rcall	.+514    	; 0x5dc <sysclk_enable_module>
 3da:	b7 c0       	rjmp	.+366    	; 0x54a <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
 3dc:	c1 15       	cp	r28, r1
 3de:	84 e0       	ldi	r24, 0x04	; 4
 3e0:	d8 07       	cpc	r29, r24
 3e2:	21 f4       	brne	.+8      	; 0x3ec <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 3e4:	64 e0       	ldi	r22, 0x04	; 4
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	f9 d0       	rcall	.+498    	; 0x5dc <sysclk_enable_module>
 3ea:	af c0       	rjmp	.+350    	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 3ec:	c0 38       	cpi	r28, 0x80	; 128
 3ee:	e1 e0       	ldi	r30, 0x01	; 1
 3f0:	de 07       	cpc	r29, r30
 3f2:	21 f4       	brne	.+8      	; 0x3fc <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 3f4:	62 e0       	ldi	r22, 0x02	; 2
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	f1 d0       	rcall	.+482    	; 0x5dc <sysclk_enable_module>
 3fa:	a7 c0       	rjmp	.+334    	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 3fc:	c1 15       	cp	r28, r1
 3fe:	f1 e0       	ldi	r31, 0x01	; 1
 400:	df 07       	cpc	r29, r31
 402:	21 f4       	brne	.+8      	; 0x40c <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	e9 d0       	rcall	.+466    	; 0x5dc <sysclk_enable_module>
 40a:	9f c0       	rjmp	.+318    	; 0x54a <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 40c:	c0 38       	cpi	r28, 0x80	; 128
 40e:	83 e0       	ldi	r24, 0x03	; 3
 410:	d8 07       	cpc	r29, r24
 412:	21 f4       	brne	.+8      	; 0x41c <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	e1 d0       	rcall	.+450    	; 0x5dc <sysclk_enable_module>
 41a:	97 c0       	rjmp	.+302    	; 0x54a <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 41c:	c1 15       	cp	r28, r1
 41e:	e2 e0       	ldi	r30, 0x02	; 2
 420:	de 07       	cpc	r29, r30
 422:	21 f4       	brne	.+8      	; 0x42c <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 424:	62 e0       	ldi	r22, 0x02	; 2
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	d9 d0       	rcall	.+434    	; 0x5dc <sysclk_enable_module>
 42a:	8f c0       	rjmp	.+286    	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 42c:	c0 32       	cpi	r28, 0x20	; 32
 42e:	f3 e0       	ldi	r31, 0x03	; 3
 430:	df 07       	cpc	r29, r31
 432:	21 f4       	brne	.+8      	; 0x43c <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 434:	64 e0       	ldi	r22, 0x04	; 4
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	d1 d0       	rcall	.+418    	; 0x5dc <sysclk_enable_module>
 43a:	87 c0       	rjmp	.+270    	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 43c:	c1 15       	cp	r28, r1
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	d8 07       	cpc	r29, r24
 442:	21 f4       	brne	.+8      	; 0x44c <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	c9 d0       	rcall	.+402    	; 0x5dc <sysclk_enable_module>
 44a:	7f c0       	rjmp	.+254    	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 44c:	c1 15       	cp	r28, r1
 44e:	e9 e0       	ldi	r30, 0x09	; 9
 450:	de 07       	cpc	r29, r30
 452:	21 f4       	brne	.+8      	; 0x45c <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	c1 d0       	rcall	.+386    	; 0x5dc <sysclk_enable_module>
 45a:	77 c0       	rjmp	.+238    	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 45c:	c1 15       	cp	r28, r1
 45e:	fa e0       	ldi	r31, 0x0A	; 10
 460:	df 07       	cpc	r29, r31
 462:	21 f4       	brne	.+8      	; 0x46c <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 464:	61 e0       	ldi	r22, 0x01	; 1
 466:	85 e0       	ldi	r24, 0x05	; 5
 468:	b9 d0       	rcall	.+370    	; 0x5dc <sysclk_enable_module>
 46a:	6f c0       	rjmp	.+222    	; 0x54a <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 46c:	c0 34       	cpi	r28, 0x40	; 64
 46e:	88 e0       	ldi	r24, 0x08	; 8
 470:	d8 07       	cpc	r29, r24
 472:	21 f4       	brne	.+8      	; 0x47c <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 474:	62 e0       	ldi	r22, 0x02	; 2
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	b1 d0       	rcall	.+354    	; 0x5dc <sysclk_enable_module>
 47a:	67 c0       	rjmp	.+206    	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 47c:	c0 34       	cpi	r28, 0x40	; 64
 47e:	e9 e0       	ldi	r30, 0x09	; 9
 480:	de 07       	cpc	r29, r30
 482:	21 f4       	brne	.+8      	; 0x48c <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	84 e0       	ldi	r24, 0x04	; 4
 488:	a9 d0       	rcall	.+338    	; 0x5dc <sysclk_enable_module>
 48a:	5f c0       	rjmp	.+190    	; 0x54a <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 48c:	c0 39       	cpi	r28, 0x90	; 144
 48e:	f8 e0       	ldi	r31, 0x08	; 8
 490:	df 07       	cpc	r29, r31
 492:	21 f4       	brne	.+8      	; 0x49c <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 494:	64 e0       	ldi	r22, 0x04	; 4
 496:	83 e0       	ldi	r24, 0x03	; 3
 498:	a1 d0       	rcall	.+322    	; 0x5dc <sysclk_enable_module>
 49a:	57 c0       	rjmp	.+174    	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 49c:	c0 39       	cpi	r28, 0x90	; 144
 49e:	89 e0       	ldi	r24, 0x09	; 9
 4a0:	d8 07       	cpc	r29, r24
 4a2:	21 f4       	brne	.+8      	; 0x4ac <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 4a4:	64 e0       	ldi	r22, 0x04	; 4
 4a6:	84 e0       	ldi	r24, 0x04	; 4
 4a8:	99 d0       	rcall	.+306    	; 0x5dc <sysclk_enable_module>
 4aa:	4f c0       	rjmp	.+158    	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 4ac:	c0 39       	cpi	r28, 0x90	; 144
 4ae:	ea e0       	ldi	r30, 0x0A	; 10
 4b0:	de 07       	cpc	r29, r30
 4b2:	21 f4       	brne	.+8      	; 0x4bc <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 4b4:	64 e0       	ldi	r22, 0x04	; 4
 4b6:	85 e0       	ldi	r24, 0x05	; 5
 4b8:	91 d0       	rcall	.+290    	; 0x5dc <sysclk_enable_module>
 4ba:	47 c0       	rjmp	.+142    	; 0x54a <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 4bc:	c0 3c       	cpi	r28, 0xC0	; 192
 4be:	f8 e0       	ldi	r31, 0x08	; 8
 4c0:	df 07       	cpc	r29, r31
 4c2:	21 f4       	brne	.+8      	; 0x4cc <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 4c4:	68 e0       	ldi	r22, 0x08	; 8
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	89 d0       	rcall	.+274    	; 0x5dc <sysclk_enable_module>
 4ca:	3f c0       	rjmp	.+126    	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 4cc:	c0 3c       	cpi	r28, 0xC0	; 192
 4ce:	89 e0       	ldi	r24, 0x09	; 9
 4d0:	d8 07       	cpc	r29, r24
 4d2:	21 f4       	brne	.+8      	; 0x4dc <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 4d4:	68 e0       	ldi	r22, 0x08	; 8
 4d6:	84 e0       	ldi	r24, 0x04	; 4
 4d8:	81 d0       	rcall	.+258    	; 0x5dc <sysclk_enable_module>
 4da:	37 c0       	rjmp	.+110    	; 0x54a <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 4dc:	c0 3a       	cpi	r28, 0xA0	; 160
 4de:	e8 e0       	ldi	r30, 0x08	; 8
 4e0:	de 07       	cpc	r29, r30
 4e2:	21 f4       	brne	.+8      	; 0x4ec <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 4e4:	60 e1       	ldi	r22, 0x10	; 16
 4e6:	83 e0       	ldi	r24, 0x03	; 3
 4e8:	79 d0       	rcall	.+242    	; 0x5dc <sysclk_enable_module>
 4ea:	2f c0       	rjmp	.+94     	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 4ec:	c0 3a       	cpi	r28, 0xA0	; 160
 4ee:	f9 e0       	ldi	r31, 0x09	; 9
 4f0:	df 07       	cpc	r29, r31
 4f2:	21 f4       	brne	.+8      	; 0x4fc <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 4f4:	60 e1       	ldi	r22, 0x10	; 16
 4f6:	84 e0       	ldi	r24, 0x04	; 4
 4f8:	71 d0       	rcall	.+226    	; 0x5dc <sysclk_enable_module>
 4fa:	27 c0       	rjmp	.+78     	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 4fc:	c0 3a       	cpi	r28, 0xA0	; 160
 4fe:	8a e0       	ldi	r24, 0x0A	; 10
 500:	d8 07       	cpc	r29, r24
 502:	21 f4       	brne	.+8      	; 0x50c <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 504:	60 e1       	ldi	r22, 0x10	; 16
 506:	85 e0       	ldi	r24, 0x05	; 5
 508:	69 d0       	rcall	.+210    	; 0x5dc <sysclk_enable_module>
 50a:	1f c0       	rjmp	.+62     	; 0x54a <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 50c:	c0 3b       	cpi	r28, 0xB0	; 176
 50e:	e8 e0       	ldi	r30, 0x08	; 8
 510:	de 07       	cpc	r29, r30
 512:	21 f4       	brne	.+8      	; 0x51c <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 514:	60 e2       	ldi	r22, 0x20	; 32
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	61 d0       	rcall	.+194    	; 0x5dc <sysclk_enable_module>
 51a:	17 c0       	rjmp	.+46     	; 0x54a <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 51c:	c0 3b       	cpi	r28, 0xB0	; 176
 51e:	f9 e0       	ldi	r31, 0x09	; 9
 520:	df 07       	cpc	r29, r31
 522:	21 f4       	brne	.+8      	; 0x52c <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 524:	60 e2       	ldi	r22, 0x20	; 32
 526:	84 e0       	ldi	r24, 0x04	; 4
 528:	59 d0       	rcall	.+178    	; 0x5dc <sysclk_enable_module>
 52a:	0f c0       	rjmp	.+30     	; 0x54a <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 52c:	c0 38       	cpi	r28, 0x80	; 128
 52e:	84 e0       	ldi	r24, 0x04	; 4
 530:	d8 07       	cpc	r29, r24
 532:	21 f4       	brne	.+8      	; 0x53c <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 534:	60 e4       	ldi	r22, 0x40	; 64
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	51 d0       	rcall	.+162    	; 0x5dc <sysclk_enable_module>
 53a:	07 c0       	rjmp	.+14     	; 0x54a <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 53c:	c0 3a       	cpi	r28, 0xA0	; 160
 53e:	e4 e0       	ldi	r30, 0x04	; 4
 540:	de 07       	cpc	r29, r30
 542:	19 f4       	brne	.+6      	; 0x54a <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 544:	60 e4       	ldi	r22, 0x40	; 64
 546:	85 e0       	ldi	r24, 0x05	; 5
 548:	49 d0       	rcall	.+146    	; 0x5dc <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 54a:	8d 81       	ldd	r24, Y+5	; 0x05
 54c:	8f 73       	andi	r24, 0x3F	; 63
 54e:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
 550:	f8 01       	movw	r30, r16
 552:	94 81       	ldd	r25, Z+4	; 0x04
 554:	85 81       	ldd	r24, Z+5	; 0x05
 556:	89 2b       	or	r24, r25
 558:	96 81       	ldd	r25, Z+6	; 0x06
 55a:	99 23       	and	r25, r25
 55c:	11 f0       	breq	.+4      	; 0x562 <usart_init_rs232+0x1a6>
 55e:	98 e0       	ldi	r25, 0x08	; 8
 560:	01 c0       	rjmp	.+2      	; 0x564 <usart_init_rs232+0x1a8>
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	89 2b       	or	r24, r25
 566:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
 568:	f8 01       	movw	r30, r16
 56a:	40 81       	ld	r20, Z
 56c:	51 81       	ldd	r21, Z+1	; 0x01
 56e:	62 81       	ldd	r22, Z+2	; 0x02
 570:	73 81       	ldd	r23, Z+3	; 0x03
 572:	00 e0       	ldi	r16, 0x00	; 0
 574:	18 e4       	ldi	r17, 0x48	; 72
 576:	28 ee       	ldi	r18, 0xE8	; 232
 578:	31 e0       	ldi	r19, 0x01	; 1
 57a:	ce 01       	movw	r24, r28
 57c:	19 de       	rcall	.-974    	; 0x1b0 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
 57e:	9c 81       	ldd	r25, Y+4	; 0x04
 580:	98 60       	ori	r25, 0x08	; 8
 582:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
 584:	9c 81       	ldd	r25, Y+4	; 0x04
 586:	90 61       	ori	r25, 0x10	; 16
 588:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	08 95       	ret

00000594 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 594:	8f ef       	ldi	r24, 0xFF	; 255
 596:	80 93 70 00 	sts	0x0070, r24
 59a:	80 93 71 00 	sts	0x0071, r24
 59e:	80 93 72 00 	sts	0x0072, r24
 5a2:	80 93 73 00 	sts	0x0073, r24
 5a6:	80 93 74 00 	sts	0x0074, r24
 5aa:	80 93 75 00 	sts	0x0075, r24
 5ae:	80 93 76 00 	sts	0x0076, r24

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
 5b2:	e0 e5       	ldi	r30, 0x50	; 80
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	81 81       	ldd	r24, Z+1	; 0x01

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
 5b8:	84 fd       	sbrc	r24, 4
 5ba:	0b c0       	rjmp	.+22     	; 0x5d2 <sysclk_init+0x3e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 5bc:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 5be:	f8 94       	cli
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
 5c0:	90 e1       	ldi	r25, 0x10	; 16
 5c2:	95 83       	std	Z+5, r25	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
 5c4:	90 81       	ld	r25, Z
 5c6:	90 61       	ori	r25, 0x10	; 16
 5c8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 5ca:	8f bf       	out	0x3f, r24	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
 5cc:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
 5ce:	84 ff       	sbrs	r24, 4
 5d0:	fd cf       	rjmp	.-6      	; 0x5cc <sysclk_init+0x38>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 5d2:	64 e0       	ldi	r22, 0x04	; 4
 5d4:	80 e4       	ldi	r24, 0x40	; 64
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0d c0       	rjmp	.+26     	; 0x5f4 <ccp_write_io>
 5da:	08 95       	ret

000005dc <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 5dc:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 5de:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 5e0:	e8 2f       	mov	r30, r24
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	e0 59       	subi	r30, 0x90	; 144
 5e6:	ff 4f       	sbci	r31, 0xFF	; 255
 5e8:	60 95       	com	r22
 5ea:	80 81       	ld	r24, Z
 5ec:	68 23       	and	r22, r24
 5ee:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 5f0:	9f bf       	out	0x3f, r25	; 63
 5f2:	08 95       	ret

000005f4 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 5f4:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 5f6:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 5f8:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 5fa:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 5fc:	60 83       	st	Z, r22
	ret                             // Return to caller
 5fe:	08 95       	ret

00000600 <board_init>:
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	PORTD.OUTSET = PIN3_bm; //Let's make PC7 as TX
 600:	e0 e6       	ldi	r30, 0x60	; 96
 602:	f6 e0       	ldi	r31, 0x06	; 6
 604:	88 e0       	ldi	r24, 0x08	; 8
 606:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN3_bm; //TX pin as output
 608:	81 83       	std	Z+1, r24	; 0x01

	PORTD.OUTCLR = PIN2_bm;
 60a:	84 e0       	ldi	r24, 0x04	; 4
 60c:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRCLR = PIN2_bm; //PC6 as RX
 60e:	82 83       	std	Z+2, r24	; 0x02

	PORTR.DIRSET=PIN0_bm;
 610:	e0 ee       	ldi	r30, 0xE0	; 224
 612:	f7 e0       	ldi	r31, 0x07	; 7
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	81 83       	std	Z+1, r24	; 0x01
	PORTR.OUTSET=PIN0_bm;
 618:	85 83       	std	Z+5, r24	; 0x05
 61a:	08 95       	ret

0000061c <main>:

int main (void)
{
	// Insert system clock initialization code here (sysclk_init()).
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
 61c:	bb df       	rcall	.-138    	; 0x594 <sysclk_init>
	board_init();
 61e:	f0 df       	rcall	.-32     	; 0x600 <board_init>
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	
	sysclk_enable_module(SYSCLK_PORT_D, PR_USART0_bm);
 620:	60 e1       	ldi	r22, 0x10	; 16
 622:	84 e0       	ldi	r24, 0x04	; 4
 624:	db df       	rcall	.-74     	; 0x5dc <sysclk_enable_module>
	usart_init_rs232(USART_SERIAL_E0, &USART_SERIAL_OPTIONS);
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	70 e2       	ldi	r23, 0x20	; 32
 62a:	80 ea       	ldi	r24, 0xA0	; 160
 62c:	99 e0       	ldi	r25, 0x09	; 9
 62e:	c6 de       	rcall	.-628    	; 0x3bc <usart_init_rs232>
	
	while (1)
	{
		usart_putchar(USART_SERIAL_E0, 128);	 //envia
 630:	60 e8       	ldi	r22, 0x80	; 128
 632:	80 ea       	ldi	r24, 0xA0	; 160
 634:	99 e0       	ldi	r25, 0x09	; 9
 636:	b4 dd       	rcall	.-1176   	; 0x1a0 <usart_putchar>
 638:	fb cf       	rjmp	.-10     	; 0x630 <main+0x14>

0000063a <__udivmodsi4>:
 63a:	a1 e2       	ldi	r26, 0x21	; 33
 63c:	1a 2e       	mov	r1, r26
 63e:	aa 1b       	sub	r26, r26
 640:	bb 1b       	sub	r27, r27
 642:	fd 01       	movw	r30, r26
 644:	0d c0       	rjmp	.+26     	; 0x660 <__udivmodsi4_ep>

00000646 <__udivmodsi4_loop>:
 646:	aa 1f       	adc	r26, r26
 648:	bb 1f       	adc	r27, r27
 64a:	ee 1f       	adc	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	a2 17       	cp	r26, r18
 650:	b3 07       	cpc	r27, r19
 652:	e4 07       	cpc	r30, r20
 654:	f5 07       	cpc	r31, r21
 656:	20 f0       	brcs	.+8      	; 0x660 <__udivmodsi4_ep>
 658:	a2 1b       	sub	r26, r18
 65a:	b3 0b       	sbc	r27, r19
 65c:	e4 0b       	sbc	r30, r20
 65e:	f5 0b       	sbc	r31, r21

00000660 <__udivmodsi4_ep>:
 660:	66 1f       	adc	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	1a 94       	dec	r1
 66a:	69 f7       	brne	.-38     	; 0x646 <__udivmodsi4_loop>
 66c:	60 95       	com	r22
 66e:	70 95       	com	r23
 670:	80 95       	com	r24
 672:	90 95       	com	r25
 674:	9b 01       	movw	r18, r22
 676:	ac 01       	movw	r20, r24
 678:	bd 01       	movw	r22, r26
 67a:	cf 01       	movw	r24, r30
 67c:	08 95       	ret

0000067e <_exit>:
 67e:	f8 94       	cli

00000680 <__stop_program>:
 680:	ff cf       	rjmp	.-2      	; 0x680 <__stop_program>
