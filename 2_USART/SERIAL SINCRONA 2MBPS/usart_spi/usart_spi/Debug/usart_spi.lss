
usart_spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000882  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  00000882  00000916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080200e  0080200e  00000924  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000998  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043af  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a02  00000000  00000000  00004e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002379  00000000  00000000  00005859  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00007bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00027fa9  00000000  00000000  00007ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000145c  00000000  00000000  0002fe49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000312a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000014bc  00000000  00000000  0003138d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
   6:	00 00       	nop
   8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
   a:	00 00       	nop
   c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
   e:	00 00       	nop
  10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
  12:	00 00       	nop
  14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
  16:	00 00       	nop
  18:	0c c1       	rjmp	.+536    	; 0x232 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0a c1       	rjmp	.+532    	; 0x232 <__bad_interrupt>
  1e:	00 00       	nop
  20:	08 c1       	rjmp	.+528    	; 0x232 <__bad_interrupt>
  22:	00 00       	nop
  24:	06 c1       	rjmp	.+524    	; 0x232 <__bad_interrupt>
  26:	00 00       	nop
  28:	04 c1       	rjmp	.+520    	; 0x232 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	02 c1       	rjmp	.+516    	; 0x232 <__bad_interrupt>
  2e:	00 00       	nop
  30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c0       	rjmp	.+508    	; 0x232 <__bad_interrupt>
  36:	00 00       	nop
  38:	fc c0       	rjmp	.+504    	; 0x232 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fa c0       	rjmp	.+500    	; 0x232 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f8 c0       	rjmp	.+496    	; 0x232 <__bad_interrupt>
  42:	00 00       	nop
  44:	f6 c0       	rjmp	.+492    	; 0x232 <__bad_interrupt>
  46:	00 00       	nop
  48:	f4 c0       	rjmp	.+488    	; 0x232 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f2 c0       	rjmp	.+484    	; 0x232 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f0 c0       	rjmp	.+480    	; 0x232 <__bad_interrupt>
  52:	00 00       	nop
  54:	ee c0       	rjmp	.+476    	; 0x232 <__bad_interrupt>
  56:	00 00       	nop
  58:	ec c0       	rjmp	.+472    	; 0x232 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ea c0       	rjmp	.+468    	; 0x232 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
  62:	00 00       	nop
  64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
  66:	00 00       	nop
  68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
  72:	00 00       	nop
  74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
  76:	00 00       	nop
  78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d8 c0       	rjmp	.+432    	; 0x232 <__bad_interrupt>
  82:	00 00       	nop
  84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
  86:	00 00       	nop
  88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
  92:	00 00       	nop
  94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
  96:	00 00       	nop
  98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c4 c0       	rjmp	.+392    	; 0x232 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	69 c3       	rjmp	.+1746   	; 0x780 <__vector_43>
  ae:	00 00       	nop
  b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bc c0       	rjmp	.+376    	; 0x232 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	ba c0       	rjmp	.+372    	; 0x232 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b8 c0       	rjmp	.+368    	; 0x232 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b4 c0       	rjmp	.+360    	; 0x232 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b2 c0       	rjmp	.+356    	; 0x232 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b0 c0       	rjmp	.+352    	; 0x232 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
  da:	00 00       	nop
  dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a6 c0       	rjmp	.+332    	; 0x232 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a4 c0       	rjmp	.+328    	; 0x232 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a2 c0       	rjmp	.+324    	; 0x232 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a0 c0       	rjmp	.+320    	; 0x232 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9e c0       	rjmp	.+316    	; 0x232 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9c c0       	rjmp	.+312    	; 0x232 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9a c0       	rjmp	.+308    	; 0x232 <__bad_interrupt>
  fe:	00 00       	nop
 100:	98 c0       	rjmp	.+304    	; 0x232 <__bad_interrupt>
 102:	00 00       	nop
 104:	96 c0       	rjmp	.+300    	; 0x232 <__bad_interrupt>
 106:	00 00       	nop
 108:	94 c0       	rjmp	.+296    	; 0x232 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	92 c0       	rjmp	.+292    	; 0x232 <__bad_interrupt>
 10e:	00 00       	nop
 110:	90 c0       	rjmp	.+288    	; 0x232 <__bad_interrupt>
 112:	00 00       	nop
 114:	8e c0       	rjmp	.+284    	; 0x232 <__bad_interrupt>
 116:	00 00       	nop
 118:	8c c0       	rjmp	.+280    	; 0x232 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8a c0       	rjmp	.+276    	; 0x232 <__bad_interrupt>
 11e:	00 00       	nop
 120:	88 c0       	rjmp	.+272    	; 0x232 <__bad_interrupt>
 122:	00 00       	nop
 124:	86 c0       	rjmp	.+268    	; 0x232 <__bad_interrupt>
 126:	00 00       	nop
 128:	84 c0       	rjmp	.+264    	; 0x232 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	82 c0       	rjmp	.+260    	; 0x232 <__bad_interrupt>
 12e:	00 00       	nop
 130:	80 c0       	rjmp	.+256    	; 0x232 <__bad_interrupt>
 132:	00 00       	nop
 134:	7e c0       	rjmp	.+252    	; 0x232 <__bad_interrupt>
 136:	00 00       	nop
 138:	7c c0       	rjmp	.+248    	; 0x232 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7a c0       	rjmp	.+244    	; 0x232 <__bad_interrupt>
 13e:	00 00       	nop
 140:	78 c0       	rjmp	.+240    	; 0x232 <__bad_interrupt>
 142:	00 00       	nop
 144:	76 c0       	rjmp	.+236    	; 0x232 <__bad_interrupt>
 146:	00 00       	nop
 148:	74 c0       	rjmp	.+232    	; 0x232 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	72 c0       	rjmp	.+228    	; 0x232 <__bad_interrupt>
 14e:	00 00       	nop
 150:	70 c0       	rjmp	.+224    	; 0x232 <__bad_interrupt>
 152:	00 00       	nop
 154:	6e c0       	rjmp	.+220    	; 0x232 <__bad_interrupt>
 156:	00 00       	nop
 158:	6c c0       	rjmp	.+216    	; 0x232 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6a c0       	rjmp	.+212    	; 0x232 <__bad_interrupt>
 15e:	00 00       	nop
 160:	3b c3       	rjmp	.+1654   	; 0x7d8 <__vector_88>
 162:	00 00       	nop
 164:	66 c0       	rjmp	.+204    	; 0x232 <__bad_interrupt>
 166:	00 00       	nop
 168:	64 c0       	rjmp	.+200    	; 0x232 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	3f c3       	rjmp	.+1662   	; 0x7ec <__vector_91>
 16e:	00 00       	nop
 170:	60 c0       	rjmp	.+192    	; 0x232 <__bad_interrupt>
 172:	00 00       	nop
 174:	5e c0       	rjmp	.+188    	; 0x232 <__bad_interrupt>
 176:	00 00       	nop
 178:	5c c0       	rjmp	.+184    	; 0x232 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5a c0       	rjmp	.+180    	; 0x232 <__bad_interrupt>
 17e:	00 00       	nop
 180:	58 c0       	rjmp	.+176    	; 0x232 <__bad_interrupt>
 182:	00 00       	nop
 184:	56 c0       	rjmp	.+172    	; 0x232 <__bad_interrupt>
 186:	00 00       	nop
 188:	54 c0       	rjmp	.+168    	; 0x232 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	52 c0       	rjmp	.+164    	; 0x232 <__bad_interrupt>
 18e:	00 00       	nop
 190:	50 c0       	rjmp	.+160    	; 0x232 <__bad_interrupt>
 192:	00 00       	nop
 194:	4e c0       	rjmp	.+156    	; 0x232 <__bad_interrupt>
 196:	00 00       	nop
 198:	4c c0       	rjmp	.+152    	; 0x232 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4a c0       	rjmp	.+148    	; 0x232 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	48 c0       	rjmp	.+144    	; 0x232 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	46 c0       	rjmp	.+140    	; 0x232 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	44 c0       	rjmp	.+136    	; 0x232 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	42 c0       	rjmp	.+132    	; 0x232 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3e c0       	rjmp	.+124    	; 0x232 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3c c0       	rjmp	.+120    	; 0x232 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3a c0       	rjmp	.+116    	; 0x232 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	38 c0       	rjmp	.+112    	; 0x232 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	36 c0       	rjmp	.+108    	; 0x232 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	34 c0       	rjmp	.+104    	; 0x232 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	32 c0       	rjmp	.+100    	; 0x232 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	30 c0       	rjmp	.+96     	; 0x232 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2e c0       	rjmp	.+92     	; 0x232 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2c c0       	rjmp	.+88     	; 0x232 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2a c0       	rjmp	.+84     	; 0x232 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	28 c0       	rjmp	.+80     	; 0x232 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	26 c0       	rjmp	.+76     	; 0x232 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	24 c0       	rjmp	.+72     	; 0x232 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	22 c0       	rjmp	.+68     	; 0x232 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	20 c0       	rjmp	.+64     	; 0x232 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1e c0       	rjmp	.+60     	; 0x232 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1c c0       	rjmp	.+56     	; 0x232 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	e2 e8       	ldi	r30, 0x82	; 130
 210:	f8 e0       	ldi	r31, 0x08	; 8
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	ae 30       	cpi	r26, 0x0E	; 14
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	20 e2       	ldi	r18, 0x20	; 32
 220:	ae e0       	ldi	r26, 0x0E	; 14
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	af 30       	cpi	r26, 0x0F	; 15
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	46 d2       	rcall	.+1164   	; 0x6bc <main>
 230:	26 c3       	rjmp	.+1612   	; 0x87e <_exit>

00000232 <__bad_interrupt>:
 232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
 234:	fc 01       	movw	r30, r24
 236:	91 81       	ldd	r25, Z+1	; 0x01
 238:	95 ff       	sbrs	r25, 5
 23a:	fd cf       	rjmp	.-6      	; 0x236 <usart_putchar+0x2>
 23c:	60 83       	st	Z, r22
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	08 95       	ret

00000244 <usart_getchar>:
 244:	fc 01       	movw	r30, r24
 246:	91 81       	ldd	r25, Z+1	; 0x01
 248:	99 23       	and	r25, r25
 24a:	ec f7       	brge	.-6      	; 0x246 <usart_getchar+0x2>
 24c:	80 81       	ld	r24, Z
 24e:	08 95       	ret

00000250 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 250:	2f 92       	push	r2
 252:	3f 92       	push	r3
 254:	4f 92       	push	r4
 256:	5f 92       	push	r5
 258:	6f 92       	push	r6
 25a:	7f 92       	push	r7
 25c:	8f 92       	push	r8
 25e:	9f 92       	push	r9
 260:	af 92       	push	r10
 262:	bf 92       	push	r11
 264:	cf 92       	push	r12
 266:	df 92       	push	r13
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	1c 01       	movw	r2, r24
 274:	2a 01       	movw	r4, r20
 276:	3b 01       	movw	r6, r22
 278:	48 01       	movw	r8, r16
 27a:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
 27c:	d9 01       	movw	r26, r18
 27e:	c8 01       	movw	r24, r16
 280:	68 94       	set
 282:	12 f8       	bld	r1, 2
 284:	b6 95       	lsr	r27
 286:	a7 95       	ror	r26
 288:	97 95       	ror	r25
 28a:	87 95       	ror	r24
 28c:	16 94       	lsr	r1
 28e:	d1 f7       	brne	.-12     	; 0x284 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
 290:	b9 01       	movw	r22, r18
 292:	a8 01       	movw	r20, r16
 294:	03 2e       	mov	r0, r19
 296:	36 e1       	ldi	r19, 0x16	; 22
 298:	76 95       	lsr	r23
 29a:	67 95       	ror	r22
 29c:	57 95       	ror	r21
 29e:	47 95       	ror	r20
 2a0:	3a 95       	dec	r19
 2a2:	d1 f7       	brne	.-12     	; 0x298 <usart_set_baudrate+0x48>
 2a4:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 2a6:	f1 01       	movw	r30, r2
 2a8:	24 81       	ldd	r18, Z+4	; 0x04
 2aa:	22 fd       	sbrc	r18, 2
 2ac:	08 c0       	rjmp	.+16     	; 0x2be <usart_set_baudrate+0x6e>
		max_rate /= 2;
 2ae:	b6 95       	lsr	r27
 2b0:	a7 95       	ror	r26
 2b2:	97 95       	ror	r25
 2b4:	87 95       	ror	r24
		min_rate /= 2;
 2b6:	76 95       	lsr	r23
 2b8:	67 95       	ror	r22
 2ba:	57 95       	ror	r21
 2bc:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
 2be:	84 15       	cp	r24, r4
 2c0:	95 05       	cpc	r25, r5
 2c2:	a6 05       	cpc	r26, r6
 2c4:	b7 05       	cpc	r27, r7
 2c6:	08 f4       	brcc	.+2      	; 0x2ca <usart_set_baudrate+0x7a>
 2c8:	aa c0       	rjmp	.+340    	; 0x41e <usart_set_baudrate+0x1ce>
 2ca:	44 16       	cp	r4, r20
 2cc:	55 06       	cpc	r5, r21
 2ce:	66 06       	cpc	r6, r22
 2d0:	77 06       	cpc	r7, r23
 2d2:	08 f4       	brcc	.+2      	; 0x2d6 <usart_set_baudrate+0x86>
 2d4:	a6 c0       	rjmp	.+332    	; 0x422 <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 2d6:	f1 01       	movw	r30, r2
 2d8:	84 81       	ldd	r24, Z+4	; 0x04
 2da:	82 fd       	sbrc	r24, 2
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <usart_set_baudrate+0x96>
		baud *= 2;
 2de:	44 0c       	add	r4, r4
 2e0:	55 1c       	adc	r5, r5
 2e2:	66 1c       	adc	r6, r6
 2e4:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
 2e6:	c5 01       	movw	r24, r10
 2e8:	b4 01       	movw	r22, r8
 2ea:	a3 01       	movw	r20, r6
 2ec:	92 01       	movw	r18, r4
 2ee:	a5 d2       	rcall	.+1354   	; 0x83a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
 2f0:	2f 3f       	cpi	r18, 0xFF	; 255
 2f2:	31 05       	cpc	r19, r1
 2f4:	41 05       	cpc	r20, r1
 2f6:	51 05       	cpc	r21, r1
 2f8:	08 f4       	brcc	.+2      	; 0x2fc <usart_set_baudrate+0xac>
 2fa:	95 c0       	rjmp	.+298    	; 0x426 <usart_set_baudrate+0x1d6>
 2fc:	c1 2c       	mov	r12, r1
 2fe:	d1 2c       	mov	r13, r1
 300:	76 01       	movw	r14, r12
 302:	ca 94       	dec	r12
 304:	c9 ef       	ldi	r28, 0xF9	; 249
 306:	05 c0       	rjmp	.+10     	; 0x312 <usart_set_baudrate+0xc2>
 308:	2c 15       	cp	r18, r12
 30a:	3d 05       	cpc	r19, r13
 30c:	4e 05       	cpc	r20, r14
 30e:	5f 05       	cpc	r21, r15
 310:	68 f0       	brcs	.+26     	; 0x32c <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
 312:	cc 0c       	add	r12, r12
 314:	dd 1c       	adc	r13, r13
 316:	ee 1c       	adc	r14, r14
 318:	ff 1c       	adc	r15, r15

		if (exp < -3) {
 31a:	cd 3f       	cpi	r28, 0xFD	; 253
 31c:	14 f4       	brge	.+4      	; 0x322 <usart_set_baudrate+0xd2>
			limit |= 1;
 31e:	68 94       	set
 320:	c0 f8       	bld	r12, 0
 322:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 324:	c7 30       	cpi	r28, 0x07	; 7
 326:	81 f7       	brne	.-32     	; 0x308 <usart_set_baudrate+0xb8>
 328:	8c 2f       	mov	r24, r28
 32a:	54 c0       	rjmp	.+168    	; 0x3d4 <usart_set_baudrate+0x184>
 32c:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
 32e:	cc 23       	and	r28, r28
 330:	0c f0       	brlt	.+2      	; 0x334 <usart_set_baudrate+0xe4>
 332:	50 c0       	rjmp	.+160    	; 0x3d4 <usart_set_baudrate+0x184>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 334:	d3 01       	movw	r26, r6
 336:	c2 01       	movw	r24, r4
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	aa 1f       	adc	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	aa 1f       	adc	r26, r26
 346:	bb 1f       	adc	r27, r27
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	aa 1f       	adc	r26, r26
 34e:	bb 1f       	adc	r27, r27
 350:	85 01       	movw	r16, r10
 352:	74 01       	movw	r14, r8
 354:	e8 1a       	sub	r14, r24
 356:	f9 0a       	sbc	r15, r25
 358:	0a 0b       	sbc	r16, r26
 35a:	1b 0b       	sbc	r17, r27
 35c:	d8 01       	movw	r26, r16
 35e:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
 360:	ce 3f       	cpi	r28, 0xFE	; 254
 362:	ec f4       	brge	.+58     	; 0x39e <usart_set_baudrate+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
 364:	2d ef       	ldi	r18, 0xFD	; 253
 366:	3f ef       	ldi	r19, 0xFF	; 255
 368:	2c 1b       	sub	r18, r28
 36a:	31 09       	sbc	r19, r1
 36c:	c7 fd       	sbrc	r28, 7
 36e:	33 95       	inc	r19
 370:	04 c0       	rjmp	.+8      	; 0x37a <usart_set_baudrate+0x12a>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	aa 1f       	adc	r26, r26
 378:	bb 1f       	adc	r27, r27
 37a:	2a 95       	dec	r18
 37c:	d2 f7       	brpl	.-12     	; 0x372 <usart_set_baudrate+0x122>
 37e:	73 01       	movw	r14, r6
 380:	62 01       	movw	r12, r4
 382:	f6 94       	lsr	r15
 384:	e7 94       	ror	r14
 386:	d7 94       	ror	r13
 388:	c7 94       	ror	r12
 38a:	bc 01       	movw	r22, r24
 38c:	cd 01       	movw	r24, r26
 38e:	6c 0d       	add	r22, r12
 390:	7d 1d       	adc	r23, r13
 392:	8e 1d       	adc	r24, r14
 394:	9f 1d       	adc	r25, r15
 396:	a3 01       	movw	r20, r6
 398:	92 01       	movw	r18, r4
 39a:	4f d2       	rcall	.+1182   	; 0x83a <__udivmodsi4>
 39c:	36 c0       	rjmp	.+108    	; 0x40a <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
 39e:	23 e0       	ldi	r18, 0x03	; 3
 3a0:	2c 0f       	add	r18, r28
 3a2:	83 01       	movw	r16, r6
 3a4:	72 01       	movw	r14, r4
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <usart_set_baudrate+0x160>
 3a8:	ee 0c       	add	r14, r14
 3aa:	ff 1c       	adc	r15, r15
 3ac:	00 1f       	adc	r16, r16
 3ae:	11 1f       	adc	r17, r17
 3b0:	2a 95       	dec	r18
 3b2:	d2 f7       	brpl	.-12     	; 0x3a8 <usart_set_baudrate+0x158>
 3b4:	a8 01       	movw	r20, r16
 3b6:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
 3b8:	67 01       	movw	r12, r14
 3ba:	78 01       	movw	r14, r16
 3bc:	f6 94       	lsr	r15
 3be:	e7 94       	ror	r14
 3c0:	d7 94       	ror	r13
 3c2:	c7 94       	ror	r12
 3c4:	bc 01       	movw	r22, r24
 3c6:	cd 01       	movw	r24, r26
 3c8:	6c 0d       	add	r22, r12
 3ca:	7d 1d       	adc	r23, r13
 3cc:	8e 1d       	adc	r24, r14
 3ce:	9f 1d       	adc	r25, r15
 3d0:	34 d2       	rcall	.+1128   	; 0x83a <__udivmodsi4>
 3d2:	1b c0       	rjmp	.+54     	; 0x40a <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
 3d4:	8d 5f       	subi	r24, 0xFD	; 253
 3d6:	a3 01       	movw	r20, r6
 3d8:	92 01       	movw	r18, r4
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <usart_set_baudrate+0x194>
 3dc:	22 0f       	add	r18, r18
 3de:	33 1f       	adc	r19, r19
 3e0:	44 1f       	adc	r20, r20
 3e2:	55 1f       	adc	r21, r21
 3e4:	8a 95       	dec	r24
 3e6:	d2 f7       	brpl	.-12     	; 0x3dc <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
 3e8:	da 01       	movw	r26, r20
 3ea:	c9 01       	movw	r24, r18
 3ec:	b6 95       	lsr	r27
 3ee:	a7 95       	ror	r26
 3f0:	97 95       	ror	r25
 3f2:	87 95       	ror	r24
 3f4:	bc 01       	movw	r22, r24
 3f6:	cd 01       	movw	r24, r26
 3f8:	68 0d       	add	r22, r8
 3fa:	79 1d       	adc	r23, r9
 3fc:	8a 1d       	adc	r24, r10
 3fe:	9b 1d       	adc	r25, r11
 400:	1c d2       	rcall	.+1080   	; 0x83a <__udivmodsi4>
 402:	21 50       	subi	r18, 0x01	; 1
 404:	31 09       	sbc	r19, r1
 406:	41 09       	sbc	r20, r1
 408:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
 40a:	83 2f       	mov	r24, r19
 40c:	8f 70       	andi	r24, 0x0F	; 15
 40e:	c2 95       	swap	r28
 410:	c0 7f       	andi	r28, 0xF0	; 240
 412:	c8 2b       	or	r28, r24
 414:	f1 01       	movw	r30, r2
 416:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
 418:	26 83       	std	Z+6, r18	; 0x06

	return true;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	1c c0       	rjmp	.+56     	; 0x456 <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	1a c0       	rjmp	.+52     	; 0x456 <usart_set_baudrate+0x206>
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	18 c0       	rjmp	.+48     	; 0x456 <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 426:	d3 01       	movw	r26, r6
 428:	c2 01       	movw	r24, r4
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	aa 1f       	adc	r26, r26
 430:	bb 1f       	adc	r27, r27
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	aa 1f       	adc	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	aa 1f       	adc	r26, r26
 440:	bb 1f       	adc	r27, r27
 442:	85 01       	movw	r16, r10
 444:	74 01       	movw	r14, r8
 446:	e8 1a       	sub	r14, r24
 448:	f9 0a       	sbc	r15, r25
 44a:	0a 0b       	sbc	r16, r26
 44c:	1b 0b       	sbc	r17, r27
 44e:	d8 01       	movw	r26, r16
 450:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 452:	c9 ef       	ldi	r28, 0xF9	; 249
 454:	87 cf       	rjmp	.-242    	; 0x364 <usart_set_baudrate+0x114>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	ff 90       	pop	r15
 45e:	ef 90       	pop	r14
 460:	df 90       	pop	r13
 462:	cf 90       	pop	r12
 464:	bf 90       	pop	r11
 466:	af 90       	pop	r10
 468:	9f 90       	pop	r9
 46a:	8f 90       	pop	r8
 46c:	7f 90       	pop	r7
 46e:	6f 90       	pop	r6
 470:	5f 90       	pop	r5
 472:	4f 90       	pop	r4
 474:	3f 90       	pop	r3
 476:	2f 90       	pop	r2
 478:	08 95       	ret

0000047a <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	ec 01       	movw	r28, r24
 484:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 486:	00 97       	sbiw	r24, 0x00	; 0
 488:	09 f4       	brne	.+2      	; 0x48c <usart_init_rs232+0x12>
 48a:	be c0       	rjmp	.+380    	; 0x608 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 48c:	80 3c       	cpi	r24, 0xC0	; 192
 48e:	91 05       	cpc	r25, r1
 490:	21 f4       	brne	.+8      	; 0x49a <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 492:	60 e1       	ldi	r22, 0x10	; 16
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	ff d0       	rcall	.+510    	; 0x696 <sysclk_enable_module>
 498:	b7 c0       	rjmp	.+366    	; 0x608 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
 49a:	c1 15       	cp	r28, r1
 49c:	84 e0       	ldi	r24, 0x04	; 4
 49e:	d8 07       	cpc	r29, r24
 4a0:	21 f4       	brne	.+8      	; 0x4aa <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 4a2:	64 e0       	ldi	r22, 0x04	; 4
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	f7 d0       	rcall	.+494    	; 0x696 <sysclk_enable_module>
 4a8:	af c0       	rjmp	.+350    	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 4aa:	c0 38       	cpi	r28, 0x80	; 128
 4ac:	e1 e0       	ldi	r30, 0x01	; 1
 4ae:	de 07       	cpc	r29, r30
 4b0:	21 f4       	brne	.+8      	; 0x4ba <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 4b2:	62 e0       	ldi	r22, 0x02	; 2
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	ef d0       	rcall	.+478    	; 0x696 <sysclk_enable_module>
 4b8:	a7 c0       	rjmp	.+334    	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 4ba:	c1 15       	cp	r28, r1
 4bc:	f1 e0       	ldi	r31, 0x01	; 1
 4be:	df 07       	cpc	r29, r31
 4c0:	21 f4       	brne	.+8      	; 0x4ca <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	e7 d0       	rcall	.+462    	; 0x696 <sysclk_enable_module>
 4c8:	9f c0       	rjmp	.+318    	; 0x608 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 4ca:	c0 38       	cpi	r28, 0x80	; 128
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	d8 07       	cpc	r29, r24
 4d0:	21 f4       	brne	.+8      	; 0x4da <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	df d0       	rcall	.+446    	; 0x696 <sysclk_enable_module>
 4d8:	97 c0       	rjmp	.+302    	; 0x608 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 4da:	c1 15       	cp	r28, r1
 4dc:	e2 e0       	ldi	r30, 0x02	; 2
 4de:	de 07       	cpc	r29, r30
 4e0:	21 f4       	brne	.+8      	; 0x4ea <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 4e2:	62 e0       	ldi	r22, 0x02	; 2
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	d7 d0       	rcall	.+430    	; 0x696 <sysclk_enable_module>
 4e8:	8f c0       	rjmp	.+286    	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 4ea:	c0 32       	cpi	r28, 0x20	; 32
 4ec:	f3 e0       	ldi	r31, 0x03	; 3
 4ee:	df 07       	cpc	r29, r31
 4f0:	21 f4       	brne	.+8      	; 0x4fa <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 4f2:	64 e0       	ldi	r22, 0x04	; 4
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	cf d0       	rcall	.+414    	; 0x696 <sysclk_enable_module>
 4f8:	87 c0       	rjmp	.+270    	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 4fa:	c1 15       	cp	r28, r1
 4fc:	88 e0       	ldi	r24, 0x08	; 8
 4fe:	d8 07       	cpc	r29, r24
 500:	21 f4       	brne	.+8      	; 0x50a <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	c7 d0       	rcall	.+398    	; 0x696 <sysclk_enable_module>
 508:	7f c0       	rjmp	.+254    	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 50a:	c1 15       	cp	r28, r1
 50c:	e9 e0       	ldi	r30, 0x09	; 9
 50e:	de 07       	cpc	r29, r30
 510:	21 f4       	brne	.+8      	; 0x51a <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	84 e0       	ldi	r24, 0x04	; 4
 516:	bf d0       	rcall	.+382    	; 0x696 <sysclk_enable_module>
 518:	77 c0       	rjmp	.+238    	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 51a:	c1 15       	cp	r28, r1
 51c:	fa e0       	ldi	r31, 0x0A	; 10
 51e:	df 07       	cpc	r29, r31
 520:	21 f4       	brne	.+8      	; 0x52a <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	85 e0       	ldi	r24, 0x05	; 5
 526:	b7 d0       	rcall	.+366    	; 0x696 <sysclk_enable_module>
 528:	6f c0       	rjmp	.+222    	; 0x608 <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 52a:	c0 34       	cpi	r28, 0x40	; 64
 52c:	88 e0       	ldi	r24, 0x08	; 8
 52e:	d8 07       	cpc	r29, r24
 530:	21 f4       	brne	.+8      	; 0x53a <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 532:	62 e0       	ldi	r22, 0x02	; 2
 534:	83 e0       	ldi	r24, 0x03	; 3
 536:	af d0       	rcall	.+350    	; 0x696 <sysclk_enable_module>
 538:	67 c0       	rjmp	.+206    	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 53a:	c0 34       	cpi	r28, 0x40	; 64
 53c:	e9 e0       	ldi	r30, 0x09	; 9
 53e:	de 07       	cpc	r29, r30
 540:	21 f4       	brne	.+8      	; 0x54a <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 542:	62 e0       	ldi	r22, 0x02	; 2
 544:	84 e0       	ldi	r24, 0x04	; 4
 546:	a7 d0       	rcall	.+334    	; 0x696 <sysclk_enable_module>
 548:	5f c0       	rjmp	.+190    	; 0x608 <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 54a:	c0 39       	cpi	r28, 0x90	; 144
 54c:	f8 e0       	ldi	r31, 0x08	; 8
 54e:	df 07       	cpc	r29, r31
 550:	21 f4       	brne	.+8      	; 0x55a <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 552:	64 e0       	ldi	r22, 0x04	; 4
 554:	83 e0       	ldi	r24, 0x03	; 3
 556:	9f d0       	rcall	.+318    	; 0x696 <sysclk_enable_module>
 558:	57 c0       	rjmp	.+174    	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 55a:	c0 39       	cpi	r28, 0x90	; 144
 55c:	89 e0       	ldi	r24, 0x09	; 9
 55e:	d8 07       	cpc	r29, r24
 560:	21 f4       	brne	.+8      	; 0x56a <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 562:	64 e0       	ldi	r22, 0x04	; 4
 564:	84 e0       	ldi	r24, 0x04	; 4
 566:	97 d0       	rcall	.+302    	; 0x696 <sysclk_enable_module>
 568:	4f c0       	rjmp	.+158    	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 56a:	c0 39       	cpi	r28, 0x90	; 144
 56c:	ea e0       	ldi	r30, 0x0A	; 10
 56e:	de 07       	cpc	r29, r30
 570:	21 f4       	brne	.+8      	; 0x57a <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 572:	64 e0       	ldi	r22, 0x04	; 4
 574:	85 e0       	ldi	r24, 0x05	; 5
 576:	8f d0       	rcall	.+286    	; 0x696 <sysclk_enable_module>
 578:	47 c0       	rjmp	.+142    	; 0x608 <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 57a:	c0 3c       	cpi	r28, 0xC0	; 192
 57c:	f8 e0       	ldi	r31, 0x08	; 8
 57e:	df 07       	cpc	r29, r31
 580:	21 f4       	brne	.+8      	; 0x58a <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 582:	68 e0       	ldi	r22, 0x08	; 8
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	87 d0       	rcall	.+270    	; 0x696 <sysclk_enable_module>
 588:	3f c0       	rjmp	.+126    	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 58a:	c0 3c       	cpi	r28, 0xC0	; 192
 58c:	89 e0       	ldi	r24, 0x09	; 9
 58e:	d8 07       	cpc	r29, r24
 590:	21 f4       	brne	.+8      	; 0x59a <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 592:	68 e0       	ldi	r22, 0x08	; 8
 594:	84 e0       	ldi	r24, 0x04	; 4
 596:	7f d0       	rcall	.+254    	; 0x696 <sysclk_enable_module>
 598:	37 c0       	rjmp	.+110    	; 0x608 <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 59a:	c0 3a       	cpi	r28, 0xA0	; 160
 59c:	e8 e0       	ldi	r30, 0x08	; 8
 59e:	de 07       	cpc	r29, r30
 5a0:	21 f4       	brne	.+8      	; 0x5aa <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 5a2:	60 e1       	ldi	r22, 0x10	; 16
 5a4:	83 e0       	ldi	r24, 0x03	; 3
 5a6:	77 d0       	rcall	.+238    	; 0x696 <sysclk_enable_module>
 5a8:	2f c0       	rjmp	.+94     	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 5aa:	c0 3a       	cpi	r28, 0xA0	; 160
 5ac:	f9 e0       	ldi	r31, 0x09	; 9
 5ae:	df 07       	cpc	r29, r31
 5b0:	21 f4       	brne	.+8      	; 0x5ba <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 5b2:	60 e1       	ldi	r22, 0x10	; 16
 5b4:	84 e0       	ldi	r24, 0x04	; 4
 5b6:	6f d0       	rcall	.+222    	; 0x696 <sysclk_enable_module>
 5b8:	27 c0       	rjmp	.+78     	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 5ba:	c0 3a       	cpi	r28, 0xA0	; 160
 5bc:	8a e0       	ldi	r24, 0x0A	; 10
 5be:	d8 07       	cpc	r29, r24
 5c0:	21 f4       	brne	.+8      	; 0x5ca <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 5c2:	60 e1       	ldi	r22, 0x10	; 16
 5c4:	85 e0       	ldi	r24, 0x05	; 5
 5c6:	67 d0       	rcall	.+206    	; 0x696 <sysclk_enable_module>
 5c8:	1f c0       	rjmp	.+62     	; 0x608 <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 5ca:	c0 3b       	cpi	r28, 0xB0	; 176
 5cc:	e8 e0       	ldi	r30, 0x08	; 8
 5ce:	de 07       	cpc	r29, r30
 5d0:	21 f4       	brne	.+8      	; 0x5da <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 5d2:	60 e2       	ldi	r22, 0x20	; 32
 5d4:	83 e0       	ldi	r24, 0x03	; 3
 5d6:	5f d0       	rcall	.+190    	; 0x696 <sysclk_enable_module>
 5d8:	17 c0       	rjmp	.+46     	; 0x608 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 5da:	c0 3b       	cpi	r28, 0xB0	; 176
 5dc:	f9 e0       	ldi	r31, 0x09	; 9
 5de:	df 07       	cpc	r29, r31
 5e0:	21 f4       	brne	.+8      	; 0x5ea <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 5e2:	60 e2       	ldi	r22, 0x20	; 32
 5e4:	84 e0       	ldi	r24, 0x04	; 4
 5e6:	57 d0       	rcall	.+174    	; 0x696 <sysclk_enable_module>
 5e8:	0f c0       	rjmp	.+30     	; 0x608 <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 5ea:	c0 38       	cpi	r28, 0x80	; 128
 5ec:	84 e0       	ldi	r24, 0x04	; 4
 5ee:	d8 07       	cpc	r29, r24
 5f0:	21 f4       	brne	.+8      	; 0x5fa <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 5f2:	60 e4       	ldi	r22, 0x40	; 64
 5f4:	83 e0       	ldi	r24, 0x03	; 3
 5f6:	4f d0       	rcall	.+158    	; 0x696 <sysclk_enable_module>
 5f8:	07 c0       	rjmp	.+14     	; 0x608 <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 5fa:	c0 3a       	cpi	r28, 0xA0	; 160
 5fc:	e4 e0       	ldi	r30, 0x04	; 4
 5fe:	de 07       	cpc	r29, r30
 600:	19 f4       	brne	.+6      	; 0x608 <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 602:	60 e4       	ldi	r22, 0x40	; 64
 604:	85 e0       	ldi	r24, 0x05	; 5
 606:	47 d0       	rcall	.+142    	; 0x696 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 608:	8d 81       	ldd	r24, Y+5	; 0x05
 60a:	8f 73       	andi	r24, 0x3F	; 63
 60c:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
 60e:	f8 01       	movw	r30, r16
 610:	94 81       	ldd	r25, Z+4	; 0x04
 612:	85 81       	ldd	r24, Z+5	; 0x05
 614:	89 2b       	or	r24, r25
 616:	96 81       	ldd	r25, Z+6	; 0x06
 618:	91 11       	cpse	r25, r1
 61a:	98 e0       	ldi	r25, 0x08	; 8
 61c:	89 2b       	or	r24, r25
 61e:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
 620:	f8 01       	movw	r30, r16
 622:	40 81       	ld	r20, Z
 624:	51 81       	ldd	r21, Z+1	; 0x01
 626:	62 81       	ldd	r22, Z+2	; 0x02
 628:	73 81       	ldd	r23, Z+3	; 0x03
 62a:	00 e0       	ldi	r16, 0x00	; 0
 62c:	18 e4       	ldi	r17, 0x48	; 72
 62e:	28 ee       	ldi	r18, 0xE8	; 232
 630:	31 e0       	ldi	r19, 0x01	; 1
 632:	ce 01       	movw	r24, r28
 634:	0d de       	rcall	.-998    	; 0x250 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
 636:	9c 81       	ldd	r25, Y+4	; 0x04
 638:	98 60       	ori	r25, 0x08	; 8
 63a:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
 63c:	9c 81       	ldd	r25, Y+4	; 0x04
 63e:	90 61       	ori	r25, 0x10	; 16
 640:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	1f 91       	pop	r17
 648:	0f 91       	pop	r16
 64a:	08 95       	ret

0000064c <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 64c:	8f ef       	ldi	r24, 0xFF	; 255
 64e:	80 93 70 00 	sts	0x0070, r24
 652:	80 93 71 00 	sts	0x0071, r24
 656:	80 93 72 00 	sts	0x0072, r24
 65a:	80 93 73 00 	sts	0x0073, r24
 65e:	80 93 74 00 	sts	0x0074, r24
 662:	80 93 75 00 	sts	0x0075, r24
 666:	80 93 76 00 	sts	0x0076, r24

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
 66a:	80 91 51 00 	lds	r24, 0x0051

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
 66e:	84 fd       	sbrc	r24, 4
 670:	0d c0       	rjmp	.+26     	; 0x68c <sysclk_init+0x40>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 672:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 674:	f8 94       	cli
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
 676:	e0 e5       	ldi	r30, 0x50	; 80
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 e1       	ldi	r24, 0x10	; 16
 67c:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
 67e:	80 81       	ld	r24, Z
 680:	80 61       	ori	r24, 0x10	; 16
 682:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 684:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
 686:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
 688:	84 ff       	sbrs	r24, 4
 68a:	fd cf       	rjmp	.-6      	; 0x686 <sysclk_init+0x3a>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 68c:	64 e0       	ldi	r22, 0x04	; 4
 68e:	80 e4       	ldi	r24, 0x40	; 64
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0d c0       	rjmp	.+26     	; 0x6ae <ccp_write_io>
 694:	08 95       	ret

00000696 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 696:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 698:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 69a:	e8 2f       	mov	r30, r24
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	e0 59       	subi	r30, 0x90	; 144
 6a0:	ff 4f       	sbci	r31, 0xFF	; 255
 6a2:	60 95       	com	r22
 6a4:	80 81       	ld	r24, Z
 6a6:	68 23       	and	r22, r24
 6a8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 6aa:	9f bf       	out	0x3f, r25	; 63
 6ac:	08 95       	ret

000006ae <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 6ae:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 6b0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 6b2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 6b4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 6b6:	60 83       	st	Z, r22
	ret                             // Return to caller
 6b8:	08 95       	ret

000006ba <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 6ba:	08 95       	ret

000006bc <main>:
#include <conf_usart_serial.h>
volatile uint8_t received_byte=0;

int main (void)
{
	sysclk_init();
 6bc:	c7 df       	rcall	.-114    	; 0x64c <sysclk_init>
	board_init();
 6be:	fd df       	rcall	.-6      	; 0x6ba <board_init>
	
	PORTD.OUTSET = PIN3_bm; //Let's  TX
 6c0:	c0 e6       	ldi	r28, 0x60	; 96
 6c2:	d6 e0       	ldi	r29, 0x06	; 6
 6c4:	88 e0       	ldi	r24, 0x08	; 8
 6c6:	8d 83       	std	Y+5, r24	; 0x05
	PORTD.DIRSET = PIN3_bm; //TX pin as output
 6c8:	89 83       	std	Y+1, r24	; 0x01

	PORTD.OUTCLR = PIN2_bm;
 6ca:	84 e0       	ldi	r24, 0x04	; 4
 6cc:	8e 83       	std	Y+6, r24	; 0x06
	PORTD.DIRCLR = PIN2_bm; //PC6 as RX
 6ce:	8a 83       	std	Y+2, r24	; 0x02
	
	PORTD.DIRSET = PIN1_bm;  //PC6 as xck   MASTER
 6d0:	82 e0       	ldi	r24, 0x02	; 2
 6d2:	89 83       	std	Y+1, r24	; 0x01

	PORTR.DIRSET=PIN1_bm;
 6d4:	e0 ee       	ldi	r30, 0xE0	; 224
 6d6:	f7 e0       	ldi	r31, 0x07	; 7
 6d8:	81 83       	std	Z+1, r24	; 0x01
	PORTR.OUTSET=PIN1_bm;
 6da:	85 83       	std	Z+5, r24	; 0x05
		 .baudrate = 2000000,
		 .charlength = USART_CHSIZE_8BIT_gc,
		 .paritytype = USART_PMODE_DISABLED_gc,
		 .stopbits = false
	 };
	 sysclk_enable_module(SYSCLK_PORT_D, PR_USART0_bm); 
 6dc:	60 e1       	ldi	r22, 0x10	; 16
 6de:	84 e0       	ldi	r24, 0x04	; 4
 6e0:	da df       	rcall	.-76     	; 0x696 <sysclk_enable_module>
	 usart_init_rs232(&USARTD0,&USART_SERIAL_OPTIONS_D0);
 6e2:	67 e0       	ldi	r22, 0x07	; 7
 6e4:	70 e2       	ldi	r23, 0x20	; 32
 6e6:	80 ea       	ldi	r24, 0xA0	; 160
 6e8:	99 e0       	ldi	r25, 0x09	; 9
 6ea:	c7 de       	rcall	.-626    	; 0x47a <usart_init_rs232>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 6ec:	e0 ea       	ldi	r30, 0xA0	; 160
 6ee:	f9 e0       	ldi	r31, 0x09	; 9
 6f0:	85 81       	ldd	r24, Z+5	; 0x05
 6f2:	8f 73       	andi	r24, 0x3F	; 63
 6f4:	80 64       	ori	r24, 0x40	; 64
 6f6:	85 83       	std	Z+5, r24	; 0x05
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
 6f8:	83 81       	ldd	r24, Z+3	; 0x03
 6fa:	8f 7c       	andi	r24, 0xCF	; 207
 6fc:	80 61       	ori	r24, 0x10	; 16
 6fe:	83 83       	std	Z+3, r24	; 0x03
	 usart_set_mode(&USARTD0, USART_CMODE_SYNCHRONOUS_gc);  //MODO SINCRONICO
	 usart_set_rx_interrupt_level(&USARTD0, USART_INT_LVL_LO);
	 
	 	PORTD.OUTSET = PIN7_bm; //Let's TX
 700:	80 e8       	ldi	r24, 0x80	; 128
 702:	8d 83       	std	Y+5, r24	; 0x05
	 	PORTD.DIRSET = PIN7_bm; //TX pin as output
 704:	89 83       	std	Y+1, r24	; 0x01

	 	PORTD.OUTCLR = PIN6_bm;
 706:	80 e4       	ldi	r24, 0x40	; 64
 708:	8e 83       	std	Y+6, r24	; 0x06
	 	PORTD.DIRCLR = PIN6_bm; //PC6 as RX
 70a:	8a 83       	std	Y+2, r24	; 0x02
	 	
	 	PORTD.DIRCLR = PIN5_bm; //SLAVE INPUT
 70c:	80 e2       	ldi	r24, 0x20	; 32
 70e:	8a 83       	std	Y+2, r24	; 0x02
		 //NO SE PONE VELOCIDAD DE RELOJ YA QUE ES ESCLAVO SINCRONICO
		 .charlength = USART_CHSIZE_8BIT_gc,
		 .paritytype = USART_PMODE_DISABLED_gc,
		 .stopbits = false
	 };
	 usart_init_rs232(&USARTD1,&USART_SERIAL_OPTIONS_D1);
 710:	60 e0       	ldi	r22, 0x00	; 0
 712:	70 e2       	ldi	r23, 0x20	; 32
 714:	80 eb       	ldi	r24, 0xB0	; 176
 716:	99 e0       	ldi	r25, 0x09	; 9
 718:	b0 de       	rcall	.-672    	; 0x47a <usart_init_rs232>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 71a:	e0 eb       	ldi	r30, 0xB0	; 176
 71c:	f9 e0       	ldi	r31, 0x09	; 9
 71e:	85 81       	ldd	r24, Z+5	; 0x05
 720:	8f 73       	andi	r24, 0x3F	; 63
 722:	80 64       	ori	r24, 0x40	; 64
 724:	85 83       	std	Z+5, r24	; 0x05
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
 726:	83 81       	ldd	r24, Z+3	; 0x03
 728:	8f 7c       	andi	r24, 0xCF	; 207
 72a:	80 61       	ori	r24, 0x10	; 16
 72c:	83 83       	std	Z+3, r24	; 0x03
	 usart_set_mode(&USARTD1, USART_CMODE_SYNCHRONOUS_gc);  //MODO SINCRONICO
	 usart_set_rx_interrupt_level(&USARTD1, USART_INT_LVL_LO);
	 
	 PORTE.DIR=0;
 72e:	e0 e8       	ldi	r30, 0x80	; 128
 730:	f6 e0       	ldi	r31, 0x06	; 6
 732:	10 82       	st	Z, r1
	 PORTE.PIN0CTRL|=PORT_OPC_PULLUP_gc|PORT_ISC_FALLING_gc;
 734:	80 89       	ldd	r24, Z+16	; 0x10
 736:	8a 61       	ori	r24, 0x1A	; 26
 738:	80 8b       	std	Z+16, r24	; 0x10
	 PORTE.INT0MASK = PIN0_bm;
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	82 87       	std	Z+10, r24	; 0x0a
	 PORTE.INTCTRL = PORT_INT0LVL_LO_gc;
 73e:	81 87       	std	Z+9, r24	; 0x09
	 
	 PORTA.DIR=255;
 740:	e0 e0       	ldi	r30, 0x00	; 0
 742:	f6 e0       	ldi	r31, 0x06	; 6
 744:	8f ef       	ldi	r24, 0xFF	; 255
 746:	80 83       	st	Z, r24
	 PORTA.OUT=0;
 748:	14 82       	std	Z+4, r1	; 0x04
	 
	 PORTB.DIR=0;
 74a:	e0 e2       	ldi	r30, 0x20	; 32
 74c:	f6 e0       	ldi	r31, 0x06	; 6
 74e:	10 82       	st	Z, r1
	 PORTB.PIN0CTRL=PORT_OPC_PULLUP_gc;
 750:	88 e1       	ldi	r24, 0x18	; 24
 752:	80 8b       	std	Z+16, r24	; 0x10
	 PORTB.PIN1CTRL=PORT_OPC_PULLUP_gc;
 754:	81 8b       	std	Z+17, r24	; 0x11
	 PORTB.PIN2CTRL=PORT_OPC_PULLUP_gc;
 756:	82 8b       	std	Z+18, r24	; 0x12
	 PORTB.PIN3CTRL=PORT_OPC_PULLUP_gc;
 758:	83 8b       	std	Z+19, r24	; 0x13
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
 75a:	87 e0       	ldi	r24, 0x07	; 7
 75c:	80 93 a2 00 	sts	0x00A2, r24
	 
	pmic_init();
	sei();
 760:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 762:	2f ef       	ldi	r18, 0xFF	; 255
 764:	87 ea       	ldi	r24, 0xA7	; 167
 766:	91 e6       	ldi	r25, 0x61	; 97
 768:	21 50       	subi	r18, 0x01	; 1
 76a:	80 40       	sbci	r24, 0x00	; 0
 76c:	90 40       	sbci	r25, 0x00	; 0
 76e:	e1 f7       	brne	.-8      	; 0x768 <main+0xac>
 770:	00 c0       	rjmp	.+0      	; 0x772 <main+0xb6>
 772:	00 00       	nop
// 			 {
// 				 PORTA.OUTTGL=PIN0_bm;
// 				 received_byte=0;
// 			 }

			PORTA.OUT=received_byte;
 774:	e0 e0       	ldi	r30, 0x00	; 0
 776:	f6 e0       	ldi	r31, 0x06	; 6
 778:	80 91 0e 20 	lds	r24, 0x200E
 77c:	84 83       	std	Z+4, r24	; 0x04


	 }
 77e:	fc cf       	rjmp	.-8      	; 0x778 <main+0xbc>

00000780 <__vector_43>:


}

ISR (PORTE_INT0_vect)
{
 780:	1f 92       	push	r1
 782:	0f 92       	push	r0
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	0f 92       	push	r0
 788:	11 24       	eor	r1, r1
 78a:	2f 93       	push	r18
 78c:	3f 93       	push	r19
 78e:	4f 93       	push	r20
 790:	5f 93       	push	r21
 792:	6f 93       	push	r22
 794:	7f 93       	push	r23
 796:	8f 93       	push	r24
 798:	9f 93       	push	r25
 79a:	af 93       	push	r26
 79c:	bf 93       	push	r27
 79e:	ef 93       	push	r30
 7a0:	ff 93       	push	r31
	//PORTA.OUTTGL=PIN1_bm;
	usart_putchar(&USARTD0,PORTB.IN);
 7a2:	60 91 28 06 	lds	r22, 0x0628
 7a6:	80 ea       	ldi	r24, 0xA0	; 160
 7a8:	99 e0       	ldi	r25, 0x09	; 9
 7aa:	44 dd       	rcall	.-1400   	; 0x234 <usart_putchar>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 7ac:	e0 ea       	ldi	r30, 0xA0	; 160
 7ae:	f9 e0       	ldi	r31, 0x09	; 9
 7b0:	81 81       	ldd	r24, Z+1	; 0x01
	while (!usart_tx_is_complete(&USARTD0)) {
 7b2:	86 ff       	sbrs	r24, 6
 7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <__vector_43+0x30>
	}
 

}
 7b6:	ff 91       	pop	r31
 7b8:	ef 91       	pop	r30
 7ba:	bf 91       	pop	r27
 7bc:	af 91       	pop	r26
 7be:	9f 91       	pop	r25
 7c0:	8f 91       	pop	r24
 7c2:	7f 91       	pop	r23
 7c4:	6f 91       	pop	r22
 7c6:	5f 91       	pop	r21
 7c8:	4f 91       	pop	r20
 7ca:	3f 91       	pop	r19
 7cc:	2f 91       	pop	r18
 7ce:	0f 90       	pop	r0
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	0f 90       	pop	r0
 7d4:	1f 90       	pop	r1
 7d6:	18 95       	reti

000007d8 <__vector_88>:
ISR(USARTD0_RXC_vect)
{
 7d8:	1f 92       	push	r1
 7da:	0f 92       	push	r0
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	0f 92       	push	r0
 7e0:	11 24       	eor	r1, r1

}
 7e2:	0f 90       	pop	r0
 7e4:	0f be       	out	0x3f, r0	; 63
 7e6:	0f 90       	pop	r0
 7e8:	1f 90       	pop	r1
 7ea:	18 95       	reti

000007ec <__vector_91>:
ISR(USARTD1_RXC_vect)
{
 7ec:	1f 92       	push	r1
 7ee:	0f 92       	push	r0
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	0f 92       	push	r0
 7f4:	11 24       	eor	r1, r1
 7f6:	2f 93       	push	r18
 7f8:	3f 93       	push	r19
 7fa:	4f 93       	push	r20
 7fc:	5f 93       	push	r21
 7fe:	6f 93       	push	r22
 800:	7f 93       	push	r23
 802:	8f 93       	push	r24
 804:	9f 93       	push	r25
 806:	af 93       	push	r26
 808:	bf 93       	push	r27
 80a:	ef 93       	push	r30
 80c:	ff 93       	push	r31
   received_byte = usart_getchar(&USARTD1);  //recibe pero no en forma de interrupcion
 80e:	80 eb       	ldi	r24, 0xB0	; 176
 810:	99 e0       	ldi	r25, 0x09	; 9
 812:	18 dd       	rcall	.-1488   	; 0x244 <usart_getchar>
 814:	80 93 0e 20 	sts	0x200E, r24
 818:	ff 91       	pop	r31
 81a:	ef 91       	pop	r30
 81c:	bf 91       	pop	r27
 81e:	af 91       	pop	r26
 820:	9f 91       	pop	r25
 822:	8f 91       	pop	r24
 824:	7f 91       	pop	r23
 826:	6f 91       	pop	r22
 828:	5f 91       	pop	r21
 82a:	4f 91       	pop	r20
 82c:	3f 91       	pop	r19
 82e:	2f 91       	pop	r18
 830:	0f 90       	pop	r0
 832:	0f be       	out	0x3f, r0	; 63
 834:	0f 90       	pop	r0
 836:	1f 90       	pop	r1
 838:	18 95       	reti

0000083a <__udivmodsi4>:
 83a:	a1 e2       	ldi	r26, 0x21	; 33
 83c:	1a 2e       	mov	r1, r26
 83e:	aa 1b       	sub	r26, r26
 840:	bb 1b       	sub	r27, r27
 842:	fd 01       	movw	r30, r26
 844:	0d c0       	rjmp	.+26     	; 0x860 <__udivmodsi4_ep>

00000846 <__udivmodsi4_loop>:
 846:	aa 1f       	adc	r26, r26
 848:	bb 1f       	adc	r27, r27
 84a:	ee 1f       	adc	r30, r30
 84c:	ff 1f       	adc	r31, r31
 84e:	a2 17       	cp	r26, r18
 850:	b3 07       	cpc	r27, r19
 852:	e4 07       	cpc	r30, r20
 854:	f5 07       	cpc	r31, r21
 856:	20 f0       	brcs	.+8      	; 0x860 <__udivmodsi4_ep>
 858:	a2 1b       	sub	r26, r18
 85a:	b3 0b       	sbc	r27, r19
 85c:	e4 0b       	sbc	r30, r20
 85e:	f5 0b       	sbc	r31, r21

00000860 <__udivmodsi4_ep>:
 860:	66 1f       	adc	r22, r22
 862:	77 1f       	adc	r23, r23
 864:	88 1f       	adc	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	1a 94       	dec	r1
 86a:	69 f7       	brne	.-38     	; 0x846 <__udivmodsi4_loop>
 86c:	60 95       	com	r22
 86e:	70 95       	com	r23
 870:	80 95       	com	r24
 872:	90 95       	com	r25
 874:	9b 01       	movw	r18, r22
 876:	ac 01       	movw	r20, r24
 878:	bd 01       	movw	r22, r26
 87a:	cf 01       	movw	r24, r30
 87c:	08 95       	ret

0000087e <_exit>:
 87e:	f8 94       	cli

00000880 <__stop_program>:
 880:	ff cf       	rjmp	.-2      	; 0x880 <__stop_program>
