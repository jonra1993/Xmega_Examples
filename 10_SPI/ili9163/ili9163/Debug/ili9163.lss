
ili9163.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000274  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000338  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a15  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000033d  00000000  00000000  00000ded  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012e6  00000000  00000000  0000112a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00002410  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002667b  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000205  00000000  00000000  00028b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00028d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000023b0  00000000  00000000  00028d8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	03 c1       	rjmp	.+518    	; 0x20c <__bad_interrupt>
   6:	00 00       	nop
   8:	01 c1       	rjmp	.+514    	; 0x20c <__bad_interrupt>
   a:	00 00       	nop
   c:	ff c0       	rjmp	.+510    	; 0x20c <__bad_interrupt>
   e:	00 00       	nop
  10:	fd c0       	rjmp	.+506    	; 0x20c <__bad_interrupt>
  12:	00 00       	nop
  14:	fb c0       	rjmp	.+502    	; 0x20c <__bad_interrupt>
  16:	00 00       	nop
  18:	f9 c0       	rjmp	.+498    	; 0x20c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f7 c0       	rjmp	.+494    	; 0x20c <__bad_interrupt>
  1e:	00 00       	nop
  20:	f5 c0       	rjmp	.+490    	; 0x20c <__bad_interrupt>
  22:	00 00       	nop
  24:	f3 c0       	rjmp	.+486    	; 0x20c <__bad_interrupt>
  26:	00 00       	nop
  28:	f1 c0       	rjmp	.+482    	; 0x20c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	ef c0       	rjmp	.+478    	; 0x20c <__bad_interrupt>
  2e:	00 00       	nop
  30:	ed c0       	rjmp	.+474    	; 0x20c <__bad_interrupt>
  32:	00 00       	nop
  34:	eb c0       	rjmp	.+470    	; 0x20c <__bad_interrupt>
  36:	00 00       	nop
  38:	e9 c0       	rjmp	.+466    	; 0x20c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e7 c0       	rjmp	.+462    	; 0x20c <__bad_interrupt>
  3e:	00 00       	nop
  40:	e5 c0       	rjmp	.+458    	; 0x20c <__bad_interrupt>
  42:	00 00       	nop
  44:	e3 c0       	rjmp	.+454    	; 0x20c <__bad_interrupt>
  46:	00 00       	nop
  48:	e1 c0       	rjmp	.+450    	; 0x20c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	df c0       	rjmp	.+446    	; 0x20c <__bad_interrupt>
  4e:	00 00       	nop
  50:	dd c0       	rjmp	.+442    	; 0x20c <__bad_interrupt>
  52:	00 00       	nop
  54:	db c0       	rjmp	.+438    	; 0x20c <__bad_interrupt>
  56:	00 00       	nop
  58:	d9 c0       	rjmp	.+434    	; 0x20c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d7 c0       	rjmp	.+430    	; 0x20c <__bad_interrupt>
  5e:	00 00       	nop
  60:	d5 c0       	rjmp	.+426    	; 0x20c <__bad_interrupt>
  62:	00 00       	nop
  64:	d3 c0       	rjmp	.+422    	; 0x20c <__bad_interrupt>
  66:	00 00       	nop
  68:	d1 c0       	rjmp	.+418    	; 0x20c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	cf c0       	rjmp	.+414    	; 0x20c <__bad_interrupt>
  6e:	00 00       	nop
  70:	cd c0       	rjmp	.+410    	; 0x20c <__bad_interrupt>
  72:	00 00       	nop
  74:	cb c0       	rjmp	.+406    	; 0x20c <__bad_interrupt>
  76:	00 00       	nop
  78:	c9 c0       	rjmp	.+402    	; 0x20c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	c7 c0       	rjmp	.+398    	; 0x20c <__bad_interrupt>
  7e:	00 00       	nop
  80:	c5 c0       	rjmp	.+394    	; 0x20c <__bad_interrupt>
  82:	00 00       	nop
  84:	c3 c0       	rjmp	.+390    	; 0x20c <__bad_interrupt>
  86:	00 00       	nop
  88:	c1 c0       	rjmp	.+386    	; 0x20c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	bf c0       	rjmp	.+382    	; 0x20c <__bad_interrupt>
  8e:	00 00       	nop
  90:	bd c0       	rjmp	.+378    	; 0x20c <__bad_interrupt>
  92:	00 00       	nop
  94:	bb c0       	rjmp	.+374    	; 0x20c <__bad_interrupt>
  96:	00 00       	nop
  98:	b9 c0       	rjmp	.+370    	; 0x20c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	b7 c0       	rjmp	.+366    	; 0x20c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b5 c0       	rjmp	.+362    	; 0x20c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b3 c0       	rjmp	.+358    	; 0x20c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b1 c0       	rjmp	.+354    	; 0x20c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	af c0       	rjmp	.+350    	; 0x20c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	ad c0       	rjmp	.+346    	; 0x20c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ab c0       	rjmp	.+342    	; 0x20c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	a9 c0       	rjmp	.+338    	; 0x20c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	a7 c0       	rjmp	.+334    	; 0x20c <__bad_interrupt>
  be:	00 00       	nop
  c0:	a5 c0       	rjmp	.+330    	; 0x20c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a3 c0       	rjmp	.+326    	; 0x20c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a1 c0       	rjmp	.+322    	; 0x20c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	9f c0       	rjmp	.+318    	; 0x20c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	9d c0       	rjmp	.+314    	; 0x20c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9b c0       	rjmp	.+310    	; 0x20c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	99 c0       	rjmp	.+306    	; 0x20c <__bad_interrupt>
  da:	00 00       	nop
  dc:	97 c0       	rjmp	.+302    	; 0x20c <__bad_interrupt>
  de:	00 00       	nop
  e0:	95 c0       	rjmp	.+298    	; 0x20c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	93 c0       	rjmp	.+294    	; 0x20c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	91 c0       	rjmp	.+290    	; 0x20c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	8f c0       	rjmp	.+286    	; 0x20c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	8d c0       	rjmp	.+282    	; 0x20c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	8b c0       	rjmp	.+278    	; 0x20c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	89 c0       	rjmp	.+274    	; 0x20c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	87 c0       	rjmp	.+270    	; 0x20c <__bad_interrupt>
  fe:	00 00       	nop
 100:	85 c0       	rjmp	.+266    	; 0x20c <__bad_interrupt>
 102:	00 00       	nop
 104:	83 c0       	rjmp	.+262    	; 0x20c <__bad_interrupt>
 106:	00 00       	nop
 108:	81 c0       	rjmp	.+258    	; 0x20c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	7f c0       	rjmp	.+254    	; 0x20c <__bad_interrupt>
 10e:	00 00       	nop
 110:	7d c0       	rjmp	.+250    	; 0x20c <__bad_interrupt>
 112:	00 00       	nop
 114:	7b c0       	rjmp	.+246    	; 0x20c <__bad_interrupt>
 116:	00 00       	nop
 118:	79 c0       	rjmp	.+242    	; 0x20c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	77 c0       	rjmp	.+238    	; 0x20c <__bad_interrupt>
 11e:	00 00       	nop
 120:	75 c0       	rjmp	.+234    	; 0x20c <__bad_interrupt>
 122:	00 00       	nop
 124:	73 c0       	rjmp	.+230    	; 0x20c <__bad_interrupt>
 126:	00 00       	nop
 128:	71 c0       	rjmp	.+226    	; 0x20c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	6f c0       	rjmp	.+222    	; 0x20c <__bad_interrupt>
 12e:	00 00       	nop
 130:	6d c0       	rjmp	.+218    	; 0x20c <__bad_interrupt>
 132:	00 00       	nop
 134:	6b c0       	rjmp	.+214    	; 0x20c <__bad_interrupt>
 136:	00 00       	nop
 138:	69 c0       	rjmp	.+210    	; 0x20c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	67 c0       	rjmp	.+206    	; 0x20c <__bad_interrupt>
 13e:	00 00       	nop
 140:	65 c0       	rjmp	.+202    	; 0x20c <__bad_interrupt>
 142:	00 00       	nop
 144:	63 c0       	rjmp	.+198    	; 0x20c <__bad_interrupt>
 146:	00 00       	nop
 148:	61 c0       	rjmp	.+194    	; 0x20c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	5f c0       	rjmp	.+190    	; 0x20c <__bad_interrupt>
 14e:	00 00       	nop
 150:	5d c0       	rjmp	.+186    	; 0x20c <__bad_interrupt>
 152:	00 00       	nop
 154:	5b c0       	rjmp	.+182    	; 0x20c <__bad_interrupt>
 156:	00 00       	nop
 158:	59 c0       	rjmp	.+178    	; 0x20c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	57 c0       	rjmp	.+174    	; 0x20c <__bad_interrupt>
 15e:	00 00       	nop
 160:	55 c0       	rjmp	.+170    	; 0x20c <__bad_interrupt>
 162:	00 00       	nop
 164:	53 c0       	rjmp	.+166    	; 0x20c <__bad_interrupt>
 166:	00 00       	nop
 168:	51 c0       	rjmp	.+162    	; 0x20c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	4f c0       	rjmp	.+158    	; 0x20c <__bad_interrupt>
 16e:	00 00       	nop
 170:	4d c0       	rjmp	.+154    	; 0x20c <__bad_interrupt>
 172:	00 00       	nop
 174:	4b c0       	rjmp	.+150    	; 0x20c <__bad_interrupt>
 176:	00 00       	nop
 178:	49 c0       	rjmp	.+146    	; 0x20c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	47 c0       	rjmp	.+142    	; 0x20c <__bad_interrupt>
 17e:	00 00       	nop
 180:	45 c0       	rjmp	.+138    	; 0x20c <__bad_interrupt>
 182:	00 00       	nop
 184:	43 c0       	rjmp	.+134    	; 0x20c <__bad_interrupt>
 186:	00 00       	nop
 188:	41 c0       	rjmp	.+130    	; 0x20c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	3f c0       	rjmp	.+126    	; 0x20c <__bad_interrupt>
 18e:	00 00       	nop
 190:	3d c0       	rjmp	.+122    	; 0x20c <__bad_interrupt>
 192:	00 00       	nop
 194:	3b c0       	rjmp	.+118    	; 0x20c <__bad_interrupt>
 196:	00 00       	nop
 198:	39 c0       	rjmp	.+114    	; 0x20c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	37 c0       	rjmp	.+110    	; 0x20c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	35 c0       	rjmp	.+106    	; 0x20c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	33 c0       	rjmp	.+102    	; 0x20c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	31 c0       	rjmp	.+98     	; 0x20c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	2f c0       	rjmp	.+94     	; 0x20c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	2d c0       	rjmp	.+90     	; 0x20c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	2b c0       	rjmp	.+86     	; 0x20c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	29 c0       	rjmp	.+82     	; 0x20c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	27 c0       	rjmp	.+78     	; 0x20c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	25 c0       	rjmp	.+74     	; 0x20c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	23 c0       	rjmp	.+70     	; 0x20c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	21 c0       	rjmp	.+66     	; 0x20c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	1f c0       	rjmp	.+62     	; 0x20c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	1d c0       	rjmp	.+58     	; 0x20c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	1b c0       	rjmp	.+54     	; 0x20c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	19 c0       	rjmp	.+50     	; 0x20c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	17 c0       	rjmp	.+46     	; 0x20c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	15 c0       	rjmp	.+42     	; 0x20c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	13 c0       	rjmp	.+38     	; 0x20c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	11 c0       	rjmp	.+34     	; 0x20c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	0f c0       	rjmp	.+30     	; 0x20c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	0d c0       	rjmp	.+26     	; 0x20c <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62
 208:	30 d0       	rcall	.+96     	; 0x26a <main>
 20a:	32 c0       	rjmp	.+100    	; 0x270 <_exit>

0000020c <__bad_interrupt>:
 20c:	f9 ce       	rjmp	.-526    	; 0x0 <__vectors>

0000020e <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	80 93 70 00 	sts	0x0070, r24
 214:	80 93 71 00 	sts	0x0071, r24
 218:	80 93 72 00 	sts	0x0072, r24
 21c:	80 93 73 00 	sts	0x0073, r24
 220:	80 93 74 00 	sts	0x0074, r24
 224:	80 93 75 00 	sts	0x0075, r24
 228:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 22c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 22e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 230:	e0 e5       	ldi	r30, 0x50	; 80
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	84 60       	ori	r24, 0x04	; 4
 238:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 23a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 23c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
 23e:	82 ff       	sbrs	r24, 2
 240:	fd cf       	rjmp	.-6      	; 0x23c <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 242:	62 e0       	ldi	r22, 0x02	; 2
 244:	80 e4       	ldi	r24, 0x40	; 64
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	09 d0       	rcall	.+18     	; 0x25c <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 24a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 24c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
 24e:	e0 e5       	ldi	r30, 0x50	; 80
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	8e 7f       	andi	r24, 0xFE	; 254
 256:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 258:	9f bf       	out	0x3f, r25	; 63
 25a:	08 95       	ret

0000025c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 25c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 25e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 260:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 262:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 264:	60 83       	st	Z, r22
	ret                             // Return to caller
 266:	08 95       	ret

00000268 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 268:	08 95       	ret

0000026a <main>:
#include "spi.h"

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
 26a:	d1 df       	rcall	.-94     	; 0x20e <sysclk_init>
	board_init();
 26c:	fd df       	rcall	.-6      	; 0x268 <board_init>
		
	while(1)
	{
		
	}
 26e:	ff cf       	rjmp	.-2      	; 0x26e <main+0x4>

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
