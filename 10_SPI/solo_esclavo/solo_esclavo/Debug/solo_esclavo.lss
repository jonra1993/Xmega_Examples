
solo_esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00802000  00802000  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000430  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001786  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000609  00000000  00000000  00001cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000181b  00000000  00000000  000022b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00003ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00026d7a  00000000  00000000  00003c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089b  00000000  00000000  0002a9f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0002b28d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008ff9  00000000  00000000  0002b325  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
   6:	00 00       	nop
   8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
   a:	00 00       	nop
   c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
   e:	00 00       	nop
  10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
  12:	00 00       	nop
  14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
  16:	00 00       	nop
  18:	0c c1       	rjmp	.+536    	; 0x232 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0a c1       	rjmp	.+532    	; 0x232 <__bad_interrupt>
  1e:	00 00       	nop
  20:	08 c1       	rjmp	.+528    	; 0x232 <__bad_interrupt>
  22:	00 00       	nop
  24:	06 c1       	rjmp	.+524    	; 0x232 <__bad_interrupt>
  26:	00 00       	nop
  28:	04 c1       	rjmp	.+520    	; 0x232 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	02 c1       	rjmp	.+516    	; 0x232 <__bad_interrupt>
  2e:	00 00       	nop
  30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c0       	rjmp	.+508    	; 0x232 <__bad_interrupt>
  36:	00 00       	nop
  38:	fc c0       	rjmp	.+504    	; 0x232 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fa c0       	rjmp	.+500    	; 0x232 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f8 c0       	rjmp	.+496    	; 0x232 <__bad_interrupt>
  42:	00 00       	nop
  44:	f6 c0       	rjmp	.+492    	; 0x232 <__bad_interrupt>
  46:	00 00       	nop
  48:	f4 c0       	rjmp	.+488    	; 0x232 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f2 c0       	rjmp	.+484    	; 0x232 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f0 c0       	rjmp	.+480    	; 0x232 <__bad_interrupt>
  52:	00 00       	nop
  54:	ee c0       	rjmp	.+476    	; 0x232 <__bad_interrupt>
  56:	00 00       	nop
  58:	ec c0       	rjmp	.+472    	; 0x232 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ea c0       	rjmp	.+468    	; 0x232 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
  62:	00 00       	nop
  64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
  66:	00 00       	nop
  68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
  72:	00 00       	nop
  74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
  76:	00 00       	nop
  78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d8 c0       	rjmp	.+432    	; 0x232 <__bad_interrupt>
  82:	00 00       	nop
  84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
  86:	00 00       	nop
  88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
  92:	00 00       	nop
  94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
  96:	00 00       	nop
  98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c4 c0       	rjmp	.+392    	; 0x232 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c2 c0       	rjmp	.+388    	; 0x232 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bc c0       	rjmp	.+376    	; 0x232 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	ba c0       	rjmp	.+372    	; 0x232 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b8 c0       	rjmp	.+368    	; 0x232 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b4 c0       	rjmp	.+360    	; 0x232 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b2 c0       	rjmp	.+356    	; 0x232 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b0 c0       	rjmp	.+352    	; 0x232 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
  da:	00 00       	nop
  dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a6 c0       	rjmp	.+332    	; 0x232 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a4 c0       	rjmp	.+328    	; 0x232 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a2 c0       	rjmp	.+324    	; 0x232 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a0 c0       	rjmp	.+320    	; 0x232 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9e c0       	rjmp	.+316    	; 0x232 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9c c0       	rjmp	.+312    	; 0x232 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9a c0       	rjmp	.+308    	; 0x232 <__bad_interrupt>
  fe:	00 00       	nop
 100:	98 c0       	rjmp	.+304    	; 0x232 <__bad_interrupt>
 102:	00 00       	nop
 104:	96 c0       	rjmp	.+300    	; 0x232 <__bad_interrupt>
 106:	00 00       	nop
 108:	94 c0       	rjmp	.+296    	; 0x232 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	92 c0       	rjmp	.+292    	; 0x232 <__bad_interrupt>
 10e:	00 00       	nop
 110:	90 c0       	rjmp	.+288    	; 0x232 <__bad_interrupt>
 112:	00 00       	nop
 114:	8e c0       	rjmp	.+284    	; 0x232 <__bad_interrupt>
 116:	00 00       	nop
 118:	8c c0       	rjmp	.+280    	; 0x232 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8a c0       	rjmp	.+276    	; 0x232 <__bad_interrupt>
 11e:	00 00       	nop
 120:	88 c0       	rjmp	.+272    	; 0x232 <__bad_interrupt>
 122:	00 00       	nop
 124:	86 c0       	rjmp	.+268    	; 0x232 <__bad_interrupt>
 126:	00 00       	nop
 128:	84 c0       	rjmp	.+264    	; 0x232 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	82 c0       	rjmp	.+260    	; 0x232 <__bad_interrupt>
 12e:	00 00       	nop
 130:	80 c0       	rjmp	.+256    	; 0x232 <__bad_interrupt>
 132:	00 00       	nop
 134:	7e c0       	rjmp	.+252    	; 0x232 <__bad_interrupt>
 136:	00 00       	nop
 138:	7c c0       	rjmp	.+248    	; 0x232 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7a c0       	rjmp	.+244    	; 0x232 <__bad_interrupt>
 13e:	00 00       	nop
 140:	78 c0       	rjmp	.+240    	; 0x232 <__bad_interrupt>
 142:	00 00       	nop
 144:	76 c0       	rjmp	.+236    	; 0x232 <__bad_interrupt>
 146:	00 00       	nop
 148:	74 c0       	rjmp	.+232    	; 0x232 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	72 c0       	rjmp	.+228    	; 0x232 <__bad_interrupt>
 14e:	00 00       	nop
 150:	70 c0       	rjmp	.+224    	; 0x232 <__bad_interrupt>
 152:	00 00       	nop
 154:	6e c0       	rjmp	.+220    	; 0x232 <__bad_interrupt>
 156:	00 00       	nop
 158:	6c c0       	rjmp	.+216    	; 0x232 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	d5 c0       	rjmp	.+426    	; 0x308 <__vector_87>
 15e:	00 00       	nop
 160:	68 c0       	rjmp	.+208    	; 0x232 <__bad_interrupt>
 162:	00 00       	nop
 164:	66 c0       	rjmp	.+204    	; 0x232 <__bad_interrupt>
 166:	00 00       	nop
 168:	64 c0       	rjmp	.+200    	; 0x232 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	62 c0       	rjmp	.+196    	; 0x232 <__bad_interrupt>
 16e:	00 00       	nop
 170:	60 c0       	rjmp	.+192    	; 0x232 <__bad_interrupt>
 172:	00 00       	nop
 174:	5e c0       	rjmp	.+188    	; 0x232 <__bad_interrupt>
 176:	00 00       	nop
 178:	5c c0       	rjmp	.+184    	; 0x232 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5a c0       	rjmp	.+180    	; 0x232 <__bad_interrupt>
 17e:	00 00       	nop
 180:	58 c0       	rjmp	.+176    	; 0x232 <__bad_interrupt>
 182:	00 00       	nop
 184:	56 c0       	rjmp	.+172    	; 0x232 <__bad_interrupt>
 186:	00 00       	nop
 188:	54 c0       	rjmp	.+168    	; 0x232 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	52 c0       	rjmp	.+164    	; 0x232 <__bad_interrupt>
 18e:	00 00       	nop
 190:	50 c0       	rjmp	.+160    	; 0x232 <__bad_interrupt>
 192:	00 00       	nop
 194:	4e c0       	rjmp	.+156    	; 0x232 <__bad_interrupt>
 196:	00 00       	nop
 198:	4c c0       	rjmp	.+152    	; 0x232 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4a c0       	rjmp	.+148    	; 0x232 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	48 c0       	rjmp	.+144    	; 0x232 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	46 c0       	rjmp	.+140    	; 0x232 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	44 c0       	rjmp	.+136    	; 0x232 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	42 c0       	rjmp	.+132    	; 0x232 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3e c0       	rjmp	.+124    	; 0x232 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3c c0       	rjmp	.+120    	; 0x232 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3a c0       	rjmp	.+116    	; 0x232 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	38 c0       	rjmp	.+112    	; 0x232 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	36 c0       	rjmp	.+108    	; 0x232 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	34 c0       	rjmp	.+104    	; 0x232 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	32 c0       	rjmp	.+100    	; 0x232 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	30 c0       	rjmp	.+96     	; 0x232 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2e c0       	rjmp	.+92     	; 0x232 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2c c0       	rjmp	.+88     	; 0x232 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2a c0       	rjmp	.+84     	; 0x232 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	28 c0       	rjmp	.+80     	; 0x232 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	26 c0       	rjmp	.+76     	; 0x232 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	24 c0       	rjmp	.+72     	; 0x232 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	22 c0       	rjmp	.+68     	; 0x232 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	20 c0       	rjmp	.+64     	; 0x232 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1e c0       	rjmp	.+60     	; 0x232 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1c c0       	rjmp	.+56     	; 0x232 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	ec e4       	ldi	r30, 0x4C	; 76
 210:	f3 e0       	ldi	r31, 0x03	; 3
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a0 30       	cpi	r26, 0x00	; 0
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	20 e2       	ldi	r18, 0x20	; 32
 220:	a0 e0       	ldi	r26, 0x00	; 0
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	a4 30       	cpi	r26, 0x04	; 4
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	49 d0       	rcall	.+146    	; 0x2c2 <main>
 230:	8b c0       	rjmp	.+278    	; 0x348 <_exit>

00000232 <__bad_interrupt>:
 232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <SPI_SlaveInit>:
                   SPI_t *module,
                   PORT_t *port,
                   bool lsbFirst,
                   SPI_MODE_t mode,
                   SPI_INTLVL_t intLevel)
{
 234:	ef 92       	push	r14
 236:	0f 93       	push	r16
 238:	fc 01       	movw	r30, r24
	/* SPI module. */
	spi->module       = module;
 23a:	60 83       	st	Z, r22
 23c:	71 83       	std	Z+1, r23	; 0x01
	spi->port         = port;
 23e:	42 83       	std	Z+2, r20	; 0x02
 240:	53 83       	std	Z+3, r21	; 0x03

	spi->module->CTRL = SPI_ENABLE_bm |                /* Enable SPI module. */
 242:	21 11       	cpse	r18, r1
 244:	02 c0       	rjmp	.+4      	; 0x24a <SPI_SlaveInit+0x16>
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	01 c0       	rjmp	.+2      	; 0x24c <SPI_SlaveInit+0x18>
 24a:	80 e6       	ldi	r24, 0x60	; 96
 24c:	08 2b       	or	r16, r24
 24e:	db 01       	movw	r26, r22
 250:	0c 93       	st	X, r16
	                    (lsbFirst ? SPI_DORD_bm : 0) | /* Data order. */
	                    mode;                          /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
 252:	a0 81       	ld	r26, Z
 254:	b1 81       	ldd	r27, Z+1	; 0x01
 256:	11 96       	adiw	r26, 0x01	; 1
 258:	ec 92       	st	X, r14

	/* MISO as output. */
	spi->port->DIRSET = SPI_MISO_bm;
 25a:	02 80       	ldd	r0, Z+2	; 0x02
 25c:	f3 81       	ldd	r31, Z+3	; 0x03
 25e:	e0 2d       	mov	r30, r0
 260:	80 e4       	ldi	r24, 0x40	; 64
 262:	81 83       	std	Z+1, r24	; 0x01
}
 264:	0f 91       	pop	r16
 266:	ef 90       	pop	r14
 268:	08 95       	ret

0000026a <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	80 93 70 00 	sts	0x0070, r24
 270:	80 93 71 00 	sts	0x0071, r24
 274:	80 93 72 00 	sts	0x0072, r24
 278:	80 93 73 00 	sts	0x0073, r24
 27c:	80 93 74 00 	sts	0x0074, r24
 280:	80 93 75 00 	sts	0x0075, r24
 284:	80 93 76 00 	sts	0x0076, r24

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
 288:	80 91 51 00 	lds	r24, 0x0051

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
 28c:	84 fd       	sbrc	r24, 4
 28e:	0d c0       	rjmp	.+26     	; 0x2aa <sysclk_init+0x40>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 290:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 292:	f8 94       	cli
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
 294:	e0 e5       	ldi	r30, 0x50	; 80
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	8a e0       	ldi	r24, 0x0A	; 10
 29a:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
 29c:	80 81       	ld	r24, Z
 29e:	80 61       	ori	r24, 0x10	; 16
 2a0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 2a2:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
 2a4:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
 2a6:	84 ff       	sbrs	r24, 4
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <sysclk_init+0x3a>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 2aa:	64 e0       	ldi	r22, 0x04	; 4
 2ac:	80 e4       	ldi	r24, 0x40	; 64
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <ccp_write_io>
 2b2:	08 95       	ret

000002b4 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 2b4:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 2b6:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 2b8:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 2ba:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 2bc:	60 83       	st	Z, r22
	ret                             // Return to caller
 2be:	08 95       	ret

000002c0 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 2c0:	08 95       	ret

000002c2 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	sysclk_init();
 2c2:	d3 df       	rcall	.-90     	; 0x26a <sysclk_init>
	board_init();
 2c4:	fd df       	rcall	.-6      	; 0x2c0 <board_init>
    PORTD.DIR = 0B01000000;          // MISO output; MOSI, SCK, SS inputs
 2c6:	e0 e6       	ldi	r30, 0x60	; 96
 2c8:	f6 e0       	ldi	r31, 0x06	; 6
 2ca:	80 e4       	ldi	r24, 0x40	; 64
 2cc:	80 83       	st	Z, r24
	PORTD.OUTCLR=PIN4_bm;
 2ce:	80 e1       	ldi	r24, 0x10	; 16
 2d0:	86 83       	std	Z+6, r24	; 0x06
	/* Initialize SPI slave on port D. */
	SPI_SlaveInit(&spiSlaveD, &SPID, &PORTD, false, SPI_MODE_0_gc, SPI_INTLVL_MED_gc);
 2d2:	68 94       	set
 2d4:	ee 24       	eor	r14, r14
 2d6:	e1 f8       	bld	r14, 1
 2d8:	00 e0       	ldi	r16, 0x00	; 0
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	40 e6       	ldi	r20, 0x60	; 96
 2de:	56 e0       	ldi	r21, 0x06	; 6
 2e0:	60 ec       	ldi	r22, 0xC0	; 192
 2e2:	79 e0       	ldi	r23, 0x09	; 9
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e2       	ldi	r25, 0x20	; 32
 2e8:	a5 df       	rcall	.-182    	; 0x234 <SPI_SlaveInit>
	/* Enable low and medium level interrupts in the interrupt controller. */
	PMIC.CTRL |= PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
 2ea:	e0 ea       	ldi	r30, 0xA0	; 160
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	82 81       	ldd	r24, Z+2	; 0x02
 2f0:	83 60       	ori	r24, 0x03	; 3
 2f2:	82 83       	std	Z+2, r24	; 0x02
	sei();
 2f4:	78 94       	sei
	PORTA.DIRSET=PIN0_bm;
 2f6:	e0 e0       	ldi	r30, 0x00	; 0
 2f8:	f6 e0       	ldi	r31, 0x06	; 6
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR=PIN0_bm;
 2fe:	86 83       	std	Z+6, r24	; 0x06
	
	PORTA.DIRSET=PIN1_bm;
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR=PIN1_bm;
 304:	86 83       	std	Z+6, r24	; 0x06
// 			else
// 			{
// 				PORTA.OUTSET=PIN0_bm;
// 			}
// 		}
}
 306:	ff cf       	rjmp	.-2      	; 0x306 <main+0x44>

00000308 <__vector_87>:
 *  data register, read to be shifted back by the master.
 *  If more extensive computation is needed, it is recommended
 *  to do this in a function, which is then called by the ISR.
 */
ISR(SPID_INT_vect)
{
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	8f 93       	push	r24
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31

	/* Get received data. */
	uint8_t data = SPI_SlaveReadByte(&spiSlaveD);
 318:	e0 91 00 20 	lds	r30, 0x2000
 31c:	f0 91 01 20 	lds	r31, 0x2001
 320:	83 81       	ldd	r24, Z+3	; 0x03
	if (data=='a')
 322:	81 36       	cpi	r24, 0x61	; 97
 324:	21 f4       	brne	.+8      	; 0x32e <__vector_87+0x26>
	{	
		PORTA.OUTSET=PIN0_bm;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	80 93 05 06 	sts	0x0605, r24
 32c:	05 c0       	rjmp	.+10     	; 0x338 <__vector_87+0x30>
	} 
	else if (data=='b')
 32e:	82 36       	cpi	r24, 0x62	; 98
 330:	19 f4       	brne	.+6      	; 0x338 <__vector_87+0x30>
	{
		PORTA.OUTCLR=PIN0_bm;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	80 93 06 06 	sts	0x0606, r24
	//	dos=0;
	//}	
	
	/* Send back incremented value. */
	//SPI_SlaveWriteByte(&spiSlaveD, data);
 338:	ff 91       	pop	r31
 33a:	ef 91       	pop	r30
 33c:	8f 91       	pop	r24
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
